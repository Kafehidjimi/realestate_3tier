generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model auditlog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  action    String   @db.VarChar(50)
  entity    String   @db.VarChar(50)
  entityId  Int?
  before    Json?
  after     Json?
  createdAt DateTime @default(now())

  @@index([userId], map: "AuditLog_userId_fkey")
}

model client {
  id       Int     @id @default(autoincrement())
  name     String  @db.VarChar(150)
  email    String? @db.VarChar(100)
  phone    String? @db.VarChar(30)
  address  String? @db.Text
  idNumber String? @db.VarChar(50)
  notes    String? @db.Text
  
  // Relations
  deals         deal[]
  coOwnerships  coownership[]
}

model contactlead {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(100)
  email      String?  @db.VarChar(100)
  phone      String?  @db.VarChar(30)
  message    String   @db.Text
  source     String   @default("Formulaire site") @db.VarChar(100)
  createdAt  DateTime @default(now())
  propertyId Int?

  property   property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)

  @@index([propertyId], map: "ContactLead_propertyId_fkey")
}

model coownership {
  id         Int      @id @default(autoincrement())
  propertyId Int
  clientId   Int
  share      Decimal  @default(0.00) @db.Decimal(5, 2)
  role       String   @default("coowner") @db.VarChar(30)
  createdAt  DateTime @default(now())

  property   property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  client     client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([propertyId, clientId], map: "CoOwnership_propertyId_clientId_key")
  @@index([clientId], map: "CoOwnership_clientId_fkey")
}

model deal {
  id             Int       @id @default(autoincrement())
  type           String    @default("sale") @db.VarChar(20)
  status         String    @default("draft") @db.VarChar(30)
  basePrice      Decimal   @default(0.00) @db.Decimal(14, 2)
  discount       Decimal   @default(0.00) @db.Decimal(14, 2)
  taxRate        Decimal   @default(0.00) @db.Decimal(5, 2)
  commissionRate Decimal   @default(0.00) @db.Decimal(5, 2)
  expectedClose  DateTime?
  closedAt       DateTime?
  createdAt      DateTime  @default(now())
  propertyId     Int?
  clientId       Int

  // Relations
  client         client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  property       property?         @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  invoices       invoice[]
  payments       payment[]
  schedules      paymentschedule[]
  expenses       expense[]

  @@index([clientId], map: "Deal_clientId_fkey")
  @@index([propertyId], map: "Deal_propertyId_fkey")
}

model expense {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  category    String   @db.VarChar(50)
  description String?  @db.Text
  amount      Decimal  @db.Decimal(14, 2)
  payee       String?  @db.VarChar(100)
  dealId      Int?
  propertyId  Int?

  deal       deal?     @relation(fields: [dealId], references: [id], onDelete: SetNull)
  property   property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)

  @@index([dealId], map: "Expense_dealId_fkey")
  @@index([propertyId], map: "Expense_propertyId_fkey")
}

model inquiry {
  id         Int            @id @default(autoincrement())
  propertyId Int
  fullName   String         @db.VarChar(100)
  phone      String?        @db.VarChar(30)
  email      String?        @db.VarChar(100)
  message    String?        @db.Text
  type       inquiry_type   @default(info)
  status     inquiry_status @default(new)
  createdAt  DateTime       @default(now())

  property   property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId], map: "Inquiry_propertyId_fkey")
}

model invoice {
  id        Int       @id @default(autoincrement())
  number    String    @unique(map: "Invoice_number_key") @db.VarChar(50)
  issueDate DateTime  @default(now())
  dueDate   DateTime?
  amount    Decimal   @db.Decimal(14, 2)
  status    String    @default("open") @db.VarChar(20)
  dealId    Int

  deal      deal      @relation(fields: [dealId], references: [id], onDelete: Cascade)
  payments  payment[]

  @@index([dealId], map: "Invoice_dealId_fkey")
}

model pagecontent {
  id        Int      @id @default(autoincrement())
  page      String   @db.VarChar(50)
  section   String   @db.VarChar(50)
  key       String   @db.VarChar(50)
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([page, section, key], map: "PageContent_page_section_key_key")
}

model payment {
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now())
  amount    Decimal  @db.Decimal(14, 2)
  method    String   @default("cash") @db.VarChar(30)
  reference String?  @db.VarChar(100)
  dealId    Int
  invoiceId Int?

  deal      deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  invoice   invoice? @relation(fields: [invoiceId], references: [id], onDelete: SetNull)
  schedules paymentschedule[]

  @@index([dealId], map: "Payment_dealId_fkey")
  @@index([invoiceId], map: "Payment_invoiceId_fkey")
}

model paymentschedule {
  id        Int      @id @default(autoincrement())
  dealId    Int
  label     String   @db.VarChar(100)
  dueDate   DateTime
  amount    Decimal  @db.Decimal(14, 2)
  status    String   @default("pending") @db.VarChar(20)
  paymentId Int?
  createdAt DateTime @default(now())

  deal      deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  payment   payment? @relation(fields: [paymentId], references: [id], onDelete: SetNull)

  @@index([dealId], map: "PaymentSchedule_dealId_fkey")
  @@index([paymentId], map: "PaymentSchedule_paymentId_fkey")
}

model project {
  id          Int             @id @default(autoincrement())
  title       String          @db.VarChar(200)
  slug        String          @unique(map: "Project_slug_key") @db.VarChar(100)
  description String?         @db.Text
  coverImage  String?         @db.VarChar(255)
  status      String?         @db.VarChar(20)
  location    String?         @db.VarChar(150)
  category    String?         @db.VarChar(50)
  surface     Decimal?        @db.Decimal(12, 2)
  units       Int?
  startedAt   DateTime?
  deliveredAt DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  medias      projectmedia[]
}

model projectmedia {
  id        Int      @id @default(autoincrement())
  projectId Int
  kind      String   @default("image") @db.VarChar(20)
  url       String   @db.VarChar(255)
  alt       String?  @db.VarChar(200)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  
  project   project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId], map: "ProjectMedia_projectId_fkey")
}

model property {
  id                 Int              @id @default(autoincrement())
  title              String
  slug               String           @unique(map: "Property_slug_key")
  description        String?          @db.Text
  price              Decimal?         @db.Decimal(15, 2)
  location           String?
  category           String?          @db.VarChar(50)
  bedrooms           Int?
  bathrooms          Int?
  area_m2            Decimal?         @db.Decimal(10, 2)
  surfaceHabitable   Int?
  type               String?          @db.VarChar(50)
  yearOfConstruction Int?
  capacity           Int?
  status             String?
  mainImage          String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  
  images             propertyimage[]
  deals              deal[]
  expenses           expense[]
  inquiries          inquiry[]
  contactLeads       contactlead[]
  coOwnerships       coownership[]
}

model propertyimage {
  id         Int      @id @default(autoincrement())
  propertyId Int
  url        String
  alt        String?
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  
  property   property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId], map: "PropertyImage_propertyId_fkey")
}

model service {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  title       String? @db.VarChar(150)
  description String? @db.Text
  content     String? @db.Text
  icon        String? @db.VarChar(50)
  slug        String? @db.VarChar(100)
}

model user {
  id        Int      @id @default(autoincrement())
  email     String   @unique(map: "User_email_key") @db.VarChar(100)
  password  String   @db.VarChar(255)
  name      String?  @db.VarChar(100)
  isStaff   Boolean  @default(true)
  role      String   @default("admin") @db.VarChar(20)
  createdAt DateTime @default(now())
}

model companyinfo {
  id        Int      @id @default(autoincrement())
  key       String   @unique @db.VarChar(50)
  value     String   @db.Text
  category  String   @default("contact") @db.VarChar(50)
  label     String?  @db.VarChar(100)
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum inquiry_type {
  visit
  info
}

enum inquiry_status {
  new
  contacted
  closed
}