
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model auditlog
 * 
 */
export type auditlog = $Result.DefaultSelection<Prisma.$auditlogPayload>
/**
 * Model client
 * 
 */
export type client = $Result.DefaultSelection<Prisma.$clientPayload>
/**
 * Model contactlead
 * 
 */
export type contactlead = $Result.DefaultSelection<Prisma.$contactleadPayload>
/**
 * Model coownership
 * 
 */
export type coownership = $Result.DefaultSelection<Prisma.$coownershipPayload>
/**
 * Model deal
 * 
 */
export type deal = $Result.DefaultSelection<Prisma.$dealPayload>
/**
 * Model expense
 * 
 */
export type expense = $Result.DefaultSelection<Prisma.$expensePayload>
/**
 * Model inquiry
 * 
 */
export type inquiry = $Result.DefaultSelection<Prisma.$inquiryPayload>
/**
 * Model invoice
 * 
 */
export type invoice = $Result.DefaultSelection<Prisma.$invoicePayload>
/**
 * Model pagecontent
 * 
 */
export type pagecontent = $Result.DefaultSelection<Prisma.$pagecontentPayload>
/**
 * Model payment
 * 
 */
export type payment = $Result.DefaultSelection<Prisma.$paymentPayload>
/**
 * Model paymentschedule
 * 
 */
export type paymentschedule = $Result.DefaultSelection<Prisma.$paymentschedulePayload>
/**
 * Model project
 * 
 */
export type project = $Result.DefaultSelection<Prisma.$projectPayload>
/**
 * Model projectmedia
 * 
 */
export type projectmedia = $Result.DefaultSelection<Prisma.$projectmediaPayload>
/**
 * Model property
 * 
 */
export type property = $Result.DefaultSelection<Prisma.$propertyPayload>
/**
 * Model propertyimage
 * 
 */
export type propertyimage = $Result.DefaultSelection<Prisma.$propertyimagePayload>
/**
 * Model service
 * 
 */
export type service = $Result.DefaultSelection<Prisma.$servicePayload>
/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model companyinfo
 * 
 */
export type companyinfo = $Result.DefaultSelection<Prisma.$companyinfoPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const inquiry_type: {
  visit: 'visit',
  info: 'info'
};

export type inquiry_type = (typeof inquiry_type)[keyof typeof inquiry_type]


export const inquiry_status: {
  new: 'new',
  contacted: 'contacted',
  closed: 'closed'
};

export type inquiry_status = (typeof inquiry_status)[keyof typeof inquiry_status]

}

export type inquiry_type = $Enums.inquiry_type

export const inquiry_type: typeof $Enums.inquiry_type

export type inquiry_status = $Enums.inquiry_status

export const inquiry_status: typeof $Enums.inquiry_status

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Auditlogs
 * const auditlogs = await prisma.auditlog.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Auditlogs
   * const auditlogs = await prisma.auditlog.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.auditlog`: Exposes CRUD operations for the **auditlog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Auditlogs
    * const auditlogs = await prisma.auditlog.findMany()
    * ```
    */
  get auditlog(): Prisma.auditlogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.client`: Exposes CRUD operations for the **client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.clientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contactlead`: Exposes CRUD operations for the **contactlead** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contactleads
    * const contactleads = await prisma.contactlead.findMany()
    * ```
    */
  get contactlead(): Prisma.contactleadDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.coownership`: Exposes CRUD operations for the **coownership** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Coownerships
    * const coownerships = await prisma.coownership.findMany()
    * ```
    */
  get coownership(): Prisma.coownershipDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.deal`: Exposes CRUD operations for the **deal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Deals
    * const deals = await prisma.deal.findMany()
    * ```
    */
  get deal(): Prisma.dealDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.expense`: Exposes CRUD operations for the **expense** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Expenses
    * const expenses = await prisma.expense.findMany()
    * ```
    */
  get expense(): Prisma.expenseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inquiry`: Exposes CRUD operations for the **inquiry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inquiries
    * const inquiries = await prisma.inquiry.findMany()
    * ```
    */
  get inquiry(): Prisma.inquiryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invoice`: Exposes CRUD operations for the **invoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invoices
    * const invoices = await prisma.invoice.findMany()
    * ```
    */
  get invoice(): Prisma.invoiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pagecontent`: Exposes CRUD operations for the **pagecontent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pagecontents
    * const pagecontents = await prisma.pagecontent.findMany()
    * ```
    */
  get pagecontent(): Prisma.pagecontentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.paymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paymentschedule`: Exposes CRUD operations for the **paymentschedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Paymentschedules
    * const paymentschedules = await prisma.paymentschedule.findMany()
    * ```
    */
  get paymentschedule(): Prisma.paymentscheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.projectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.projectmedia`: Exposes CRUD operations for the **projectmedia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projectmedias
    * const projectmedias = await prisma.projectmedia.findMany()
    * ```
    */
  get projectmedia(): Prisma.projectmediaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.property`: Exposes CRUD operations for the **property** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Properties
    * const properties = await prisma.property.findMany()
    * ```
    */
  get property(): Prisma.propertyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.propertyimage`: Exposes CRUD operations for the **propertyimage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Propertyimages
    * const propertyimages = await prisma.propertyimage.findMany()
    * ```
    */
  get propertyimage(): Prisma.propertyimageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.service`: Exposes CRUD operations for the **service** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.service.findMany()
    * ```
    */
  get service(): Prisma.serviceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.companyinfo`: Exposes CRUD operations for the **companyinfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companyinfos
    * const companyinfos = await prisma.companyinfo.findMany()
    * ```
    */
  get companyinfo(): Prisma.companyinfoDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.17.1
   * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    auditlog: 'auditlog',
    client: 'client',
    contactlead: 'contactlead',
    coownership: 'coownership',
    deal: 'deal',
    expense: 'expense',
    inquiry: 'inquiry',
    invoice: 'invoice',
    pagecontent: 'pagecontent',
    payment: 'payment',
    paymentschedule: 'paymentschedule',
    project: 'project',
    projectmedia: 'projectmedia',
    property: 'property',
    propertyimage: 'propertyimage',
    service: 'service',
    user: 'user',
    companyinfo: 'companyinfo'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "auditlog" | "client" | "contactlead" | "coownership" | "deal" | "expense" | "inquiry" | "invoice" | "pagecontent" | "payment" | "paymentschedule" | "project" | "projectmedia" | "property" | "propertyimage" | "service" | "user" | "companyinfo"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      auditlog: {
        payload: Prisma.$auditlogPayload<ExtArgs>
        fields: Prisma.auditlogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.auditlogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auditlogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.auditlogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auditlogPayload>
          }
          findFirst: {
            args: Prisma.auditlogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auditlogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.auditlogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auditlogPayload>
          }
          findMany: {
            args: Prisma.auditlogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auditlogPayload>[]
          }
          create: {
            args: Prisma.auditlogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auditlogPayload>
          }
          createMany: {
            args: Prisma.auditlogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.auditlogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auditlogPayload>
          }
          update: {
            args: Prisma.auditlogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auditlogPayload>
          }
          deleteMany: {
            args: Prisma.auditlogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.auditlogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.auditlogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$auditlogPayload>
          }
          aggregate: {
            args: Prisma.AuditlogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditlog>
          }
          groupBy: {
            args: Prisma.auditlogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditlogGroupByOutputType>[]
          }
          count: {
            args: Prisma.auditlogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditlogCountAggregateOutputType> | number
          }
        }
      }
      client: {
        payload: Prisma.$clientPayload<ExtArgs>
        fields: Prisma.clientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.clientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.clientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientPayload>
          }
          findFirst: {
            args: Prisma.clientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.clientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientPayload>
          }
          findMany: {
            args: Prisma.clientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientPayload>[]
          }
          create: {
            args: Prisma.clientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientPayload>
          }
          createMany: {
            args: Prisma.clientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.clientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientPayload>
          }
          update: {
            args: Prisma.clientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientPayload>
          }
          deleteMany: {
            args: Prisma.clientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.clientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.clientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientPayload>
          }
          aggregate: {
            args: Prisma.ClientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClient>
          }
          groupBy: {
            args: Prisma.clientGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientGroupByOutputType>[]
          }
          count: {
            args: Prisma.clientCountArgs<ExtArgs>
            result: $Utils.Optional<ClientCountAggregateOutputType> | number
          }
        }
      }
      contactlead: {
        payload: Prisma.$contactleadPayload<ExtArgs>
        fields: Prisma.contactleadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.contactleadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contactleadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.contactleadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contactleadPayload>
          }
          findFirst: {
            args: Prisma.contactleadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contactleadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.contactleadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contactleadPayload>
          }
          findMany: {
            args: Prisma.contactleadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contactleadPayload>[]
          }
          create: {
            args: Prisma.contactleadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contactleadPayload>
          }
          createMany: {
            args: Prisma.contactleadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.contactleadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contactleadPayload>
          }
          update: {
            args: Prisma.contactleadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contactleadPayload>
          }
          deleteMany: {
            args: Prisma.contactleadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.contactleadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.contactleadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$contactleadPayload>
          }
          aggregate: {
            args: Prisma.ContactleadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContactlead>
          }
          groupBy: {
            args: Prisma.contactleadGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactleadGroupByOutputType>[]
          }
          count: {
            args: Prisma.contactleadCountArgs<ExtArgs>
            result: $Utils.Optional<ContactleadCountAggregateOutputType> | number
          }
        }
      }
      coownership: {
        payload: Prisma.$coownershipPayload<ExtArgs>
        fields: Prisma.coownershipFieldRefs
        operations: {
          findUnique: {
            args: Prisma.coownershipFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coownershipPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.coownershipFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coownershipPayload>
          }
          findFirst: {
            args: Prisma.coownershipFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coownershipPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.coownershipFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coownershipPayload>
          }
          findMany: {
            args: Prisma.coownershipFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coownershipPayload>[]
          }
          create: {
            args: Prisma.coownershipCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coownershipPayload>
          }
          createMany: {
            args: Prisma.coownershipCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.coownershipDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coownershipPayload>
          }
          update: {
            args: Prisma.coownershipUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coownershipPayload>
          }
          deleteMany: {
            args: Prisma.coownershipDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.coownershipUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.coownershipUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coownershipPayload>
          }
          aggregate: {
            args: Prisma.CoownershipAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoownership>
          }
          groupBy: {
            args: Prisma.coownershipGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoownershipGroupByOutputType>[]
          }
          count: {
            args: Prisma.coownershipCountArgs<ExtArgs>
            result: $Utils.Optional<CoownershipCountAggregateOutputType> | number
          }
        }
      }
      deal: {
        payload: Prisma.$dealPayload<ExtArgs>
        fields: Prisma.dealFieldRefs
        operations: {
          findUnique: {
            args: Prisma.dealFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dealPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.dealFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dealPayload>
          }
          findFirst: {
            args: Prisma.dealFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dealPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.dealFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dealPayload>
          }
          findMany: {
            args: Prisma.dealFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dealPayload>[]
          }
          create: {
            args: Prisma.dealCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dealPayload>
          }
          createMany: {
            args: Prisma.dealCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.dealDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dealPayload>
          }
          update: {
            args: Prisma.dealUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dealPayload>
          }
          deleteMany: {
            args: Prisma.dealDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.dealUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.dealUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$dealPayload>
          }
          aggregate: {
            args: Prisma.DealAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeal>
          }
          groupBy: {
            args: Prisma.dealGroupByArgs<ExtArgs>
            result: $Utils.Optional<DealGroupByOutputType>[]
          }
          count: {
            args: Prisma.dealCountArgs<ExtArgs>
            result: $Utils.Optional<DealCountAggregateOutputType> | number
          }
        }
      }
      expense: {
        payload: Prisma.$expensePayload<ExtArgs>
        fields: Prisma.expenseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.expenseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.expenseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensePayload>
          }
          findFirst: {
            args: Prisma.expenseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.expenseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensePayload>
          }
          findMany: {
            args: Prisma.expenseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensePayload>[]
          }
          create: {
            args: Prisma.expenseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensePayload>
          }
          createMany: {
            args: Prisma.expenseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.expenseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensePayload>
          }
          update: {
            args: Prisma.expenseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensePayload>
          }
          deleteMany: {
            args: Prisma.expenseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.expenseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.expenseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$expensePayload>
          }
          aggregate: {
            args: Prisma.ExpenseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExpense>
          }
          groupBy: {
            args: Prisma.expenseGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExpenseGroupByOutputType>[]
          }
          count: {
            args: Prisma.expenseCountArgs<ExtArgs>
            result: $Utils.Optional<ExpenseCountAggregateOutputType> | number
          }
        }
      }
      inquiry: {
        payload: Prisma.$inquiryPayload<ExtArgs>
        fields: Prisma.inquiryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.inquiryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inquiryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.inquiryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inquiryPayload>
          }
          findFirst: {
            args: Prisma.inquiryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inquiryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.inquiryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inquiryPayload>
          }
          findMany: {
            args: Prisma.inquiryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inquiryPayload>[]
          }
          create: {
            args: Prisma.inquiryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inquiryPayload>
          }
          createMany: {
            args: Prisma.inquiryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.inquiryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inquiryPayload>
          }
          update: {
            args: Prisma.inquiryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inquiryPayload>
          }
          deleteMany: {
            args: Prisma.inquiryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.inquiryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.inquiryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inquiryPayload>
          }
          aggregate: {
            args: Prisma.InquiryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInquiry>
          }
          groupBy: {
            args: Prisma.inquiryGroupByArgs<ExtArgs>
            result: $Utils.Optional<InquiryGroupByOutputType>[]
          }
          count: {
            args: Prisma.inquiryCountArgs<ExtArgs>
            result: $Utils.Optional<InquiryCountAggregateOutputType> | number
          }
        }
      }
      invoice: {
        payload: Prisma.$invoicePayload<ExtArgs>
        fields: Prisma.invoiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.invoiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$invoicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.invoiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$invoicePayload>
          }
          findFirst: {
            args: Prisma.invoiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$invoicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.invoiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$invoicePayload>
          }
          findMany: {
            args: Prisma.invoiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$invoicePayload>[]
          }
          create: {
            args: Prisma.invoiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$invoicePayload>
          }
          createMany: {
            args: Prisma.invoiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.invoiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$invoicePayload>
          }
          update: {
            args: Prisma.invoiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$invoicePayload>
          }
          deleteMany: {
            args: Prisma.invoiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.invoiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.invoiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$invoicePayload>
          }
          aggregate: {
            args: Prisma.InvoiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvoice>
          }
          groupBy: {
            args: Prisma.invoiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvoiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.invoiceCountArgs<ExtArgs>
            result: $Utils.Optional<InvoiceCountAggregateOutputType> | number
          }
        }
      }
      pagecontent: {
        payload: Prisma.$pagecontentPayload<ExtArgs>
        fields: Prisma.pagecontentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.pagecontentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pagecontentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.pagecontentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pagecontentPayload>
          }
          findFirst: {
            args: Prisma.pagecontentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pagecontentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.pagecontentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pagecontentPayload>
          }
          findMany: {
            args: Prisma.pagecontentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pagecontentPayload>[]
          }
          create: {
            args: Prisma.pagecontentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pagecontentPayload>
          }
          createMany: {
            args: Prisma.pagecontentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.pagecontentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pagecontentPayload>
          }
          update: {
            args: Prisma.pagecontentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pagecontentPayload>
          }
          deleteMany: {
            args: Prisma.pagecontentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.pagecontentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.pagecontentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$pagecontentPayload>
          }
          aggregate: {
            args: Prisma.PagecontentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePagecontent>
          }
          groupBy: {
            args: Prisma.pagecontentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PagecontentGroupByOutputType>[]
          }
          count: {
            args: Prisma.pagecontentCountArgs<ExtArgs>
            result: $Utils.Optional<PagecontentCountAggregateOutputType> | number
          }
        }
      }
      payment: {
        payload: Prisma.$paymentPayload<ExtArgs>
        fields: Prisma.paymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.paymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.paymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          findFirst: {
            args: Prisma.paymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.paymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          findMany: {
            args: Prisma.paymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>[]
          }
          create: {
            args: Prisma.paymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          createMany: {
            args: Prisma.paymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.paymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          update: {
            args: Prisma.paymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          deleteMany: {
            args: Prisma.paymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.paymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.paymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.paymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.paymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      paymentschedule: {
        payload: Prisma.$paymentschedulePayload<ExtArgs>
        fields: Prisma.paymentscheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.paymentscheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentschedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.paymentscheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentschedulePayload>
          }
          findFirst: {
            args: Prisma.paymentscheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentschedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.paymentscheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentschedulePayload>
          }
          findMany: {
            args: Prisma.paymentscheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentschedulePayload>[]
          }
          create: {
            args: Prisma.paymentscheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentschedulePayload>
          }
          createMany: {
            args: Prisma.paymentscheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.paymentscheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentschedulePayload>
          }
          update: {
            args: Prisma.paymentscheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentschedulePayload>
          }
          deleteMany: {
            args: Prisma.paymentscheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.paymentscheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.paymentscheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentschedulePayload>
          }
          aggregate: {
            args: Prisma.PaymentscheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentschedule>
          }
          groupBy: {
            args: Prisma.paymentscheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentscheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.paymentscheduleCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentscheduleCountAggregateOutputType> | number
          }
        }
      }
      project: {
        payload: Prisma.$projectPayload<ExtArgs>
        fields: Prisma.projectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.projectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.projectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectPayload>
          }
          findFirst: {
            args: Prisma.projectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.projectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectPayload>
          }
          findMany: {
            args: Prisma.projectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectPayload>[]
          }
          create: {
            args: Prisma.projectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectPayload>
          }
          createMany: {
            args: Prisma.projectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.projectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectPayload>
          }
          update: {
            args: Prisma.projectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectPayload>
          }
          deleteMany: {
            args: Prisma.projectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.projectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.projectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.projectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.projectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      projectmedia: {
        payload: Prisma.$projectmediaPayload<ExtArgs>
        fields: Prisma.projectmediaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.projectmediaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectmediaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.projectmediaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectmediaPayload>
          }
          findFirst: {
            args: Prisma.projectmediaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectmediaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.projectmediaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectmediaPayload>
          }
          findMany: {
            args: Prisma.projectmediaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectmediaPayload>[]
          }
          create: {
            args: Prisma.projectmediaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectmediaPayload>
          }
          createMany: {
            args: Prisma.projectmediaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.projectmediaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectmediaPayload>
          }
          update: {
            args: Prisma.projectmediaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectmediaPayload>
          }
          deleteMany: {
            args: Prisma.projectmediaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.projectmediaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.projectmediaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$projectmediaPayload>
          }
          aggregate: {
            args: Prisma.ProjectmediaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectmedia>
          }
          groupBy: {
            args: Prisma.projectmediaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectmediaGroupByOutputType>[]
          }
          count: {
            args: Prisma.projectmediaCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectmediaCountAggregateOutputType> | number
          }
        }
      }
      property: {
        payload: Prisma.$propertyPayload<ExtArgs>
        fields: Prisma.propertyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.propertyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propertyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.propertyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propertyPayload>
          }
          findFirst: {
            args: Prisma.propertyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propertyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.propertyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propertyPayload>
          }
          findMany: {
            args: Prisma.propertyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propertyPayload>[]
          }
          create: {
            args: Prisma.propertyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propertyPayload>
          }
          createMany: {
            args: Prisma.propertyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.propertyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propertyPayload>
          }
          update: {
            args: Prisma.propertyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propertyPayload>
          }
          deleteMany: {
            args: Prisma.propertyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.propertyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.propertyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propertyPayload>
          }
          aggregate: {
            args: Prisma.PropertyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProperty>
          }
          groupBy: {
            args: Prisma.propertyGroupByArgs<ExtArgs>
            result: $Utils.Optional<PropertyGroupByOutputType>[]
          }
          count: {
            args: Prisma.propertyCountArgs<ExtArgs>
            result: $Utils.Optional<PropertyCountAggregateOutputType> | number
          }
        }
      }
      propertyimage: {
        payload: Prisma.$propertyimagePayload<ExtArgs>
        fields: Prisma.propertyimageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.propertyimageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propertyimagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.propertyimageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propertyimagePayload>
          }
          findFirst: {
            args: Prisma.propertyimageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propertyimagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.propertyimageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propertyimagePayload>
          }
          findMany: {
            args: Prisma.propertyimageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propertyimagePayload>[]
          }
          create: {
            args: Prisma.propertyimageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propertyimagePayload>
          }
          createMany: {
            args: Prisma.propertyimageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.propertyimageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propertyimagePayload>
          }
          update: {
            args: Prisma.propertyimageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propertyimagePayload>
          }
          deleteMany: {
            args: Prisma.propertyimageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.propertyimageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.propertyimageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$propertyimagePayload>
          }
          aggregate: {
            args: Prisma.PropertyimageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePropertyimage>
          }
          groupBy: {
            args: Prisma.propertyimageGroupByArgs<ExtArgs>
            result: $Utils.Optional<PropertyimageGroupByOutputType>[]
          }
          count: {
            args: Prisma.propertyimageCountArgs<ExtArgs>
            result: $Utils.Optional<PropertyimageCountAggregateOutputType> | number
          }
        }
      }
      service: {
        payload: Prisma.$servicePayload<ExtArgs>
        fields: Prisma.serviceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.serviceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.serviceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload>
          }
          findFirst: {
            args: Prisma.serviceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.serviceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload>
          }
          findMany: {
            args: Prisma.serviceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload>[]
          }
          create: {
            args: Prisma.serviceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload>
          }
          createMany: {
            args: Prisma.serviceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.serviceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload>
          }
          update: {
            args: Prisma.serviceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload>
          }
          deleteMany: {
            args: Prisma.serviceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.serviceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.serviceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$servicePayload>
          }
          aggregate: {
            args: Prisma.ServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateService>
          }
          groupBy: {
            args: Prisma.serviceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.serviceCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceCountAggregateOutputType> | number
          }
        }
      }
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      companyinfo: {
        payload: Prisma.$companyinfoPayload<ExtArgs>
        fields: Prisma.companyinfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.companyinfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyinfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.companyinfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyinfoPayload>
          }
          findFirst: {
            args: Prisma.companyinfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyinfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.companyinfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyinfoPayload>
          }
          findMany: {
            args: Prisma.companyinfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyinfoPayload>[]
          }
          create: {
            args: Prisma.companyinfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyinfoPayload>
          }
          createMany: {
            args: Prisma.companyinfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.companyinfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyinfoPayload>
          }
          update: {
            args: Prisma.companyinfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyinfoPayload>
          }
          deleteMany: {
            args: Prisma.companyinfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.companyinfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.companyinfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companyinfoPayload>
          }
          aggregate: {
            args: Prisma.CompanyinfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompanyinfo>
          }
          groupBy: {
            args: Prisma.companyinfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyinfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.companyinfoCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyinfoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    auditlog?: auditlogOmit
    client?: clientOmit
    contactlead?: contactleadOmit
    coownership?: coownershipOmit
    deal?: dealOmit
    expense?: expenseOmit
    inquiry?: inquiryOmit
    invoice?: invoiceOmit
    pagecontent?: pagecontentOmit
    payment?: paymentOmit
    paymentschedule?: paymentscheduleOmit
    project?: projectOmit
    projectmedia?: projectmediaOmit
    property?: propertyOmit
    propertyimage?: propertyimageOmit
    service?: serviceOmit
    user?: userOmit
    companyinfo?: companyinfoOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ClientCountOutputType
   */

  export type ClientCountOutputType = {
    deals: number
    coOwnerships: number
  }

  export type ClientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    deals?: boolean | ClientCountOutputTypeCountDealsArgs
    coOwnerships?: boolean | ClientCountOutputTypeCountCoOwnershipsArgs
  }

  // Custom InputTypes
  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientCountOutputType
     */
    select?: ClientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountDealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: dealWhereInput
  }

  /**
   * ClientCountOutputType without action
   */
  export type ClientCountOutputTypeCountCoOwnershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: coownershipWhereInput
  }


  /**
   * Count Type DealCountOutputType
   */

  export type DealCountOutputType = {
    invoices: number
    payments: number
    schedules: number
    expenses: number
  }

  export type DealCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    invoices?: boolean | DealCountOutputTypeCountInvoicesArgs
    payments?: boolean | DealCountOutputTypeCountPaymentsArgs
    schedules?: boolean | DealCountOutputTypeCountSchedulesArgs
    expenses?: boolean | DealCountOutputTypeCountExpensesArgs
  }

  // Custom InputTypes
  /**
   * DealCountOutputType without action
   */
  export type DealCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DealCountOutputType
     */
    select?: DealCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DealCountOutputType without action
   */
  export type DealCountOutputTypeCountInvoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: invoiceWhereInput
  }

  /**
   * DealCountOutputType without action
   */
  export type DealCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paymentWhereInput
  }

  /**
   * DealCountOutputType without action
   */
  export type DealCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paymentscheduleWhereInput
  }

  /**
   * DealCountOutputType without action
   */
  export type DealCountOutputTypeCountExpensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: expenseWhereInput
  }


  /**
   * Count Type InvoiceCountOutputType
   */

  export type InvoiceCountOutputType = {
    payments: number
  }

  export type InvoiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | InvoiceCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvoiceCountOutputType
     */
    select?: InvoiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InvoiceCountOutputType without action
   */
  export type InvoiceCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paymentWhereInput
  }


  /**
   * Count Type PaymentCountOutputType
   */

  export type PaymentCountOutputType = {
    schedules: number
  }

  export type PaymentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedules?: boolean | PaymentCountOutputTypeCountSchedulesArgs
  }

  // Custom InputTypes
  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentCountOutputType
     */
    select?: PaymentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paymentscheduleWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    medias: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medias?: boolean | ProjectCountOutputTypeCountMediasArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountMediasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: projectmediaWhereInput
  }


  /**
   * Count Type PropertyCountOutputType
   */

  export type PropertyCountOutputType = {
    images: number
    deals: number
    expenses: number
    inquiries: number
    contactLeads: number
    coOwnerships: number
  }

  export type PropertyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | PropertyCountOutputTypeCountImagesArgs
    deals?: boolean | PropertyCountOutputTypeCountDealsArgs
    expenses?: boolean | PropertyCountOutputTypeCountExpensesArgs
    inquiries?: boolean | PropertyCountOutputTypeCountInquiriesArgs
    contactLeads?: boolean | PropertyCountOutputTypeCountContactLeadsArgs
    coOwnerships?: boolean | PropertyCountOutputTypeCountCoOwnershipsArgs
  }

  // Custom InputTypes
  /**
   * PropertyCountOutputType without action
   */
  export type PropertyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyCountOutputType
     */
    select?: PropertyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PropertyCountOutputType without action
   */
  export type PropertyCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: propertyimageWhereInput
  }

  /**
   * PropertyCountOutputType without action
   */
  export type PropertyCountOutputTypeCountDealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: dealWhereInput
  }

  /**
   * PropertyCountOutputType without action
   */
  export type PropertyCountOutputTypeCountExpensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: expenseWhereInput
  }

  /**
   * PropertyCountOutputType without action
   */
  export type PropertyCountOutputTypeCountInquiriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: inquiryWhereInput
  }

  /**
   * PropertyCountOutputType without action
   */
  export type PropertyCountOutputTypeCountContactLeadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contactleadWhereInput
  }

  /**
   * PropertyCountOutputType without action
   */
  export type PropertyCountOutputTypeCountCoOwnershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: coownershipWhereInput
  }


  /**
   * Models
   */

  /**
   * Model auditlog
   */

  export type AggregateAuditlog = {
    _count: AuditlogCountAggregateOutputType | null
    _avg: AuditlogAvgAggregateOutputType | null
    _sum: AuditlogSumAggregateOutputType | null
    _min: AuditlogMinAggregateOutputType | null
    _max: AuditlogMaxAggregateOutputType | null
  }

  export type AuditlogAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    entityId: number | null
  }

  export type AuditlogSumAggregateOutputType = {
    id: number | null
    userId: number | null
    entityId: number | null
  }

  export type AuditlogMinAggregateOutputType = {
    id: number | null
    userId: number | null
    action: string | null
    entity: string | null
    entityId: number | null
    createdAt: Date | null
  }

  export type AuditlogMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    action: string | null
    entity: string | null
    entityId: number | null
    createdAt: Date | null
  }

  export type AuditlogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    entity: number
    entityId: number
    before: number
    after: number
    createdAt: number
    _all: number
  }


  export type AuditlogAvgAggregateInputType = {
    id?: true
    userId?: true
    entityId?: true
  }

  export type AuditlogSumAggregateInputType = {
    id?: true
    userId?: true
    entityId?: true
  }

  export type AuditlogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    createdAt?: true
  }

  export type AuditlogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    createdAt?: true
  }

  export type AuditlogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    before?: true
    after?: true
    createdAt?: true
    _all?: true
  }

  export type AuditlogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which auditlog to aggregate.
     */
    where?: auditlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of auditlogs to fetch.
     */
    orderBy?: auditlogOrderByWithRelationInput | auditlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: auditlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` auditlogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` auditlogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned auditlogs
    **/
    _count?: true | AuditlogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuditlogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuditlogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditlogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditlogMaxAggregateInputType
  }

  export type GetAuditlogAggregateType<T extends AuditlogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditlog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditlog[P]>
      : GetScalarType<T[P], AggregateAuditlog[P]>
  }




  export type auditlogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: auditlogWhereInput
    orderBy?: auditlogOrderByWithAggregationInput | auditlogOrderByWithAggregationInput[]
    by: AuditlogScalarFieldEnum[] | AuditlogScalarFieldEnum
    having?: auditlogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditlogCountAggregateInputType | true
    _avg?: AuditlogAvgAggregateInputType
    _sum?: AuditlogSumAggregateInputType
    _min?: AuditlogMinAggregateInputType
    _max?: AuditlogMaxAggregateInputType
  }

  export type AuditlogGroupByOutputType = {
    id: number
    userId: number | null
    action: string
    entity: string
    entityId: number | null
    before: JsonValue | null
    after: JsonValue | null
    createdAt: Date
    _count: AuditlogCountAggregateOutputType | null
    _avg: AuditlogAvgAggregateOutputType | null
    _sum: AuditlogSumAggregateOutputType | null
    _min: AuditlogMinAggregateOutputType | null
    _max: AuditlogMaxAggregateOutputType | null
  }

  type GetAuditlogGroupByPayload<T extends auditlogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditlogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditlogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditlogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditlogGroupByOutputType[P]>
        }
      >
    >


  export type auditlogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    before?: boolean
    after?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["auditlog"]>



  export type auditlogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    before?: boolean
    after?: boolean
    createdAt?: boolean
  }

  export type auditlogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "entity" | "entityId" | "before" | "after" | "createdAt", ExtArgs["result"]["auditlog"]>

  export type $auditlogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "auditlog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number | null
      action: string
      entity: string
      entityId: number | null
      before: Prisma.JsonValue | null
      after: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["auditlog"]>
    composites: {}
  }

  type auditlogGetPayload<S extends boolean | null | undefined | auditlogDefaultArgs> = $Result.GetResult<Prisma.$auditlogPayload, S>

  type auditlogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<auditlogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditlogCountAggregateInputType | true
    }

  export interface auditlogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['auditlog'], meta: { name: 'auditlog' } }
    /**
     * Find zero or one Auditlog that matches the filter.
     * @param {auditlogFindUniqueArgs} args - Arguments to find a Auditlog
     * @example
     * // Get one Auditlog
     * const auditlog = await prisma.auditlog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends auditlogFindUniqueArgs>(args: SelectSubset<T, auditlogFindUniqueArgs<ExtArgs>>): Prisma__auditlogClient<$Result.GetResult<Prisma.$auditlogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Auditlog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {auditlogFindUniqueOrThrowArgs} args - Arguments to find a Auditlog
     * @example
     * // Get one Auditlog
     * const auditlog = await prisma.auditlog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends auditlogFindUniqueOrThrowArgs>(args: SelectSubset<T, auditlogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__auditlogClient<$Result.GetResult<Prisma.$auditlogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Auditlog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {auditlogFindFirstArgs} args - Arguments to find a Auditlog
     * @example
     * // Get one Auditlog
     * const auditlog = await prisma.auditlog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends auditlogFindFirstArgs>(args?: SelectSubset<T, auditlogFindFirstArgs<ExtArgs>>): Prisma__auditlogClient<$Result.GetResult<Prisma.$auditlogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Auditlog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {auditlogFindFirstOrThrowArgs} args - Arguments to find a Auditlog
     * @example
     * // Get one Auditlog
     * const auditlog = await prisma.auditlog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends auditlogFindFirstOrThrowArgs>(args?: SelectSubset<T, auditlogFindFirstOrThrowArgs<ExtArgs>>): Prisma__auditlogClient<$Result.GetResult<Prisma.$auditlogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Auditlogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {auditlogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Auditlogs
     * const auditlogs = await prisma.auditlog.findMany()
     * 
     * // Get first 10 Auditlogs
     * const auditlogs = await prisma.auditlog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditlogWithIdOnly = await prisma.auditlog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends auditlogFindManyArgs>(args?: SelectSubset<T, auditlogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$auditlogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Auditlog.
     * @param {auditlogCreateArgs} args - Arguments to create a Auditlog.
     * @example
     * // Create one Auditlog
     * const Auditlog = await prisma.auditlog.create({
     *   data: {
     *     // ... data to create a Auditlog
     *   }
     * })
     * 
     */
    create<T extends auditlogCreateArgs>(args: SelectSubset<T, auditlogCreateArgs<ExtArgs>>): Prisma__auditlogClient<$Result.GetResult<Prisma.$auditlogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Auditlogs.
     * @param {auditlogCreateManyArgs} args - Arguments to create many Auditlogs.
     * @example
     * // Create many Auditlogs
     * const auditlog = await prisma.auditlog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends auditlogCreateManyArgs>(args?: SelectSubset<T, auditlogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Auditlog.
     * @param {auditlogDeleteArgs} args - Arguments to delete one Auditlog.
     * @example
     * // Delete one Auditlog
     * const Auditlog = await prisma.auditlog.delete({
     *   where: {
     *     // ... filter to delete one Auditlog
     *   }
     * })
     * 
     */
    delete<T extends auditlogDeleteArgs>(args: SelectSubset<T, auditlogDeleteArgs<ExtArgs>>): Prisma__auditlogClient<$Result.GetResult<Prisma.$auditlogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Auditlog.
     * @param {auditlogUpdateArgs} args - Arguments to update one Auditlog.
     * @example
     * // Update one Auditlog
     * const auditlog = await prisma.auditlog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends auditlogUpdateArgs>(args: SelectSubset<T, auditlogUpdateArgs<ExtArgs>>): Prisma__auditlogClient<$Result.GetResult<Prisma.$auditlogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Auditlogs.
     * @param {auditlogDeleteManyArgs} args - Arguments to filter Auditlogs to delete.
     * @example
     * // Delete a few Auditlogs
     * const { count } = await prisma.auditlog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends auditlogDeleteManyArgs>(args?: SelectSubset<T, auditlogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Auditlogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {auditlogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Auditlogs
     * const auditlog = await prisma.auditlog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends auditlogUpdateManyArgs>(args: SelectSubset<T, auditlogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Auditlog.
     * @param {auditlogUpsertArgs} args - Arguments to update or create a Auditlog.
     * @example
     * // Update or create a Auditlog
     * const auditlog = await prisma.auditlog.upsert({
     *   create: {
     *     // ... data to create a Auditlog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Auditlog we want to update
     *   }
     * })
     */
    upsert<T extends auditlogUpsertArgs>(args: SelectSubset<T, auditlogUpsertArgs<ExtArgs>>): Prisma__auditlogClient<$Result.GetResult<Prisma.$auditlogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Auditlogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {auditlogCountArgs} args - Arguments to filter Auditlogs to count.
     * @example
     * // Count the number of Auditlogs
     * const count = await prisma.auditlog.count({
     *   where: {
     *     // ... the filter for the Auditlogs we want to count
     *   }
     * })
    **/
    count<T extends auditlogCountArgs>(
      args?: Subset<T, auditlogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditlogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Auditlog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditlogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditlogAggregateArgs>(args: Subset<T, AuditlogAggregateArgs>): Prisma.PrismaPromise<GetAuditlogAggregateType<T>>

    /**
     * Group by Auditlog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {auditlogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends auditlogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: auditlogGroupByArgs['orderBy'] }
        : { orderBy?: auditlogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, auditlogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditlogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the auditlog model
   */
  readonly fields: auditlogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for auditlog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__auditlogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the auditlog model
   */
  interface auditlogFieldRefs {
    readonly id: FieldRef<"auditlog", 'Int'>
    readonly userId: FieldRef<"auditlog", 'Int'>
    readonly action: FieldRef<"auditlog", 'String'>
    readonly entity: FieldRef<"auditlog", 'String'>
    readonly entityId: FieldRef<"auditlog", 'Int'>
    readonly before: FieldRef<"auditlog", 'Json'>
    readonly after: FieldRef<"auditlog", 'Json'>
    readonly createdAt: FieldRef<"auditlog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * auditlog findUnique
   */
  export type auditlogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auditlog
     */
    select?: auditlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auditlog
     */
    omit?: auditlogOmit<ExtArgs> | null
    /**
     * Filter, which auditlog to fetch.
     */
    where: auditlogWhereUniqueInput
  }

  /**
   * auditlog findUniqueOrThrow
   */
  export type auditlogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auditlog
     */
    select?: auditlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auditlog
     */
    omit?: auditlogOmit<ExtArgs> | null
    /**
     * Filter, which auditlog to fetch.
     */
    where: auditlogWhereUniqueInput
  }

  /**
   * auditlog findFirst
   */
  export type auditlogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auditlog
     */
    select?: auditlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auditlog
     */
    omit?: auditlogOmit<ExtArgs> | null
    /**
     * Filter, which auditlog to fetch.
     */
    where?: auditlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of auditlogs to fetch.
     */
    orderBy?: auditlogOrderByWithRelationInput | auditlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for auditlogs.
     */
    cursor?: auditlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` auditlogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` auditlogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of auditlogs.
     */
    distinct?: AuditlogScalarFieldEnum | AuditlogScalarFieldEnum[]
  }

  /**
   * auditlog findFirstOrThrow
   */
  export type auditlogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auditlog
     */
    select?: auditlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auditlog
     */
    omit?: auditlogOmit<ExtArgs> | null
    /**
     * Filter, which auditlog to fetch.
     */
    where?: auditlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of auditlogs to fetch.
     */
    orderBy?: auditlogOrderByWithRelationInput | auditlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for auditlogs.
     */
    cursor?: auditlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` auditlogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` auditlogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of auditlogs.
     */
    distinct?: AuditlogScalarFieldEnum | AuditlogScalarFieldEnum[]
  }

  /**
   * auditlog findMany
   */
  export type auditlogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auditlog
     */
    select?: auditlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auditlog
     */
    omit?: auditlogOmit<ExtArgs> | null
    /**
     * Filter, which auditlogs to fetch.
     */
    where?: auditlogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of auditlogs to fetch.
     */
    orderBy?: auditlogOrderByWithRelationInput | auditlogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing auditlogs.
     */
    cursor?: auditlogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` auditlogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` auditlogs.
     */
    skip?: number
    distinct?: AuditlogScalarFieldEnum | AuditlogScalarFieldEnum[]
  }

  /**
   * auditlog create
   */
  export type auditlogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auditlog
     */
    select?: auditlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auditlog
     */
    omit?: auditlogOmit<ExtArgs> | null
    /**
     * The data needed to create a auditlog.
     */
    data: XOR<auditlogCreateInput, auditlogUncheckedCreateInput>
  }

  /**
   * auditlog createMany
   */
  export type auditlogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many auditlogs.
     */
    data: auditlogCreateManyInput | auditlogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * auditlog update
   */
  export type auditlogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auditlog
     */
    select?: auditlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auditlog
     */
    omit?: auditlogOmit<ExtArgs> | null
    /**
     * The data needed to update a auditlog.
     */
    data: XOR<auditlogUpdateInput, auditlogUncheckedUpdateInput>
    /**
     * Choose, which auditlog to update.
     */
    where: auditlogWhereUniqueInput
  }

  /**
   * auditlog updateMany
   */
  export type auditlogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update auditlogs.
     */
    data: XOR<auditlogUpdateManyMutationInput, auditlogUncheckedUpdateManyInput>
    /**
     * Filter which auditlogs to update
     */
    where?: auditlogWhereInput
    /**
     * Limit how many auditlogs to update.
     */
    limit?: number
  }

  /**
   * auditlog upsert
   */
  export type auditlogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auditlog
     */
    select?: auditlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auditlog
     */
    omit?: auditlogOmit<ExtArgs> | null
    /**
     * The filter to search for the auditlog to update in case it exists.
     */
    where: auditlogWhereUniqueInput
    /**
     * In case the auditlog found by the `where` argument doesn't exist, create a new auditlog with this data.
     */
    create: XOR<auditlogCreateInput, auditlogUncheckedCreateInput>
    /**
     * In case the auditlog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<auditlogUpdateInput, auditlogUncheckedUpdateInput>
  }

  /**
   * auditlog delete
   */
  export type auditlogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auditlog
     */
    select?: auditlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auditlog
     */
    omit?: auditlogOmit<ExtArgs> | null
    /**
     * Filter which auditlog to delete.
     */
    where: auditlogWhereUniqueInput
  }

  /**
   * auditlog deleteMany
   */
  export type auditlogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which auditlogs to delete
     */
    where?: auditlogWhereInput
    /**
     * Limit how many auditlogs to delete.
     */
    limit?: number
  }

  /**
   * auditlog without action
   */
  export type auditlogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auditlog
     */
    select?: auditlogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auditlog
     */
    omit?: auditlogOmit<ExtArgs> | null
  }


  /**
   * Model client
   */

  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientAvgAggregateOutputType = {
    id: number | null
  }

  export type ClientSumAggregateOutputType = {
    id: number | null
  }

  export type ClientMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    address: string | null
    idNumber: string | null
    notes: string | null
  }

  export type ClientMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    address: string | null
    idNumber: string | null
    notes: string | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    address: number
    idNumber: number
    notes: number
    _all: number
  }


  export type ClientAvgAggregateInputType = {
    id?: true
  }

  export type ClientSumAggregateInputType = {
    id?: true
  }

  export type ClientMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    idNumber?: true
    notes?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    idNumber?: true
    notes?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    address?: true
    idNumber?: true
    notes?: true
    _all?: true
  }

  export type ClientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which client to aggregate.
     */
    where?: clientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientOrderByWithRelationInput | clientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type clientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: clientWhereInput
    orderBy?: clientOrderByWithAggregationInput | clientOrderByWithAggregationInput[]
    by: ClientScalarFieldEnum[] | ClientScalarFieldEnum
    having?: clientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _avg?: ClientAvgAggregateInputType
    _sum?: ClientSumAggregateInputType
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }

  export type ClientGroupByOutputType = {
    id: number
    name: string
    email: string | null
    phone: string | null
    address: string | null
    idNumber: string | null
    notes: string | null
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends clientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type clientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    idNumber?: boolean
    notes?: boolean
    deals?: boolean | client$dealsArgs<ExtArgs>
    coOwnerships?: boolean | client$coOwnershipsArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["client"]>



  export type clientSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    idNumber?: boolean
    notes?: boolean
  }

  export type clientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "address" | "idNumber" | "notes", ExtArgs["result"]["client"]>
  export type clientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    deals?: boolean | client$dealsArgs<ExtArgs>
    coOwnerships?: boolean | client$coOwnershipsArgs<ExtArgs>
    _count?: boolean | ClientCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $clientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "client"
    objects: {
      deals: Prisma.$dealPayload<ExtArgs>[]
      coOwnerships: Prisma.$coownershipPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string | null
      phone: string | null
      address: string | null
      idNumber: string | null
      notes: string | null
    }, ExtArgs["result"]["client"]>
    composites: {}
  }

  type clientGetPayload<S extends boolean | null | undefined | clientDefaultArgs> = $Result.GetResult<Prisma.$clientPayload, S>

  type clientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<clientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClientCountAggregateInputType | true
    }

  export interface clientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['client'], meta: { name: 'client' } }
    /**
     * Find zero or one Client that matches the filter.
     * @param {clientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends clientFindUniqueArgs>(args: SelectSubset<T, clientFindUniqueArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Client that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {clientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends clientFindUniqueOrThrowArgs>(args: SelectSubset<T, clientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends clientFindFirstArgs>(args?: SelectSubset<T, clientFindFirstArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Client that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends clientFindFirstOrThrowArgs>(args?: SelectSubset<T, clientFindFirstOrThrowArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends clientFindManyArgs>(args?: SelectSubset<T, clientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Client.
     * @param {clientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
     */
    create<T extends clientCreateArgs>(args: SelectSubset<T, clientCreateArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clients.
     * @param {clientCreateManyArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const client = await prisma.client.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends clientCreateManyArgs>(args?: SelectSubset<T, clientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Client.
     * @param {clientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
     */
    delete<T extends clientDeleteArgs>(args: SelectSubset<T, clientDeleteArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Client.
     * @param {clientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends clientUpdateArgs>(args: SelectSubset<T, clientUpdateArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clients.
     * @param {clientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends clientDeleteManyArgs>(args?: SelectSubset<T, clientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends clientUpdateManyArgs>(args: SelectSubset<T, clientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Client.
     * @param {clientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
     */
    upsert<T extends clientUpsertArgs>(args: SelectSubset<T, clientUpsertArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends clientCountArgs>(
      args?: Subset<T, clientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): Prisma.PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends clientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: clientGroupByArgs['orderBy'] }
        : { orderBy?: clientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, clientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the client model
   */
  readonly fields: clientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__clientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    deals<T extends client$dealsArgs<ExtArgs> = {}>(args?: Subset<T, client$dealsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$dealPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    coOwnerships<T extends client$coOwnershipsArgs<ExtArgs> = {}>(args?: Subset<T, client$coOwnershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coownershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the client model
   */
  interface clientFieldRefs {
    readonly id: FieldRef<"client", 'Int'>
    readonly name: FieldRef<"client", 'String'>
    readonly email: FieldRef<"client", 'String'>
    readonly phone: FieldRef<"client", 'String'>
    readonly address: FieldRef<"client", 'String'>
    readonly idNumber: FieldRef<"client", 'String'>
    readonly notes: FieldRef<"client", 'String'>
  }
    

  // Custom InputTypes
  /**
   * client findUnique
   */
  export type clientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * Filter, which client to fetch.
     */
    where: clientWhereUniqueInput
  }

  /**
   * client findUniqueOrThrow
   */
  export type clientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * Filter, which client to fetch.
     */
    where: clientWhereUniqueInput
  }

  /**
   * client findFirst
   */
  export type clientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * Filter, which client to fetch.
     */
    where?: clientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientOrderByWithRelationInput | clientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clients.
     */
    cursor?: clientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * client findFirstOrThrow
   */
  export type clientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * Filter, which client to fetch.
     */
    where?: clientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientOrderByWithRelationInput | clientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clients.
     */
    cursor?: clientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clients.
     */
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * client findMany
   */
  export type clientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * Filter, which clients to fetch.
     */
    where?: clientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientOrderByWithRelationInput | clientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clients.
     */
    cursor?: clientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    distinct?: ClientScalarFieldEnum | ClientScalarFieldEnum[]
  }

  /**
   * client create
   */
  export type clientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * The data needed to create a client.
     */
    data: XOR<clientCreateInput, clientUncheckedCreateInput>
  }

  /**
   * client createMany
   */
  export type clientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many clients.
     */
    data: clientCreateManyInput | clientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * client update
   */
  export type clientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * The data needed to update a client.
     */
    data: XOR<clientUpdateInput, clientUncheckedUpdateInput>
    /**
     * Choose, which client to update.
     */
    where: clientWhereUniqueInput
  }

  /**
   * client updateMany
   */
  export type clientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update clients.
     */
    data: XOR<clientUpdateManyMutationInput, clientUncheckedUpdateManyInput>
    /**
     * Filter which clients to update
     */
    where?: clientWhereInput
    /**
     * Limit how many clients to update.
     */
    limit?: number
  }

  /**
   * client upsert
   */
  export type clientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * The filter to search for the client to update in case it exists.
     */
    where: clientWhereUniqueInput
    /**
     * In case the client found by the `where` argument doesn't exist, create a new client with this data.
     */
    create: XOR<clientCreateInput, clientUncheckedCreateInput>
    /**
     * In case the client was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clientUpdateInput, clientUncheckedUpdateInput>
  }

  /**
   * client delete
   */
  export type clientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
    /**
     * Filter which client to delete.
     */
    where: clientWhereUniqueInput
  }

  /**
   * client deleteMany
   */
  export type clientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clients to delete
     */
    where?: clientWhereInput
    /**
     * Limit how many clients to delete.
     */
    limit?: number
  }

  /**
   * client.deals
   */
  export type client$dealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deal
     */
    select?: dealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deal
     */
    omit?: dealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dealInclude<ExtArgs> | null
    where?: dealWhereInput
    orderBy?: dealOrderByWithRelationInput | dealOrderByWithRelationInput[]
    cursor?: dealWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DealScalarFieldEnum | DealScalarFieldEnum[]
  }

  /**
   * client.coOwnerships
   */
  export type client$coOwnershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coownership
     */
    select?: coownershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coownership
     */
    omit?: coownershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coownershipInclude<ExtArgs> | null
    where?: coownershipWhereInput
    orderBy?: coownershipOrderByWithRelationInput | coownershipOrderByWithRelationInput[]
    cursor?: coownershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoownershipScalarFieldEnum | CoownershipScalarFieldEnum[]
  }

  /**
   * client without action
   */
  export type clientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the client
     */
    select?: clientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the client
     */
    omit?: clientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientInclude<ExtArgs> | null
  }


  /**
   * Model contactlead
   */

  export type AggregateContactlead = {
    _count: ContactleadCountAggregateOutputType | null
    _avg: ContactleadAvgAggregateOutputType | null
    _sum: ContactleadSumAggregateOutputType | null
    _min: ContactleadMinAggregateOutputType | null
    _max: ContactleadMaxAggregateOutputType | null
  }

  export type ContactleadAvgAggregateOutputType = {
    id: number | null
    propertyId: number | null
  }

  export type ContactleadSumAggregateOutputType = {
    id: number | null
    propertyId: number | null
  }

  export type ContactleadMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    message: string | null
    source: string | null
    createdAt: Date | null
    propertyId: number | null
  }

  export type ContactleadMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: string | null
    message: string | null
    source: string | null
    createdAt: Date | null
    propertyId: number | null
  }

  export type ContactleadCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    message: number
    source: number
    createdAt: number
    propertyId: number
    _all: number
  }


  export type ContactleadAvgAggregateInputType = {
    id?: true
    propertyId?: true
  }

  export type ContactleadSumAggregateInputType = {
    id?: true
    propertyId?: true
  }

  export type ContactleadMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    message?: true
    source?: true
    createdAt?: true
    propertyId?: true
  }

  export type ContactleadMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    message?: true
    source?: true
    createdAt?: true
    propertyId?: true
  }

  export type ContactleadCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    message?: true
    source?: true
    createdAt?: true
    propertyId?: true
    _all?: true
  }

  export type ContactleadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which contactlead to aggregate.
     */
    where?: contactleadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contactleads to fetch.
     */
    orderBy?: contactleadOrderByWithRelationInput | contactleadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: contactleadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contactleads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contactleads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned contactleads
    **/
    _count?: true | ContactleadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactleadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactleadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactleadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactleadMaxAggregateInputType
  }

  export type GetContactleadAggregateType<T extends ContactleadAggregateArgs> = {
        [P in keyof T & keyof AggregateContactlead]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContactlead[P]>
      : GetScalarType<T[P], AggregateContactlead[P]>
  }




  export type contactleadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: contactleadWhereInput
    orderBy?: contactleadOrderByWithAggregationInput | contactleadOrderByWithAggregationInput[]
    by: ContactleadScalarFieldEnum[] | ContactleadScalarFieldEnum
    having?: contactleadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactleadCountAggregateInputType | true
    _avg?: ContactleadAvgAggregateInputType
    _sum?: ContactleadSumAggregateInputType
    _min?: ContactleadMinAggregateInputType
    _max?: ContactleadMaxAggregateInputType
  }

  export type ContactleadGroupByOutputType = {
    id: number
    name: string
    email: string | null
    phone: string | null
    message: string
    source: string
    createdAt: Date
    propertyId: number | null
    _count: ContactleadCountAggregateOutputType | null
    _avg: ContactleadAvgAggregateOutputType | null
    _sum: ContactleadSumAggregateOutputType | null
    _min: ContactleadMinAggregateOutputType | null
    _max: ContactleadMaxAggregateOutputType | null
  }

  type GetContactleadGroupByPayload<T extends contactleadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactleadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactleadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactleadGroupByOutputType[P]>
            : GetScalarType<T[P], ContactleadGroupByOutputType[P]>
        }
      >
    >


  export type contactleadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    message?: boolean
    source?: boolean
    createdAt?: boolean
    propertyId?: boolean
    property?: boolean | contactlead$propertyArgs<ExtArgs>
  }, ExtArgs["result"]["contactlead"]>



  export type contactleadSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    message?: boolean
    source?: boolean
    createdAt?: boolean
    propertyId?: boolean
  }

  export type contactleadOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "message" | "source" | "createdAt" | "propertyId", ExtArgs["result"]["contactlead"]>
  export type contactleadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    property?: boolean | contactlead$propertyArgs<ExtArgs>
  }

  export type $contactleadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "contactlead"
    objects: {
      property: Prisma.$propertyPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string | null
      phone: string | null
      message: string
      source: string
      createdAt: Date
      propertyId: number | null
    }, ExtArgs["result"]["contactlead"]>
    composites: {}
  }

  type contactleadGetPayload<S extends boolean | null | undefined | contactleadDefaultArgs> = $Result.GetResult<Prisma.$contactleadPayload, S>

  type contactleadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<contactleadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactleadCountAggregateInputType | true
    }

  export interface contactleadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['contactlead'], meta: { name: 'contactlead' } }
    /**
     * Find zero or one Contactlead that matches the filter.
     * @param {contactleadFindUniqueArgs} args - Arguments to find a Contactlead
     * @example
     * // Get one Contactlead
     * const contactlead = await prisma.contactlead.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends contactleadFindUniqueArgs>(args: SelectSubset<T, contactleadFindUniqueArgs<ExtArgs>>): Prisma__contactleadClient<$Result.GetResult<Prisma.$contactleadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contactlead that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {contactleadFindUniqueOrThrowArgs} args - Arguments to find a Contactlead
     * @example
     * // Get one Contactlead
     * const contactlead = await prisma.contactlead.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends contactleadFindUniqueOrThrowArgs>(args: SelectSubset<T, contactleadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__contactleadClient<$Result.GetResult<Prisma.$contactleadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contactlead that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contactleadFindFirstArgs} args - Arguments to find a Contactlead
     * @example
     * // Get one Contactlead
     * const contactlead = await prisma.contactlead.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends contactleadFindFirstArgs>(args?: SelectSubset<T, contactleadFindFirstArgs<ExtArgs>>): Prisma__contactleadClient<$Result.GetResult<Prisma.$contactleadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contactlead that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contactleadFindFirstOrThrowArgs} args - Arguments to find a Contactlead
     * @example
     * // Get one Contactlead
     * const contactlead = await prisma.contactlead.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends contactleadFindFirstOrThrowArgs>(args?: SelectSubset<T, contactleadFindFirstOrThrowArgs<ExtArgs>>): Prisma__contactleadClient<$Result.GetResult<Prisma.$contactleadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contactleads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contactleadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contactleads
     * const contactleads = await prisma.contactlead.findMany()
     * 
     * // Get first 10 Contactleads
     * const contactleads = await prisma.contactlead.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactleadWithIdOnly = await prisma.contactlead.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends contactleadFindManyArgs>(args?: SelectSubset<T, contactleadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contactleadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contactlead.
     * @param {contactleadCreateArgs} args - Arguments to create a Contactlead.
     * @example
     * // Create one Contactlead
     * const Contactlead = await prisma.contactlead.create({
     *   data: {
     *     // ... data to create a Contactlead
     *   }
     * })
     * 
     */
    create<T extends contactleadCreateArgs>(args: SelectSubset<T, contactleadCreateArgs<ExtArgs>>): Prisma__contactleadClient<$Result.GetResult<Prisma.$contactleadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contactleads.
     * @param {contactleadCreateManyArgs} args - Arguments to create many Contactleads.
     * @example
     * // Create many Contactleads
     * const contactlead = await prisma.contactlead.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends contactleadCreateManyArgs>(args?: SelectSubset<T, contactleadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Contactlead.
     * @param {contactleadDeleteArgs} args - Arguments to delete one Contactlead.
     * @example
     * // Delete one Contactlead
     * const Contactlead = await prisma.contactlead.delete({
     *   where: {
     *     // ... filter to delete one Contactlead
     *   }
     * })
     * 
     */
    delete<T extends contactleadDeleteArgs>(args: SelectSubset<T, contactleadDeleteArgs<ExtArgs>>): Prisma__contactleadClient<$Result.GetResult<Prisma.$contactleadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contactlead.
     * @param {contactleadUpdateArgs} args - Arguments to update one Contactlead.
     * @example
     * // Update one Contactlead
     * const contactlead = await prisma.contactlead.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends contactleadUpdateArgs>(args: SelectSubset<T, contactleadUpdateArgs<ExtArgs>>): Prisma__contactleadClient<$Result.GetResult<Prisma.$contactleadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contactleads.
     * @param {contactleadDeleteManyArgs} args - Arguments to filter Contactleads to delete.
     * @example
     * // Delete a few Contactleads
     * const { count } = await prisma.contactlead.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends contactleadDeleteManyArgs>(args?: SelectSubset<T, contactleadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contactleads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contactleadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contactleads
     * const contactlead = await prisma.contactlead.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends contactleadUpdateManyArgs>(args: SelectSubset<T, contactleadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contactlead.
     * @param {contactleadUpsertArgs} args - Arguments to update or create a Contactlead.
     * @example
     * // Update or create a Contactlead
     * const contactlead = await prisma.contactlead.upsert({
     *   create: {
     *     // ... data to create a Contactlead
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contactlead we want to update
     *   }
     * })
     */
    upsert<T extends contactleadUpsertArgs>(args: SelectSubset<T, contactleadUpsertArgs<ExtArgs>>): Prisma__contactleadClient<$Result.GetResult<Prisma.$contactleadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contactleads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contactleadCountArgs} args - Arguments to filter Contactleads to count.
     * @example
     * // Count the number of Contactleads
     * const count = await prisma.contactlead.count({
     *   where: {
     *     // ... the filter for the Contactleads we want to count
     *   }
     * })
    **/
    count<T extends contactleadCountArgs>(
      args?: Subset<T, contactleadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactleadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contactlead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactleadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactleadAggregateArgs>(args: Subset<T, ContactleadAggregateArgs>): Prisma.PrismaPromise<GetContactleadAggregateType<T>>

    /**
     * Group by Contactlead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contactleadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends contactleadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: contactleadGroupByArgs['orderBy'] }
        : { orderBy?: contactleadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, contactleadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactleadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the contactlead model
   */
  readonly fields: contactleadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for contactlead.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__contactleadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    property<T extends contactlead$propertyArgs<ExtArgs> = {}>(args?: Subset<T, contactlead$propertyArgs<ExtArgs>>): Prisma__propertyClient<$Result.GetResult<Prisma.$propertyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the contactlead model
   */
  interface contactleadFieldRefs {
    readonly id: FieldRef<"contactlead", 'Int'>
    readonly name: FieldRef<"contactlead", 'String'>
    readonly email: FieldRef<"contactlead", 'String'>
    readonly phone: FieldRef<"contactlead", 'String'>
    readonly message: FieldRef<"contactlead", 'String'>
    readonly source: FieldRef<"contactlead", 'String'>
    readonly createdAt: FieldRef<"contactlead", 'DateTime'>
    readonly propertyId: FieldRef<"contactlead", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * contactlead findUnique
   */
  export type contactleadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contactlead
     */
    select?: contactleadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contactlead
     */
    omit?: contactleadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contactleadInclude<ExtArgs> | null
    /**
     * Filter, which contactlead to fetch.
     */
    where: contactleadWhereUniqueInput
  }

  /**
   * contactlead findUniqueOrThrow
   */
  export type contactleadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contactlead
     */
    select?: contactleadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contactlead
     */
    omit?: contactleadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contactleadInclude<ExtArgs> | null
    /**
     * Filter, which contactlead to fetch.
     */
    where: contactleadWhereUniqueInput
  }

  /**
   * contactlead findFirst
   */
  export type contactleadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contactlead
     */
    select?: contactleadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contactlead
     */
    omit?: contactleadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contactleadInclude<ExtArgs> | null
    /**
     * Filter, which contactlead to fetch.
     */
    where?: contactleadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contactleads to fetch.
     */
    orderBy?: contactleadOrderByWithRelationInput | contactleadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contactleads.
     */
    cursor?: contactleadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contactleads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contactleads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contactleads.
     */
    distinct?: ContactleadScalarFieldEnum | ContactleadScalarFieldEnum[]
  }

  /**
   * contactlead findFirstOrThrow
   */
  export type contactleadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contactlead
     */
    select?: contactleadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contactlead
     */
    omit?: contactleadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contactleadInclude<ExtArgs> | null
    /**
     * Filter, which contactlead to fetch.
     */
    where?: contactleadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contactleads to fetch.
     */
    orderBy?: contactleadOrderByWithRelationInput | contactleadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contactleads.
     */
    cursor?: contactleadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contactleads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contactleads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contactleads.
     */
    distinct?: ContactleadScalarFieldEnum | ContactleadScalarFieldEnum[]
  }

  /**
   * contactlead findMany
   */
  export type contactleadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contactlead
     */
    select?: contactleadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contactlead
     */
    omit?: contactleadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contactleadInclude<ExtArgs> | null
    /**
     * Filter, which contactleads to fetch.
     */
    where?: contactleadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contactleads to fetch.
     */
    orderBy?: contactleadOrderByWithRelationInput | contactleadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing contactleads.
     */
    cursor?: contactleadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contactleads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contactleads.
     */
    skip?: number
    distinct?: ContactleadScalarFieldEnum | ContactleadScalarFieldEnum[]
  }

  /**
   * contactlead create
   */
  export type contactleadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contactlead
     */
    select?: contactleadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contactlead
     */
    omit?: contactleadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contactleadInclude<ExtArgs> | null
    /**
     * The data needed to create a contactlead.
     */
    data: XOR<contactleadCreateInput, contactleadUncheckedCreateInput>
  }

  /**
   * contactlead createMany
   */
  export type contactleadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many contactleads.
     */
    data: contactleadCreateManyInput | contactleadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * contactlead update
   */
  export type contactleadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contactlead
     */
    select?: contactleadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contactlead
     */
    omit?: contactleadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contactleadInclude<ExtArgs> | null
    /**
     * The data needed to update a contactlead.
     */
    data: XOR<contactleadUpdateInput, contactleadUncheckedUpdateInput>
    /**
     * Choose, which contactlead to update.
     */
    where: contactleadWhereUniqueInput
  }

  /**
   * contactlead updateMany
   */
  export type contactleadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update contactleads.
     */
    data: XOR<contactleadUpdateManyMutationInput, contactleadUncheckedUpdateManyInput>
    /**
     * Filter which contactleads to update
     */
    where?: contactleadWhereInput
    /**
     * Limit how many contactleads to update.
     */
    limit?: number
  }

  /**
   * contactlead upsert
   */
  export type contactleadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contactlead
     */
    select?: contactleadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contactlead
     */
    omit?: contactleadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contactleadInclude<ExtArgs> | null
    /**
     * The filter to search for the contactlead to update in case it exists.
     */
    where: contactleadWhereUniqueInput
    /**
     * In case the contactlead found by the `where` argument doesn't exist, create a new contactlead with this data.
     */
    create: XOR<contactleadCreateInput, contactleadUncheckedCreateInput>
    /**
     * In case the contactlead was found with the provided `where` argument, update it with this data.
     */
    update: XOR<contactleadUpdateInput, contactleadUncheckedUpdateInput>
  }

  /**
   * contactlead delete
   */
  export type contactleadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contactlead
     */
    select?: contactleadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contactlead
     */
    omit?: contactleadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contactleadInclude<ExtArgs> | null
    /**
     * Filter which contactlead to delete.
     */
    where: contactleadWhereUniqueInput
  }

  /**
   * contactlead deleteMany
   */
  export type contactleadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which contactleads to delete
     */
    where?: contactleadWhereInput
    /**
     * Limit how many contactleads to delete.
     */
    limit?: number
  }

  /**
   * contactlead.property
   */
  export type contactlead$propertyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the property
     */
    select?: propertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the property
     */
    omit?: propertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyInclude<ExtArgs> | null
    where?: propertyWhereInput
  }

  /**
   * contactlead without action
   */
  export type contactleadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contactlead
     */
    select?: contactleadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contactlead
     */
    omit?: contactleadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contactleadInclude<ExtArgs> | null
  }


  /**
   * Model coownership
   */

  export type AggregateCoownership = {
    _count: CoownershipCountAggregateOutputType | null
    _avg: CoownershipAvgAggregateOutputType | null
    _sum: CoownershipSumAggregateOutputType | null
    _min: CoownershipMinAggregateOutputType | null
    _max: CoownershipMaxAggregateOutputType | null
  }

  export type CoownershipAvgAggregateOutputType = {
    id: number | null
    propertyId: number | null
    clientId: number | null
    share: Decimal | null
  }

  export type CoownershipSumAggregateOutputType = {
    id: number | null
    propertyId: number | null
    clientId: number | null
    share: Decimal | null
  }

  export type CoownershipMinAggregateOutputType = {
    id: number | null
    propertyId: number | null
    clientId: number | null
    share: Decimal | null
    role: string | null
    createdAt: Date | null
  }

  export type CoownershipMaxAggregateOutputType = {
    id: number | null
    propertyId: number | null
    clientId: number | null
    share: Decimal | null
    role: string | null
    createdAt: Date | null
  }

  export type CoownershipCountAggregateOutputType = {
    id: number
    propertyId: number
    clientId: number
    share: number
    role: number
    createdAt: number
    _all: number
  }


  export type CoownershipAvgAggregateInputType = {
    id?: true
    propertyId?: true
    clientId?: true
    share?: true
  }

  export type CoownershipSumAggregateInputType = {
    id?: true
    propertyId?: true
    clientId?: true
    share?: true
  }

  export type CoownershipMinAggregateInputType = {
    id?: true
    propertyId?: true
    clientId?: true
    share?: true
    role?: true
    createdAt?: true
  }

  export type CoownershipMaxAggregateInputType = {
    id?: true
    propertyId?: true
    clientId?: true
    share?: true
    role?: true
    createdAt?: true
  }

  export type CoownershipCountAggregateInputType = {
    id?: true
    propertyId?: true
    clientId?: true
    share?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type CoownershipAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which coownership to aggregate.
     */
    where?: coownershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of coownerships to fetch.
     */
    orderBy?: coownershipOrderByWithRelationInput | coownershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: coownershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` coownerships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` coownerships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned coownerships
    **/
    _count?: true | CoownershipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoownershipAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoownershipSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoownershipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoownershipMaxAggregateInputType
  }

  export type GetCoownershipAggregateType<T extends CoownershipAggregateArgs> = {
        [P in keyof T & keyof AggregateCoownership]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoownership[P]>
      : GetScalarType<T[P], AggregateCoownership[P]>
  }




  export type coownershipGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: coownershipWhereInput
    orderBy?: coownershipOrderByWithAggregationInput | coownershipOrderByWithAggregationInput[]
    by: CoownershipScalarFieldEnum[] | CoownershipScalarFieldEnum
    having?: coownershipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoownershipCountAggregateInputType | true
    _avg?: CoownershipAvgAggregateInputType
    _sum?: CoownershipSumAggregateInputType
    _min?: CoownershipMinAggregateInputType
    _max?: CoownershipMaxAggregateInputType
  }

  export type CoownershipGroupByOutputType = {
    id: number
    propertyId: number
    clientId: number
    share: Decimal
    role: string
    createdAt: Date
    _count: CoownershipCountAggregateOutputType | null
    _avg: CoownershipAvgAggregateOutputType | null
    _sum: CoownershipSumAggregateOutputType | null
    _min: CoownershipMinAggregateOutputType | null
    _max: CoownershipMaxAggregateOutputType | null
  }

  type GetCoownershipGroupByPayload<T extends coownershipGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoownershipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoownershipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoownershipGroupByOutputType[P]>
            : GetScalarType<T[P], CoownershipGroupByOutputType[P]>
        }
      >
    >


  export type coownershipSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    propertyId?: boolean
    clientId?: boolean
    share?: boolean
    role?: boolean
    createdAt?: boolean
    property?: boolean | propertyDefaultArgs<ExtArgs>
    client?: boolean | clientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coownership"]>



  export type coownershipSelectScalar = {
    id?: boolean
    propertyId?: boolean
    clientId?: boolean
    share?: boolean
    role?: boolean
    createdAt?: boolean
  }

  export type coownershipOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "propertyId" | "clientId" | "share" | "role" | "createdAt", ExtArgs["result"]["coownership"]>
  export type coownershipInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    property?: boolean | propertyDefaultArgs<ExtArgs>
    client?: boolean | clientDefaultArgs<ExtArgs>
  }

  export type $coownershipPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "coownership"
    objects: {
      property: Prisma.$propertyPayload<ExtArgs>
      client: Prisma.$clientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      propertyId: number
      clientId: number
      share: Prisma.Decimal
      role: string
      createdAt: Date
    }, ExtArgs["result"]["coownership"]>
    composites: {}
  }

  type coownershipGetPayload<S extends boolean | null | undefined | coownershipDefaultArgs> = $Result.GetResult<Prisma.$coownershipPayload, S>

  type coownershipCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<coownershipFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoownershipCountAggregateInputType | true
    }

  export interface coownershipDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['coownership'], meta: { name: 'coownership' } }
    /**
     * Find zero or one Coownership that matches the filter.
     * @param {coownershipFindUniqueArgs} args - Arguments to find a Coownership
     * @example
     * // Get one Coownership
     * const coownership = await prisma.coownership.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends coownershipFindUniqueArgs>(args: SelectSubset<T, coownershipFindUniqueArgs<ExtArgs>>): Prisma__coownershipClient<$Result.GetResult<Prisma.$coownershipPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Coownership that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {coownershipFindUniqueOrThrowArgs} args - Arguments to find a Coownership
     * @example
     * // Get one Coownership
     * const coownership = await prisma.coownership.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends coownershipFindUniqueOrThrowArgs>(args: SelectSubset<T, coownershipFindUniqueOrThrowArgs<ExtArgs>>): Prisma__coownershipClient<$Result.GetResult<Prisma.$coownershipPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Coownership that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coownershipFindFirstArgs} args - Arguments to find a Coownership
     * @example
     * // Get one Coownership
     * const coownership = await prisma.coownership.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends coownershipFindFirstArgs>(args?: SelectSubset<T, coownershipFindFirstArgs<ExtArgs>>): Prisma__coownershipClient<$Result.GetResult<Prisma.$coownershipPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Coownership that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coownershipFindFirstOrThrowArgs} args - Arguments to find a Coownership
     * @example
     * // Get one Coownership
     * const coownership = await prisma.coownership.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends coownershipFindFirstOrThrowArgs>(args?: SelectSubset<T, coownershipFindFirstOrThrowArgs<ExtArgs>>): Prisma__coownershipClient<$Result.GetResult<Prisma.$coownershipPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Coownerships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coownershipFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Coownerships
     * const coownerships = await prisma.coownership.findMany()
     * 
     * // Get first 10 Coownerships
     * const coownerships = await prisma.coownership.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coownershipWithIdOnly = await prisma.coownership.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends coownershipFindManyArgs>(args?: SelectSubset<T, coownershipFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coownershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Coownership.
     * @param {coownershipCreateArgs} args - Arguments to create a Coownership.
     * @example
     * // Create one Coownership
     * const Coownership = await prisma.coownership.create({
     *   data: {
     *     // ... data to create a Coownership
     *   }
     * })
     * 
     */
    create<T extends coownershipCreateArgs>(args: SelectSubset<T, coownershipCreateArgs<ExtArgs>>): Prisma__coownershipClient<$Result.GetResult<Prisma.$coownershipPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Coownerships.
     * @param {coownershipCreateManyArgs} args - Arguments to create many Coownerships.
     * @example
     * // Create many Coownerships
     * const coownership = await prisma.coownership.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends coownershipCreateManyArgs>(args?: SelectSubset<T, coownershipCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Coownership.
     * @param {coownershipDeleteArgs} args - Arguments to delete one Coownership.
     * @example
     * // Delete one Coownership
     * const Coownership = await prisma.coownership.delete({
     *   where: {
     *     // ... filter to delete one Coownership
     *   }
     * })
     * 
     */
    delete<T extends coownershipDeleteArgs>(args: SelectSubset<T, coownershipDeleteArgs<ExtArgs>>): Prisma__coownershipClient<$Result.GetResult<Prisma.$coownershipPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Coownership.
     * @param {coownershipUpdateArgs} args - Arguments to update one Coownership.
     * @example
     * // Update one Coownership
     * const coownership = await prisma.coownership.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends coownershipUpdateArgs>(args: SelectSubset<T, coownershipUpdateArgs<ExtArgs>>): Prisma__coownershipClient<$Result.GetResult<Prisma.$coownershipPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Coownerships.
     * @param {coownershipDeleteManyArgs} args - Arguments to filter Coownerships to delete.
     * @example
     * // Delete a few Coownerships
     * const { count } = await prisma.coownership.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends coownershipDeleteManyArgs>(args?: SelectSubset<T, coownershipDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coownerships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coownershipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Coownerships
     * const coownership = await prisma.coownership.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends coownershipUpdateManyArgs>(args: SelectSubset<T, coownershipUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Coownership.
     * @param {coownershipUpsertArgs} args - Arguments to update or create a Coownership.
     * @example
     * // Update or create a Coownership
     * const coownership = await prisma.coownership.upsert({
     *   create: {
     *     // ... data to create a Coownership
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Coownership we want to update
     *   }
     * })
     */
    upsert<T extends coownershipUpsertArgs>(args: SelectSubset<T, coownershipUpsertArgs<ExtArgs>>): Prisma__coownershipClient<$Result.GetResult<Prisma.$coownershipPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Coownerships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coownershipCountArgs} args - Arguments to filter Coownerships to count.
     * @example
     * // Count the number of Coownerships
     * const count = await prisma.coownership.count({
     *   where: {
     *     // ... the filter for the Coownerships we want to count
     *   }
     * })
    **/
    count<T extends coownershipCountArgs>(
      args?: Subset<T, coownershipCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoownershipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Coownership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoownershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoownershipAggregateArgs>(args: Subset<T, CoownershipAggregateArgs>): Prisma.PrismaPromise<GetCoownershipAggregateType<T>>

    /**
     * Group by Coownership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coownershipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends coownershipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: coownershipGroupByArgs['orderBy'] }
        : { orderBy?: coownershipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, coownershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoownershipGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the coownership model
   */
  readonly fields: coownershipFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for coownership.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__coownershipClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    property<T extends propertyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, propertyDefaultArgs<ExtArgs>>): Prisma__propertyClient<$Result.GetResult<Prisma.$propertyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    client<T extends clientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, clientDefaultArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the coownership model
   */
  interface coownershipFieldRefs {
    readonly id: FieldRef<"coownership", 'Int'>
    readonly propertyId: FieldRef<"coownership", 'Int'>
    readonly clientId: FieldRef<"coownership", 'Int'>
    readonly share: FieldRef<"coownership", 'Decimal'>
    readonly role: FieldRef<"coownership", 'String'>
    readonly createdAt: FieldRef<"coownership", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * coownership findUnique
   */
  export type coownershipFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coownership
     */
    select?: coownershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coownership
     */
    omit?: coownershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coownershipInclude<ExtArgs> | null
    /**
     * Filter, which coownership to fetch.
     */
    where: coownershipWhereUniqueInput
  }

  /**
   * coownership findUniqueOrThrow
   */
  export type coownershipFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coownership
     */
    select?: coownershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coownership
     */
    omit?: coownershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coownershipInclude<ExtArgs> | null
    /**
     * Filter, which coownership to fetch.
     */
    where: coownershipWhereUniqueInput
  }

  /**
   * coownership findFirst
   */
  export type coownershipFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coownership
     */
    select?: coownershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coownership
     */
    omit?: coownershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coownershipInclude<ExtArgs> | null
    /**
     * Filter, which coownership to fetch.
     */
    where?: coownershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of coownerships to fetch.
     */
    orderBy?: coownershipOrderByWithRelationInput | coownershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for coownerships.
     */
    cursor?: coownershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` coownerships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` coownerships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of coownerships.
     */
    distinct?: CoownershipScalarFieldEnum | CoownershipScalarFieldEnum[]
  }

  /**
   * coownership findFirstOrThrow
   */
  export type coownershipFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coownership
     */
    select?: coownershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coownership
     */
    omit?: coownershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coownershipInclude<ExtArgs> | null
    /**
     * Filter, which coownership to fetch.
     */
    where?: coownershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of coownerships to fetch.
     */
    orderBy?: coownershipOrderByWithRelationInput | coownershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for coownerships.
     */
    cursor?: coownershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` coownerships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` coownerships.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of coownerships.
     */
    distinct?: CoownershipScalarFieldEnum | CoownershipScalarFieldEnum[]
  }

  /**
   * coownership findMany
   */
  export type coownershipFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coownership
     */
    select?: coownershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coownership
     */
    omit?: coownershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coownershipInclude<ExtArgs> | null
    /**
     * Filter, which coownerships to fetch.
     */
    where?: coownershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of coownerships to fetch.
     */
    orderBy?: coownershipOrderByWithRelationInput | coownershipOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing coownerships.
     */
    cursor?: coownershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` coownerships from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` coownerships.
     */
    skip?: number
    distinct?: CoownershipScalarFieldEnum | CoownershipScalarFieldEnum[]
  }

  /**
   * coownership create
   */
  export type coownershipCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coownership
     */
    select?: coownershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coownership
     */
    omit?: coownershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coownershipInclude<ExtArgs> | null
    /**
     * The data needed to create a coownership.
     */
    data: XOR<coownershipCreateInput, coownershipUncheckedCreateInput>
  }

  /**
   * coownership createMany
   */
  export type coownershipCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many coownerships.
     */
    data: coownershipCreateManyInput | coownershipCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * coownership update
   */
  export type coownershipUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coownership
     */
    select?: coownershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coownership
     */
    omit?: coownershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coownershipInclude<ExtArgs> | null
    /**
     * The data needed to update a coownership.
     */
    data: XOR<coownershipUpdateInput, coownershipUncheckedUpdateInput>
    /**
     * Choose, which coownership to update.
     */
    where: coownershipWhereUniqueInput
  }

  /**
   * coownership updateMany
   */
  export type coownershipUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update coownerships.
     */
    data: XOR<coownershipUpdateManyMutationInput, coownershipUncheckedUpdateManyInput>
    /**
     * Filter which coownerships to update
     */
    where?: coownershipWhereInput
    /**
     * Limit how many coownerships to update.
     */
    limit?: number
  }

  /**
   * coownership upsert
   */
  export type coownershipUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coownership
     */
    select?: coownershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coownership
     */
    omit?: coownershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coownershipInclude<ExtArgs> | null
    /**
     * The filter to search for the coownership to update in case it exists.
     */
    where: coownershipWhereUniqueInput
    /**
     * In case the coownership found by the `where` argument doesn't exist, create a new coownership with this data.
     */
    create: XOR<coownershipCreateInput, coownershipUncheckedCreateInput>
    /**
     * In case the coownership was found with the provided `where` argument, update it with this data.
     */
    update: XOR<coownershipUpdateInput, coownershipUncheckedUpdateInput>
  }

  /**
   * coownership delete
   */
  export type coownershipDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coownership
     */
    select?: coownershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coownership
     */
    omit?: coownershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coownershipInclude<ExtArgs> | null
    /**
     * Filter which coownership to delete.
     */
    where: coownershipWhereUniqueInput
  }

  /**
   * coownership deleteMany
   */
  export type coownershipDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which coownerships to delete
     */
    where?: coownershipWhereInput
    /**
     * Limit how many coownerships to delete.
     */
    limit?: number
  }

  /**
   * coownership without action
   */
  export type coownershipDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coownership
     */
    select?: coownershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coownership
     */
    omit?: coownershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coownershipInclude<ExtArgs> | null
  }


  /**
   * Model deal
   */

  export type AggregateDeal = {
    _count: DealCountAggregateOutputType | null
    _avg: DealAvgAggregateOutputType | null
    _sum: DealSumAggregateOutputType | null
    _min: DealMinAggregateOutputType | null
    _max: DealMaxAggregateOutputType | null
  }

  export type DealAvgAggregateOutputType = {
    id: number | null
    basePrice: Decimal | null
    discount: Decimal | null
    taxRate: Decimal | null
    commissionRate: Decimal | null
    propertyId: number | null
    clientId: number | null
  }

  export type DealSumAggregateOutputType = {
    id: number | null
    basePrice: Decimal | null
    discount: Decimal | null
    taxRate: Decimal | null
    commissionRate: Decimal | null
    propertyId: number | null
    clientId: number | null
  }

  export type DealMinAggregateOutputType = {
    id: number | null
    type: string | null
    status: string | null
    basePrice: Decimal | null
    discount: Decimal | null
    taxRate: Decimal | null
    commissionRate: Decimal | null
    expectedClose: Date | null
    closedAt: Date | null
    createdAt: Date | null
    propertyId: number | null
    clientId: number | null
  }

  export type DealMaxAggregateOutputType = {
    id: number | null
    type: string | null
    status: string | null
    basePrice: Decimal | null
    discount: Decimal | null
    taxRate: Decimal | null
    commissionRate: Decimal | null
    expectedClose: Date | null
    closedAt: Date | null
    createdAt: Date | null
    propertyId: number | null
    clientId: number | null
  }

  export type DealCountAggregateOutputType = {
    id: number
    type: number
    status: number
    basePrice: number
    discount: number
    taxRate: number
    commissionRate: number
    expectedClose: number
    closedAt: number
    createdAt: number
    propertyId: number
    clientId: number
    _all: number
  }


  export type DealAvgAggregateInputType = {
    id?: true
    basePrice?: true
    discount?: true
    taxRate?: true
    commissionRate?: true
    propertyId?: true
    clientId?: true
  }

  export type DealSumAggregateInputType = {
    id?: true
    basePrice?: true
    discount?: true
    taxRate?: true
    commissionRate?: true
    propertyId?: true
    clientId?: true
  }

  export type DealMinAggregateInputType = {
    id?: true
    type?: true
    status?: true
    basePrice?: true
    discount?: true
    taxRate?: true
    commissionRate?: true
    expectedClose?: true
    closedAt?: true
    createdAt?: true
    propertyId?: true
    clientId?: true
  }

  export type DealMaxAggregateInputType = {
    id?: true
    type?: true
    status?: true
    basePrice?: true
    discount?: true
    taxRate?: true
    commissionRate?: true
    expectedClose?: true
    closedAt?: true
    createdAt?: true
    propertyId?: true
    clientId?: true
  }

  export type DealCountAggregateInputType = {
    id?: true
    type?: true
    status?: true
    basePrice?: true
    discount?: true
    taxRate?: true
    commissionRate?: true
    expectedClose?: true
    closedAt?: true
    createdAt?: true
    propertyId?: true
    clientId?: true
    _all?: true
  }

  export type DealAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which deal to aggregate.
     */
    where?: dealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deals to fetch.
     */
    orderBy?: dealOrderByWithRelationInput | dealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: dealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned deals
    **/
    _count?: true | DealCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DealAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DealSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DealMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DealMaxAggregateInputType
  }

  export type GetDealAggregateType<T extends DealAggregateArgs> = {
        [P in keyof T & keyof AggregateDeal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeal[P]>
      : GetScalarType<T[P], AggregateDeal[P]>
  }




  export type dealGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: dealWhereInput
    orderBy?: dealOrderByWithAggregationInput | dealOrderByWithAggregationInput[]
    by: DealScalarFieldEnum[] | DealScalarFieldEnum
    having?: dealScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DealCountAggregateInputType | true
    _avg?: DealAvgAggregateInputType
    _sum?: DealSumAggregateInputType
    _min?: DealMinAggregateInputType
    _max?: DealMaxAggregateInputType
  }

  export type DealGroupByOutputType = {
    id: number
    type: string
    status: string
    basePrice: Decimal
    discount: Decimal
    taxRate: Decimal
    commissionRate: Decimal
    expectedClose: Date | null
    closedAt: Date | null
    createdAt: Date
    propertyId: number | null
    clientId: number
    _count: DealCountAggregateOutputType | null
    _avg: DealAvgAggregateOutputType | null
    _sum: DealSumAggregateOutputType | null
    _min: DealMinAggregateOutputType | null
    _max: DealMaxAggregateOutputType | null
  }

  type GetDealGroupByPayload<T extends dealGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DealGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DealGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DealGroupByOutputType[P]>
            : GetScalarType<T[P], DealGroupByOutputType[P]>
        }
      >
    >


  export type dealSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    status?: boolean
    basePrice?: boolean
    discount?: boolean
    taxRate?: boolean
    commissionRate?: boolean
    expectedClose?: boolean
    closedAt?: boolean
    createdAt?: boolean
    propertyId?: boolean
    clientId?: boolean
    client?: boolean | clientDefaultArgs<ExtArgs>
    property?: boolean | deal$propertyArgs<ExtArgs>
    invoices?: boolean | deal$invoicesArgs<ExtArgs>
    payments?: boolean | deal$paymentsArgs<ExtArgs>
    schedules?: boolean | deal$schedulesArgs<ExtArgs>
    expenses?: boolean | deal$expensesArgs<ExtArgs>
    _count?: boolean | DealCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deal"]>



  export type dealSelectScalar = {
    id?: boolean
    type?: boolean
    status?: boolean
    basePrice?: boolean
    discount?: boolean
    taxRate?: boolean
    commissionRate?: boolean
    expectedClose?: boolean
    closedAt?: boolean
    createdAt?: boolean
    propertyId?: boolean
    clientId?: boolean
  }

  export type dealOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "status" | "basePrice" | "discount" | "taxRate" | "commissionRate" | "expectedClose" | "closedAt" | "createdAt" | "propertyId" | "clientId", ExtArgs["result"]["deal"]>
  export type dealInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    client?: boolean | clientDefaultArgs<ExtArgs>
    property?: boolean | deal$propertyArgs<ExtArgs>
    invoices?: boolean | deal$invoicesArgs<ExtArgs>
    payments?: boolean | deal$paymentsArgs<ExtArgs>
    schedules?: boolean | deal$schedulesArgs<ExtArgs>
    expenses?: boolean | deal$expensesArgs<ExtArgs>
    _count?: boolean | DealCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $dealPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "deal"
    objects: {
      client: Prisma.$clientPayload<ExtArgs>
      property: Prisma.$propertyPayload<ExtArgs> | null
      invoices: Prisma.$invoicePayload<ExtArgs>[]
      payments: Prisma.$paymentPayload<ExtArgs>[]
      schedules: Prisma.$paymentschedulePayload<ExtArgs>[]
      expenses: Prisma.$expensePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: string
      status: string
      basePrice: Prisma.Decimal
      discount: Prisma.Decimal
      taxRate: Prisma.Decimal
      commissionRate: Prisma.Decimal
      expectedClose: Date | null
      closedAt: Date | null
      createdAt: Date
      propertyId: number | null
      clientId: number
    }, ExtArgs["result"]["deal"]>
    composites: {}
  }

  type dealGetPayload<S extends boolean | null | undefined | dealDefaultArgs> = $Result.GetResult<Prisma.$dealPayload, S>

  type dealCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<dealFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DealCountAggregateInputType | true
    }

  export interface dealDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['deal'], meta: { name: 'deal' } }
    /**
     * Find zero or one Deal that matches the filter.
     * @param {dealFindUniqueArgs} args - Arguments to find a Deal
     * @example
     * // Get one Deal
     * const deal = await prisma.deal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends dealFindUniqueArgs>(args: SelectSubset<T, dealFindUniqueArgs<ExtArgs>>): Prisma__dealClient<$Result.GetResult<Prisma.$dealPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Deal that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {dealFindUniqueOrThrowArgs} args - Arguments to find a Deal
     * @example
     * // Get one Deal
     * const deal = await prisma.deal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends dealFindUniqueOrThrowArgs>(args: SelectSubset<T, dealFindUniqueOrThrowArgs<ExtArgs>>): Prisma__dealClient<$Result.GetResult<Prisma.$dealPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Deal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dealFindFirstArgs} args - Arguments to find a Deal
     * @example
     * // Get one Deal
     * const deal = await prisma.deal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends dealFindFirstArgs>(args?: SelectSubset<T, dealFindFirstArgs<ExtArgs>>): Prisma__dealClient<$Result.GetResult<Prisma.$dealPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Deal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dealFindFirstOrThrowArgs} args - Arguments to find a Deal
     * @example
     * // Get one Deal
     * const deal = await prisma.deal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends dealFindFirstOrThrowArgs>(args?: SelectSubset<T, dealFindFirstOrThrowArgs<ExtArgs>>): Prisma__dealClient<$Result.GetResult<Prisma.$dealPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Deals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dealFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Deals
     * const deals = await prisma.deal.findMany()
     * 
     * // Get first 10 Deals
     * const deals = await prisma.deal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dealWithIdOnly = await prisma.deal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends dealFindManyArgs>(args?: SelectSubset<T, dealFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$dealPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Deal.
     * @param {dealCreateArgs} args - Arguments to create a Deal.
     * @example
     * // Create one Deal
     * const Deal = await prisma.deal.create({
     *   data: {
     *     // ... data to create a Deal
     *   }
     * })
     * 
     */
    create<T extends dealCreateArgs>(args: SelectSubset<T, dealCreateArgs<ExtArgs>>): Prisma__dealClient<$Result.GetResult<Prisma.$dealPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Deals.
     * @param {dealCreateManyArgs} args - Arguments to create many Deals.
     * @example
     * // Create many Deals
     * const deal = await prisma.deal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends dealCreateManyArgs>(args?: SelectSubset<T, dealCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Deal.
     * @param {dealDeleteArgs} args - Arguments to delete one Deal.
     * @example
     * // Delete one Deal
     * const Deal = await prisma.deal.delete({
     *   where: {
     *     // ... filter to delete one Deal
     *   }
     * })
     * 
     */
    delete<T extends dealDeleteArgs>(args: SelectSubset<T, dealDeleteArgs<ExtArgs>>): Prisma__dealClient<$Result.GetResult<Prisma.$dealPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Deal.
     * @param {dealUpdateArgs} args - Arguments to update one Deal.
     * @example
     * // Update one Deal
     * const deal = await prisma.deal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends dealUpdateArgs>(args: SelectSubset<T, dealUpdateArgs<ExtArgs>>): Prisma__dealClient<$Result.GetResult<Prisma.$dealPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Deals.
     * @param {dealDeleteManyArgs} args - Arguments to filter Deals to delete.
     * @example
     * // Delete a few Deals
     * const { count } = await prisma.deal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends dealDeleteManyArgs>(args?: SelectSubset<T, dealDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Deals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dealUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Deals
     * const deal = await prisma.deal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends dealUpdateManyArgs>(args: SelectSubset<T, dealUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Deal.
     * @param {dealUpsertArgs} args - Arguments to update or create a Deal.
     * @example
     * // Update or create a Deal
     * const deal = await prisma.deal.upsert({
     *   create: {
     *     // ... data to create a Deal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Deal we want to update
     *   }
     * })
     */
    upsert<T extends dealUpsertArgs>(args: SelectSubset<T, dealUpsertArgs<ExtArgs>>): Prisma__dealClient<$Result.GetResult<Prisma.$dealPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Deals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dealCountArgs} args - Arguments to filter Deals to count.
     * @example
     * // Count the number of Deals
     * const count = await prisma.deal.count({
     *   where: {
     *     // ... the filter for the Deals we want to count
     *   }
     * })
    **/
    count<T extends dealCountArgs>(
      args?: Subset<T, dealCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DealCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Deal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DealAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DealAggregateArgs>(args: Subset<T, DealAggregateArgs>): Prisma.PrismaPromise<GetDealAggregateType<T>>

    /**
     * Group by Deal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {dealGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends dealGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: dealGroupByArgs['orderBy'] }
        : { orderBy?: dealGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, dealGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDealGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the deal model
   */
  readonly fields: dealFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for deal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__dealClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    client<T extends clientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, clientDefaultArgs<ExtArgs>>): Prisma__clientClient<$Result.GetResult<Prisma.$clientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    property<T extends deal$propertyArgs<ExtArgs> = {}>(args?: Subset<T, deal$propertyArgs<ExtArgs>>): Prisma__propertyClient<$Result.GetResult<Prisma.$propertyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    invoices<T extends deal$invoicesArgs<ExtArgs> = {}>(args?: Subset<T, deal$invoicesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$invoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payments<T extends deal$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, deal$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    schedules<T extends deal$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, deal$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentschedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    expenses<T extends deal$expensesArgs<ExtArgs> = {}>(args?: Subset<T, deal$expensesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the deal model
   */
  interface dealFieldRefs {
    readonly id: FieldRef<"deal", 'Int'>
    readonly type: FieldRef<"deal", 'String'>
    readonly status: FieldRef<"deal", 'String'>
    readonly basePrice: FieldRef<"deal", 'Decimal'>
    readonly discount: FieldRef<"deal", 'Decimal'>
    readonly taxRate: FieldRef<"deal", 'Decimal'>
    readonly commissionRate: FieldRef<"deal", 'Decimal'>
    readonly expectedClose: FieldRef<"deal", 'DateTime'>
    readonly closedAt: FieldRef<"deal", 'DateTime'>
    readonly createdAt: FieldRef<"deal", 'DateTime'>
    readonly propertyId: FieldRef<"deal", 'Int'>
    readonly clientId: FieldRef<"deal", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * deal findUnique
   */
  export type dealFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deal
     */
    select?: dealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deal
     */
    omit?: dealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dealInclude<ExtArgs> | null
    /**
     * Filter, which deal to fetch.
     */
    where: dealWhereUniqueInput
  }

  /**
   * deal findUniqueOrThrow
   */
  export type dealFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deal
     */
    select?: dealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deal
     */
    omit?: dealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dealInclude<ExtArgs> | null
    /**
     * Filter, which deal to fetch.
     */
    where: dealWhereUniqueInput
  }

  /**
   * deal findFirst
   */
  export type dealFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deal
     */
    select?: dealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deal
     */
    omit?: dealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dealInclude<ExtArgs> | null
    /**
     * Filter, which deal to fetch.
     */
    where?: dealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deals to fetch.
     */
    orderBy?: dealOrderByWithRelationInput | dealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for deals.
     */
    cursor?: dealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of deals.
     */
    distinct?: DealScalarFieldEnum | DealScalarFieldEnum[]
  }

  /**
   * deal findFirstOrThrow
   */
  export type dealFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deal
     */
    select?: dealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deal
     */
    omit?: dealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dealInclude<ExtArgs> | null
    /**
     * Filter, which deal to fetch.
     */
    where?: dealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deals to fetch.
     */
    orderBy?: dealOrderByWithRelationInput | dealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for deals.
     */
    cursor?: dealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of deals.
     */
    distinct?: DealScalarFieldEnum | DealScalarFieldEnum[]
  }

  /**
   * deal findMany
   */
  export type dealFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deal
     */
    select?: dealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deal
     */
    omit?: dealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dealInclude<ExtArgs> | null
    /**
     * Filter, which deals to fetch.
     */
    where?: dealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deals to fetch.
     */
    orderBy?: dealOrderByWithRelationInput | dealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing deals.
     */
    cursor?: dealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deals.
     */
    skip?: number
    distinct?: DealScalarFieldEnum | DealScalarFieldEnum[]
  }

  /**
   * deal create
   */
  export type dealCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deal
     */
    select?: dealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deal
     */
    omit?: dealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dealInclude<ExtArgs> | null
    /**
     * The data needed to create a deal.
     */
    data: XOR<dealCreateInput, dealUncheckedCreateInput>
  }

  /**
   * deal createMany
   */
  export type dealCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many deals.
     */
    data: dealCreateManyInput | dealCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * deal update
   */
  export type dealUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deal
     */
    select?: dealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deal
     */
    omit?: dealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dealInclude<ExtArgs> | null
    /**
     * The data needed to update a deal.
     */
    data: XOR<dealUpdateInput, dealUncheckedUpdateInput>
    /**
     * Choose, which deal to update.
     */
    where: dealWhereUniqueInput
  }

  /**
   * deal updateMany
   */
  export type dealUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update deals.
     */
    data: XOR<dealUpdateManyMutationInput, dealUncheckedUpdateManyInput>
    /**
     * Filter which deals to update
     */
    where?: dealWhereInput
    /**
     * Limit how many deals to update.
     */
    limit?: number
  }

  /**
   * deal upsert
   */
  export type dealUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deal
     */
    select?: dealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deal
     */
    omit?: dealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dealInclude<ExtArgs> | null
    /**
     * The filter to search for the deal to update in case it exists.
     */
    where: dealWhereUniqueInput
    /**
     * In case the deal found by the `where` argument doesn't exist, create a new deal with this data.
     */
    create: XOR<dealCreateInput, dealUncheckedCreateInput>
    /**
     * In case the deal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<dealUpdateInput, dealUncheckedUpdateInput>
  }

  /**
   * deal delete
   */
  export type dealDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deal
     */
    select?: dealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deal
     */
    omit?: dealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dealInclude<ExtArgs> | null
    /**
     * Filter which deal to delete.
     */
    where: dealWhereUniqueInput
  }

  /**
   * deal deleteMany
   */
  export type dealDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which deals to delete
     */
    where?: dealWhereInput
    /**
     * Limit how many deals to delete.
     */
    limit?: number
  }

  /**
   * deal.property
   */
  export type deal$propertyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the property
     */
    select?: propertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the property
     */
    omit?: propertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyInclude<ExtArgs> | null
    where?: propertyWhereInput
  }

  /**
   * deal.invoices
   */
  export type deal$invoicesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the invoice
     */
    select?: invoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the invoice
     */
    omit?: invoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: invoiceInclude<ExtArgs> | null
    where?: invoiceWhereInput
    orderBy?: invoiceOrderByWithRelationInput | invoiceOrderByWithRelationInput[]
    cursor?: invoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * deal.payments
   */
  export type deal$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    where?: paymentWhereInput
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    cursor?: paymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * deal.schedules
   */
  export type deal$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paymentschedule
     */
    select?: paymentscheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the paymentschedule
     */
    omit?: paymentscheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentscheduleInclude<ExtArgs> | null
    where?: paymentscheduleWhereInput
    orderBy?: paymentscheduleOrderByWithRelationInput | paymentscheduleOrderByWithRelationInput[]
    cursor?: paymentscheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentscheduleScalarFieldEnum | PaymentscheduleScalarFieldEnum[]
  }

  /**
   * deal.expenses
   */
  export type deal$expensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    where?: expenseWhereInput
    orderBy?: expenseOrderByWithRelationInput | expenseOrderByWithRelationInput[]
    cursor?: expenseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * deal without action
   */
  export type dealDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deal
     */
    select?: dealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deal
     */
    omit?: dealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dealInclude<ExtArgs> | null
  }


  /**
   * Model expense
   */

  export type AggregateExpense = {
    _count: ExpenseCountAggregateOutputType | null
    _avg: ExpenseAvgAggregateOutputType | null
    _sum: ExpenseSumAggregateOutputType | null
    _min: ExpenseMinAggregateOutputType | null
    _max: ExpenseMaxAggregateOutputType | null
  }

  export type ExpenseAvgAggregateOutputType = {
    id: number | null
    amount: Decimal | null
    dealId: number | null
    propertyId: number | null
  }

  export type ExpenseSumAggregateOutputType = {
    id: number | null
    amount: Decimal | null
    dealId: number | null
    propertyId: number | null
  }

  export type ExpenseMinAggregateOutputType = {
    id: number | null
    date: Date | null
    category: string | null
    description: string | null
    amount: Decimal | null
    payee: string | null
    dealId: number | null
    propertyId: number | null
  }

  export type ExpenseMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    category: string | null
    description: string | null
    amount: Decimal | null
    payee: string | null
    dealId: number | null
    propertyId: number | null
  }

  export type ExpenseCountAggregateOutputType = {
    id: number
    date: number
    category: number
    description: number
    amount: number
    payee: number
    dealId: number
    propertyId: number
    _all: number
  }


  export type ExpenseAvgAggregateInputType = {
    id?: true
    amount?: true
    dealId?: true
    propertyId?: true
  }

  export type ExpenseSumAggregateInputType = {
    id?: true
    amount?: true
    dealId?: true
    propertyId?: true
  }

  export type ExpenseMinAggregateInputType = {
    id?: true
    date?: true
    category?: true
    description?: true
    amount?: true
    payee?: true
    dealId?: true
    propertyId?: true
  }

  export type ExpenseMaxAggregateInputType = {
    id?: true
    date?: true
    category?: true
    description?: true
    amount?: true
    payee?: true
    dealId?: true
    propertyId?: true
  }

  export type ExpenseCountAggregateInputType = {
    id?: true
    date?: true
    category?: true
    description?: true
    amount?: true
    payee?: true
    dealId?: true
    propertyId?: true
    _all?: true
  }

  export type ExpenseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which expense to aggregate.
     */
    where?: expenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of expenses to fetch.
     */
    orderBy?: expenseOrderByWithRelationInput | expenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: expenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned expenses
    **/
    _count?: true | ExpenseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExpenseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExpenseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExpenseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExpenseMaxAggregateInputType
  }

  export type GetExpenseAggregateType<T extends ExpenseAggregateArgs> = {
        [P in keyof T & keyof AggregateExpense]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExpense[P]>
      : GetScalarType<T[P], AggregateExpense[P]>
  }




  export type expenseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: expenseWhereInput
    orderBy?: expenseOrderByWithAggregationInput | expenseOrderByWithAggregationInput[]
    by: ExpenseScalarFieldEnum[] | ExpenseScalarFieldEnum
    having?: expenseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExpenseCountAggregateInputType | true
    _avg?: ExpenseAvgAggregateInputType
    _sum?: ExpenseSumAggregateInputType
    _min?: ExpenseMinAggregateInputType
    _max?: ExpenseMaxAggregateInputType
  }

  export type ExpenseGroupByOutputType = {
    id: number
    date: Date
    category: string
    description: string | null
    amount: Decimal
    payee: string | null
    dealId: number | null
    propertyId: number | null
    _count: ExpenseCountAggregateOutputType | null
    _avg: ExpenseAvgAggregateOutputType | null
    _sum: ExpenseSumAggregateOutputType | null
    _min: ExpenseMinAggregateOutputType | null
    _max: ExpenseMaxAggregateOutputType | null
  }

  type GetExpenseGroupByPayload<T extends expenseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExpenseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExpenseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExpenseGroupByOutputType[P]>
            : GetScalarType<T[P], ExpenseGroupByOutputType[P]>
        }
      >
    >


  export type expenseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    category?: boolean
    description?: boolean
    amount?: boolean
    payee?: boolean
    dealId?: boolean
    propertyId?: boolean
    deal?: boolean | expense$dealArgs<ExtArgs>
    property?: boolean | expense$propertyArgs<ExtArgs>
  }, ExtArgs["result"]["expense"]>



  export type expenseSelectScalar = {
    id?: boolean
    date?: boolean
    category?: boolean
    description?: boolean
    amount?: boolean
    payee?: boolean
    dealId?: boolean
    propertyId?: boolean
  }

  export type expenseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "category" | "description" | "amount" | "payee" | "dealId" | "propertyId", ExtArgs["result"]["expense"]>
  export type expenseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    deal?: boolean | expense$dealArgs<ExtArgs>
    property?: boolean | expense$propertyArgs<ExtArgs>
  }

  export type $expensePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "expense"
    objects: {
      deal: Prisma.$dealPayload<ExtArgs> | null
      property: Prisma.$propertyPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      category: string
      description: string | null
      amount: Prisma.Decimal
      payee: string | null
      dealId: number | null
      propertyId: number | null
    }, ExtArgs["result"]["expense"]>
    composites: {}
  }

  type expenseGetPayload<S extends boolean | null | undefined | expenseDefaultArgs> = $Result.GetResult<Prisma.$expensePayload, S>

  type expenseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<expenseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExpenseCountAggregateInputType | true
    }

  export interface expenseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['expense'], meta: { name: 'expense' } }
    /**
     * Find zero or one Expense that matches the filter.
     * @param {expenseFindUniqueArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends expenseFindUniqueArgs>(args: SelectSubset<T, expenseFindUniqueArgs<ExtArgs>>): Prisma__expenseClient<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Expense that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {expenseFindUniqueOrThrowArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends expenseFindUniqueOrThrowArgs>(args: SelectSubset<T, expenseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__expenseClient<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Expense that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expenseFindFirstArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends expenseFindFirstArgs>(args?: SelectSubset<T, expenseFindFirstArgs<ExtArgs>>): Prisma__expenseClient<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Expense that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expenseFindFirstOrThrowArgs} args - Arguments to find a Expense
     * @example
     * // Get one Expense
     * const expense = await prisma.expense.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends expenseFindFirstOrThrowArgs>(args?: SelectSubset<T, expenseFindFirstOrThrowArgs<ExtArgs>>): Prisma__expenseClient<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Expenses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expenseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Expenses
     * const expenses = await prisma.expense.findMany()
     * 
     * // Get first 10 Expenses
     * const expenses = await prisma.expense.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const expenseWithIdOnly = await prisma.expense.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends expenseFindManyArgs>(args?: SelectSubset<T, expenseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Expense.
     * @param {expenseCreateArgs} args - Arguments to create a Expense.
     * @example
     * // Create one Expense
     * const Expense = await prisma.expense.create({
     *   data: {
     *     // ... data to create a Expense
     *   }
     * })
     * 
     */
    create<T extends expenseCreateArgs>(args: SelectSubset<T, expenseCreateArgs<ExtArgs>>): Prisma__expenseClient<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Expenses.
     * @param {expenseCreateManyArgs} args - Arguments to create many Expenses.
     * @example
     * // Create many Expenses
     * const expense = await prisma.expense.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends expenseCreateManyArgs>(args?: SelectSubset<T, expenseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Expense.
     * @param {expenseDeleteArgs} args - Arguments to delete one Expense.
     * @example
     * // Delete one Expense
     * const Expense = await prisma.expense.delete({
     *   where: {
     *     // ... filter to delete one Expense
     *   }
     * })
     * 
     */
    delete<T extends expenseDeleteArgs>(args: SelectSubset<T, expenseDeleteArgs<ExtArgs>>): Prisma__expenseClient<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Expense.
     * @param {expenseUpdateArgs} args - Arguments to update one Expense.
     * @example
     * // Update one Expense
     * const expense = await prisma.expense.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends expenseUpdateArgs>(args: SelectSubset<T, expenseUpdateArgs<ExtArgs>>): Prisma__expenseClient<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Expenses.
     * @param {expenseDeleteManyArgs} args - Arguments to filter Expenses to delete.
     * @example
     * // Delete a few Expenses
     * const { count } = await prisma.expense.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends expenseDeleteManyArgs>(args?: SelectSubset<T, expenseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expenseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Expenses
     * const expense = await prisma.expense.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends expenseUpdateManyArgs>(args: SelectSubset<T, expenseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Expense.
     * @param {expenseUpsertArgs} args - Arguments to update or create a Expense.
     * @example
     * // Update or create a Expense
     * const expense = await prisma.expense.upsert({
     *   create: {
     *     // ... data to create a Expense
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Expense we want to update
     *   }
     * })
     */
    upsert<T extends expenseUpsertArgs>(args: SelectSubset<T, expenseUpsertArgs<ExtArgs>>): Prisma__expenseClient<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Expenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expenseCountArgs} args - Arguments to filter Expenses to count.
     * @example
     * // Count the number of Expenses
     * const count = await prisma.expense.count({
     *   where: {
     *     // ... the filter for the Expenses we want to count
     *   }
     * })
    **/
    count<T extends expenseCountArgs>(
      args?: Subset<T, expenseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExpenseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Expense.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExpenseAggregateArgs>(args: Subset<T, ExpenseAggregateArgs>): Prisma.PrismaPromise<GetExpenseAggregateType<T>>

    /**
     * Group by Expense.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {expenseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends expenseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: expenseGroupByArgs['orderBy'] }
        : { orderBy?: expenseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, expenseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExpenseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the expense model
   */
  readonly fields: expenseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for expense.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__expenseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    deal<T extends expense$dealArgs<ExtArgs> = {}>(args?: Subset<T, expense$dealArgs<ExtArgs>>): Prisma__dealClient<$Result.GetResult<Prisma.$dealPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    property<T extends expense$propertyArgs<ExtArgs> = {}>(args?: Subset<T, expense$propertyArgs<ExtArgs>>): Prisma__propertyClient<$Result.GetResult<Prisma.$propertyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the expense model
   */
  interface expenseFieldRefs {
    readonly id: FieldRef<"expense", 'Int'>
    readonly date: FieldRef<"expense", 'DateTime'>
    readonly category: FieldRef<"expense", 'String'>
    readonly description: FieldRef<"expense", 'String'>
    readonly amount: FieldRef<"expense", 'Decimal'>
    readonly payee: FieldRef<"expense", 'String'>
    readonly dealId: FieldRef<"expense", 'Int'>
    readonly propertyId: FieldRef<"expense", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * expense findUnique
   */
  export type expenseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    /**
     * Filter, which expense to fetch.
     */
    where: expenseWhereUniqueInput
  }

  /**
   * expense findUniqueOrThrow
   */
  export type expenseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    /**
     * Filter, which expense to fetch.
     */
    where: expenseWhereUniqueInput
  }

  /**
   * expense findFirst
   */
  export type expenseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    /**
     * Filter, which expense to fetch.
     */
    where?: expenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of expenses to fetch.
     */
    orderBy?: expenseOrderByWithRelationInput | expenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for expenses.
     */
    cursor?: expenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of expenses.
     */
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * expense findFirstOrThrow
   */
  export type expenseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    /**
     * Filter, which expense to fetch.
     */
    where?: expenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of expenses to fetch.
     */
    orderBy?: expenseOrderByWithRelationInput | expenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for expenses.
     */
    cursor?: expenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` expenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of expenses.
     */
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * expense findMany
   */
  export type expenseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    /**
     * Filter, which expenses to fetch.
     */
    where?: expenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of expenses to fetch.
     */
    orderBy?: expenseOrderByWithRelationInput | expenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing expenses.
     */
    cursor?: expenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` expenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` expenses.
     */
    skip?: number
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * expense create
   */
  export type expenseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    /**
     * The data needed to create a expense.
     */
    data: XOR<expenseCreateInput, expenseUncheckedCreateInput>
  }

  /**
   * expense createMany
   */
  export type expenseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many expenses.
     */
    data: expenseCreateManyInput | expenseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * expense update
   */
  export type expenseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    /**
     * The data needed to update a expense.
     */
    data: XOR<expenseUpdateInput, expenseUncheckedUpdateInput>
    /**
     * Choose, which expense to update.
     */
    where: expenseWhereUniqueInput
  }

  /**
   * expense updateMany
   */
  export type expenseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update expenses.
     */
    data: XOR<expenseUpdateManyMutationInput, expenseUncheckedUpdateManyInput>
    /**
     * Filter which expenses to update
     */
    where?: expenseWhereInput
    /**
     * Limit how many expenses to update.
     */
    limit?: number
  }

  /**
   * expense upsert
   */
  export type expenseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    /**
     * The filter to search for the expense to update in case it exists.
     */
    where: expenseWhereUniqueInput
    /**
     * In case the expense found by the `where` argument doesn't exist, create a new expense with this data.
     */
    create: XOR<expenseCreateInput, expenseUncheckedCreateInput>
    /**
     * In case the expense was found with the provided `where` argument, update it with this data.
     */
    update: XOR<expenseUpdateInput, expenseUncheckedUpdateInput>
  }

  /**
   * expense delete
   */
  export type expenseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    /**
     * Filter which expense to delete.
     */
    where: expenseWhereUniqueInput
  }

  /**
   * expense deleteMany
   */
  export type expenseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which expenses to delete
     */
    where?: expenseWhereInput
    /**
     * Limit how many expenses to delete.
     */
    limit?: number
  }

  /**
   * expense.deal
   */
  export type expense$dealArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deal
     */
    select?: dealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deal
     */
    omit?: dealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dealInclude<ExtArgs> | null
    where?: dealWhereInput
  }

  /**
   * expense.property
   */
  export type expense$propertyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the property
     */
    select?: propertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the property
     */
    omit?: propertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyInclude<ExtArgs> | null
    where?: propertyWhereInput
  }

  /**
   * expense without action
   */
  export type expenseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
  }


  /**
   * Model inquiry
   */

  export type AggregateInquiry = {
    _count: InquiryCountAggregateOutputType | null
    _avg: InquiryAvgAggregateOutputType | null
    _sum: InquirySumAggregateOutputType | null
    _min: InquiryMinAggregateOutputType | null
    _max: InquiryMaxAggregateOutputType | null
  }

  export type InquiryAvgAggregateOutputType = {
    id: number | null
    propertyId: number | null
  }

  export type InquirySumAggregateOutputType = {
    id: number | null
    propertyId: number | null
  }

  export type InquiryMinAggregateOutputType = {
    id: number | null
    propertyId: number | null
    fullName: string | null
    phone: string | null
    email: string | null
    message: string | null
    type: $Enums.inquiry_type | null
    status: $Enums.inquiry_status | null
    createdAt: Date | null
  }

  export type InquiryMaxAggregateOutputType = {
    id: number | null
    propertyId: number | null
    fullName: string | null
    phone: string | null
    email: string | null
    message: string | null
    type: $Enums.inquiry_type | null
    status: $Enums.inquiry_status | null
    createdAt: Date | null
  }

  export type InquiryCountAggregateOutputType = {
    id: number
    propertyId: number
    fullName: number
    phone: number
    email: number
    message: number
    type: number
    status: number
    createdAt: number
    _all: number
  }


  export type InquiryAvgAggregateInputType = {
    id?: true
    propertyId?: true
  }

  export type InquirySumAggregateInputType = {
    id?: true
    propertyId?: true
  }

  export type InquiryMinAggregateInputType = {
    id?: true
    propertyId?: true
    fullName?: true
    phone?: true
    email?: true
    message?: true
    type?: true
    status?: true
    createdAt?: true
  }

  export type InquiryMaxAggregateInputType = {
    id?: true
    propertyId?: true
    fullName?: true
    phone?: true
    email?: true
    message?: true
    type?: true
    status?: true
    createdAt?: true
  }

  export type InquiryCountAggregateInputType = {
    id?: true
    propertyId?: true
    fullName?: true
    phone?: true
    email?: true
    message?: true
    type?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type InquiryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which inquiry to aggregate.
     */
    where?: inquiryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inquiries to fetch.
     */
    orderBy?: inquiryOrderByWithRelationInput | inquiryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: inquiryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inquiries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inquiries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned inquiries
    **/
    _count?: true | InquiryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InquiryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InquirySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InquiryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InquiryMaxAggregateInputType
  }

  export type GetInquiryAggregateType<T extends InquiryAggregateArgs> = {
        [P in keyof T & keyof AggregateInquiry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInquiry[P]>
      : GetScalarType<T[P], AggregateInquiry[P]>
  }




  export type inquiryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: inquiryWhereInput
    orderBy?: inquiryOrderByWithAggregationInput | inquiryOrderByWithAggregationInput[]
    by: InquiryScalarFieldEnum[] | InquiryScalarFieldEnum
    having?: inquiryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InquiryCountAggregateInputType | true
    _avg?: InquiryAvgAggregateInputType
    _sum?: InquirySumAggregateInputType
    _min?: InquiryMinAggregateInputType
    _max?: InquiryMaxAggregateInputType
  }

  export type InquiryGroupByOutputType = {
    id: number
    propertyId: number
    fullName: string
    phone: string | null
    email: string | null
    message: string | null
    type: $Enums.inquiry_type
    status: $Enums.inquiry_status
    createdAt: Date
    _count: InquiryCountAggregateOutputType | null
    _avg: InquiryAvgAggregateOutputType | null
    _sum: InquirySumAggregateOutputType | null
    _min: InquiryMinAggregateOutputType | null
    _max: InquiryMaxAggregateOutputType | null
  }

  type GetInquiryGroupByPayload<T extends inquiryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InquiryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InquiryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InquiryGroupByOutputType[P]>
            : GetScalarType<T[P], InquiryGroupByOutputType[P]>
        }
      >
    >


  export type inquirySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    propertyId?: boolean
    fullName?: boolean
    phone?: boolean
    email?: boolean
    message?: boolean
    type?: boolean
    status?: boolean
    createdAt?: boolean
    property?: boolean | propertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inquiry"]>



  export type inquirySelectScalar = {
    id?: boolean
    propertyId?: boolean
    fullName?: boolean
    phone?: boolean
    email?: boolean
    message?: boolean
    type?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type inquiryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "propertyId" | "fullName" | "phone" | "email" | "message" | "type" | "status" | "createdAt", ExtArgs["result"]["inquiry"]>
  export type inquiryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    property?: boolean | propertyDefaultArgs<ExtArgs>
  }

  export type $inquiryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "inquiry"
    objects: {
      property: Prisma.$propertyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      propertyId: number
      fullName: string
      phone: string | null
      email: string | null
      message: string | null
      type: $Enums.inquiry_type
      status: $Enums.inquiry_status
      createdAt: Date
    }, ExtArgs["result"]["inquiry"]>
    composites: {}
  }

  type inquiryGetPayload<S extends boolean | null | undefined | inquiryDefaultArgs> = $Result.GetResult<Prisma.$inquiryPayload, S>

  type inquiryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<inquiryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InquiryCountAggregateInputType | true
    }

  export interface inquiryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['inquiry'], meta: { name: 'inquiry' } }
    /**
     * Find zero or one Inquiry that matches the filter.
     * @param {inquiryFindUniqueArgs} args - Arguments to find a Inquiry
     * @example
     * // Get one Inquiry
     * const inquiry = await prisma.inquiry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends inquiryFindUniqueArgs>(args: SelectSubset<T, inquiryFindUniqueArgs<ExtArgs>>): Prisma__inquiryClient<$Result.GetResult<Prisma.$inquiryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Inquiry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {inquiryFindUniqueOrThrowArgs} args - Arguments to find a Inquiry
     * @example
     * // Get one Inquiry
     * const inquiry = await prisma.inquiry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends inquiryFindUniqueOrThrowArgs>(args: SelectSubset<T, inquiryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__inquiryClient<$Result.GetResult<Prisma.$inquiryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Inquiry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inquiryFindFirstArgs} args - Arguments to find a Inquiry
     * @example
     * // Get one Inquiry
     * const inquiry = await prisma.inquiry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends inquiryFindFirstArgs>(args?: SelectSubset<T, inquiryFindFirstArgs<ExtArgs>>): Prisma__inquiryClient<$Result.GetResult<Prisma.$inquiryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Inquiry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inquiryFindFirstOrThrowArgs} args - Arguments to find a Inquiry
     * @example
     * // Get one Inquiry
     * const inquiry = await prisma.inquiry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends inquiryFindFirstOrThrowArgs>(args?: SelectSubset<T, inquiryFindFirstOrThrowArgs<ExtArgs>>): Prisma__inquiryClient<$Result.GetResult<Prisma.$inquiryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Inquiries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inquiryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inquiries
     * const inquiries = await prisma.inquiry.findMany()
     * 
     * // Get first 10 Inquiries
     * const inquiries = await prisma.inquiry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inquiryWithIdOnly = await prisma.inquiry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends inquiryFindManyArgs>(args?: SelectSubset<T, inquiryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$inquiryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Inquiry.
     * @param {inquiryCreateArgs} args - Arguments to create a Inquiry.
     * @example
     * // Create one Inquiry
     * const Inquiry = await prisma.inquiry.create({
     *   data: {
     *     // ... data to create a Inquiry
     *   }
     * })
     * 
     */
    create<T extends inquiryCreateArgs>(args: SelectSubset<T, inquiryCreateArgs<ExtArgs>>): Prisma__inquiryClient<$Result.GetResult<Prisma.$inquiryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Inquiries.
     * @param {inquiryCreateManyArgs} args - Arguments to create many Inquiries.
     * @example
     * // Create many Inquiries
     * const inquiry = await prisma.inquiry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends inquiryCreateManyArgs>(args?: SelectSubset<T, inquiryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Inquiry.
     * @param {inquiryDeleteArgs} args - Arguments to delete one Inquiry.
     * @example
     * // Delete one Inquiry
     * const Inquiry = await prisma.inquiry.delete({
     *   where: {
     *     // ... filter to delete one Inquiry
     *   }
     * })
     * 
     */
    delete<T extends inquiryDeleteArgs>(args: SelectSubset<T, inquiryDeleteArgs<ExtArgs>>): Prisma__inquiryClient<$Result.GetResult<Prisma.$inquiryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Inquiry.
     * @param {inquiryUpdateArgs} args - Arguments to update one Inquiry.
     * @example
     * // Update one Inquiry
     * const inquiry = await prisma.inquiry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends inquiryUpdateArgs>(args: SelectSubset<T, inquiryUpdateArgs<ExtArgs>>): Prisma__inquiryClient<$Result.GetResult<Prisma.$inquiryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Inquiries.
     * @param {inquiryDeleteManyArgs} args - Arguments to filter Inquiries to delete.
     * @example
     * // Delete a few Inquiries
     * const { count } = await prisma.inquiry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends inquiryDeleteManyArgs>(args?: SelectSubset<T, inquiryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inquiries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inquiryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inquiries
     * const inquiry = await prisma.inquiry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends inquiryUpdateManyArgs>(args: SelectSubset<T, inquiryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Inquiry.
     * @param {inquiryUpsertArgs} args - Arguments to update or create a Inquiry.
     * @example
     * // Update or create a Inquiry
     * const inquiry = await prisma.inquiry.upsert({
     *   create: {
     *     // ... data to create a Inquiry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inquiry we want to update
     *   }
     * })
     */
    upsert<T extends inquiryUpsertArgs>(args: SelectSubset<T, inquiryUpsertArgs<ExtArgs>>): Prisma__inquiryClient<$Result.GetResult<Prisma.$inquiryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Inquiries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inquiryCountArgs} args - Arguments to filter Inquiries to count.
     * @example
     * // Count the number of Inquiries
     * const count = await prisma.inquiry.count({
     *   where: {
     *     // ... the filter for the Inquiries we want to count
     *   }
     * })
    **/
    count<T extends inquiryCountArgs>(
      args?: Subset<T, inquiryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InquiryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inquiry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InquiryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InquiryAggregateArgs>(args: Subset<T, InquiryAggregateArgs>): Prisma.PrismaPromise<GetInquiryAggregateType<T>>

    /**
     * Group by Inquiry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inquiryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends inquiryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: inquiryGroupByArgs['orderBy'] }
        : { orderBy?: inquiryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, inquiryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInquiryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the inquiry model
   */
  readonly fields: inquiryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for inquiry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__inquiryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    property<T extends propertyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, propertyDefaultArgs<ExtArgs>>): Prisma__propertyClient<$Result.GetResult<Prisma.$propertyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the inquiry model
   */
  interface inquiryFieldRefs {
    readonly id: FieldRef<"inquiry", 'Int'>
    readonly propertyId: FieldRef<"inquiry", 'Int'>
    readonly fullName: FieldRef<"inquiry", 'String'>
    readonly phone: FieldRef<"inquiry", 'String'>
    readonly email: FieldRef<"inquiry", 'String'>
    readonly message: FieldRef<"inquiry", 'String'>
    readonly type: FieldRef<"inquiry", 'inquiry_type'>
    readonly status: FieldRef<"inquiry", 'inquiry_status'>
    readonly createdAt: FieldRef<"inquiry", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * inquiry findUnique
   */
  export type inquiryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inquiry
     */
    select?: inquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inquiry
     */
    omit?: inquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inquiryInclude<ExtArgs> | null
    /**
     * Filter, which inquiry to fetch.
     */
    where: inquiryWhereUniqueInput
  }

  /**
   * inquiry findUniqueOrThrow
   */
  export type inquiryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inquiry
     */
    select?: inquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inquiry
     */
    omit?: inquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inquiryInclude<ExtArgs> | null
    /**
     * Filter, which inquiry to fetch.
     */
    where: inquiryWhereUniqueInput
  }

  /**
   * inquiry findFirst
   */
  export type inquiryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inquiry
     */
    select?: inquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inquiry
     */
    omit?: inquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inquiryInclude<ExtArgs> | null
    /**
     * Filter, which inquiry to fetch.
     */
    where?: inquiryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inquiries to fetch.
     */
    orderBy?: inquiryOrderByWithRelationInput | inquiryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for inquiries.
     */
    cursor?: inquiryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inquiries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inquiries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of inquiries.
     */
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * inquiry findFirstOrThrow
   */
  export type inquiryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inquiry
     */
    select?: inquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inquiry
     */
    omit?: inquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inquiryInclude<ExtArgs> | null
    /**
     * Filter, which inquiry to fetch.
     */
    where?: inquiryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inquiries to fetch.
     */
    orderBy?: inquiryOrderByWithRelationInput | inquiryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for inquiries.
     */
    cursor?: inquiryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inquiries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inquiries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of inquiries.
     */
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * inquiry findMany
   */
  export type inquiryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inquiry
     */
    select?: inquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inquiry
     */
    omit?: inquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inquiryInclude<ExtArgs> | null
    /**
     * Filter, which inquiries to fetch.
     */
    where?: inquiryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inquiries to fetch.
     */
    orderBy?: inquiryOrderByWithRelationInput | inquiryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing inquiries.
     */
    cursor?: inquiryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inquiries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inquiries.
     */
    skip?: number
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * inquiry create
   */
  export type inquiryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inquiry
     */
    select?: inquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inquiry
     */
    omit?: inquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inquiryInclude<ExtArgs> | null
    /**
     * The data needed to create a inquiry.
     */
    data: XOR<inquiryCreateInput, inquiryUncheckedCreateInput>
  }

  /**
   * inquiry createMany
   */
  export type inquiryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many inquiries.
     */
    data: inquiryCreateManyInput | inquiryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * inquiry update
   */
  export type inquiryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inquiry
     */
    select?: inquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inquiry
     */
    omit?: inquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inquiryInclude<ExtArgs> | null
    /**
     * The data needed to update a inquiry.
     */
    data: XOR<inquiryUpdateInput, inquiryUncheckedUpdateInput>
    /**
     * Choose, which inquiry to update.
     */
    where: inquiryWhereUniqueInput
  }

  /**
   * inquiry updateMany
   */
  export type inquiryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update inquiries.
     */
    data: XOR<inquiryUpdateManyMutationInput, inquiryUncheckedUpdateManyInput>
    /**
     * Filter which inquiries to update
     */
    where?: inquiryWhereInput
    /**
     * Limit how many inquiries to update.
     */
    limit?: number
  }

  /**
   * inquiry upsert
   */
  export type inquiryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inquiry
     */
    select?: inquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inquiry
     */
    omit?: inquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inquiryInclude<ExtArgs> | null
    /**
     * The filter to search for the inquiry to update in case it exists.
     */
    where: inquiryWhereUniqueInput
    /**
     * In case the inquiry found by the `where` argument doesn't exist, create a new inquiry with this data.
     */
    create: XOR<inquiryCreateInput, inquiryUncheckedCreateInput>
    /**
     * In case the inquiry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<inquiryUpdateInput, inquiryUncheckedUpdateInput>
  }

  /**
   * inquiry delete
   */
  export type inquiryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inquiry
     */
    select?: inquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inquiry
     */
    omit?: inquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inquiryInclude<ExtArgs> | null
    /**
     * Filter which inquiry to delete.
     */
    where: inquiryWhereUniqueInput
  }

  /**
   * inquiry deleteMany
   */
  export type inquiryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which inquiries to delete
     */
    where?: inquiryWhereInput
    /**
     * Limit how many inquiries to delete.
     */
    limit?: number
  }

  /**
   * inquiry without action
   */
  export type inquiryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inquiry
     */
    select?: inquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inquiry
     */
    omit?: inquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inquiryInclude<ExtArgs> | null
  }


  /**
   * Model invoice
   */

  export type AggregateInvoice = {
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  export type InvoiceAvgAggregateOutputType = {
    id: number | null
    amount: Decimal | null
    dealId: number | null
  }

  export type InvoiceSumAggregateOutputType = {
    id: number | null
    amount: Decimal | null
    dealId: number | null
  }

  export type InvoiceMinAggregateOutputType = {
    id: number | null
    number: string | null
    issueDate: Date | null
    dueDate: Date | null
    amount: Decimal | null
    status: string | null
    dealId: number | null
  }

  export type InvoiceMaxAggregateOutputType = {
    id: number | null
    number: string | null
    issueDate: Date | null
    dueDate: Date | null
    amount: Decimal | null
    status: string | null
    dealId: number | null
  }

  export type InvoiceCountAggregateOutputType = {
    id: number
    number: number
    issueDate: number
    dueDate: number
    amount: number
    status: number
    dealId: number
    _all: number
  }


  export type InvoiceAvgAggregateInputType = {
    id?: true
    amount?: true
    dealId?: true
  }

  export type InvoiceSumAggregateInputType = {
    id?: true
    amount?: true
    dealId?: true
  }

  export type InvoiceMinAggregateInputType = {
    id?: true
    number?: true
    issueDate?: true
    dueDate?: true
    amount?: true
    status?: true
    dealId?: true
  }

  export type InvoiceMaxAggregateInputType = {
    id?: true
    number?: true
    issueDate?: true
    dueDate?: true
    amount?: true
    status?: true
    dealId?: true
  }

  export type InvoiceCountAggregateInputType = {
    id?: true
    number?: true
    issueDate?: true
    dueDate?: true
    amount?: true
    status?: true
    dealId?: true
    _all?: true
  }

  export type InvoiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which invoice to aggregate.
     */
    where?: invoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of invoices to fetch.
     */
    orderBy?: invoiceOrderByWithRelationInput | invoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: invoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned invoices
    **/
    _count?: true | InvoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvoiceMaxAggregateInputType
  }

  export type GetInvoiceAggregateType<T extends InvoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateInvoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvoice[P]>
      : GetScalarType<T[P], AggregateInvoice[P]>
  }




  export type invoiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: invoiceWhereInput
    orderBy?: invoiceOrderByWithAggregationInput | invoiceOrderByWithAggregationInput[]
    by: InvoiceScalarFieldEnum[] | InvoiceScalarFieldEnum
    having?: invoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvoiceCountAggregateInputType | true
    _avg?: InvoiceAvgAggregateInputType
    _sum?: InvoiceSumAggregateInputType
    _min?: InvoiceMinAggregateInputType
    _max?: InvoiceMaxAggregateInputType
  }

  export type InvoiceGroupByOutputType = {
    id: number
    number: string
    issueDate: Date
    dueDate: Date | null
    amount: Decimal
    status: string
    dealId: number
    _count: InvoiceCountAggregateOutputType | null
    _avg: InvoiceAvgAggregateOutputType | null
    _sum: InvoiceSumAggregateOutputType | null
    _min: InvoiceMinAggregateOutputType | null
    _max: InvoiceMaxAggregateOutputType | null
  }

  type GetInvoiceGroupByPayload<T extends invoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
            : GetScalarType<T[P], InvoiceGroupByOutputType[P]>
        }
      >
    >


  export type invoiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    issueDate?: boolean
    dueDate?: boolean
    amount?: boolean
    status?: boolean
    dealId?: boolean
    deal?: boolean | dealDefaultArgs<ExtArgs>
    payments?: boolean | invoice$paymentsArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invoice"]>



  export type invoiceSelectScalar = {
    id?: boolean
    number?: boolean
    issueDate?: boolean
    dueDate?: boolean
    amount?: boolean
    status?: boolean
    dealId?: boolean
  }

  export type invoiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "number" | "issueDate" | "dueDate" | "amount" | "status" | "dealId", ExtArgs["result"]["invoice"]>
  export type invoiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    deal?: boolean | dealDefaultArgs<ExtArgs>
    payments?: boolean | invoice$paymentsArgs<ExtArgs>
    _count?: boolean | InvoiceCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $invoicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "invoice"
    objects: {
      deal: Prisma.$dealPayload<ExtArgs>
      payments: Prisma.$paymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      number: string
      issueDate: Date
      dueDate: Date | null
      amount: Prisma.Decimal
      status: string
      dealId: number
    }, ExtArgs["result"]["invoice"]>
    composites: {}
  }

  type invoiceGetPayload<S extends boolean | null | undefined | invoiceDefaultArgs> = $Result.GetResult<Prisma.$invoicePayload, S>

  type invoiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<invoiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvoiceCountAggregateInputType | true
    }

  export interface invoiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['invoice'], meta: { name: 'invoice' } }
    /**
     * Find zero or one Invoice that matches the filter.
     * @param {invoiceFindUniqueArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends invoiceFindUniqueArgs>(args: SelectSubset<T, invoiceFindUniqueArgs<ExtArgs>>): Prisma__invoiceClient<$Result.GetResult<Prisma.$invoicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Invoice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {invoiceFindUniqueOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends invoiceFindUniqueOrThrowArgs>(args: SelectSubset<T, invoiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__invoiceClient<$Result.GetResult<Prisma.$invoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {invoiceFindFirstArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends invoiceFindFirstArgs>(args?: SelectSubset<T, invoiceFindFirstArgs<ExtArgs>>): Prisma__invoiceClient<$Result.GetResult<Prisma.$invoicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invoice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {invoiceFindFirstOrThrowArgs} args - Arguments to find a Invoice
     * @example
     * // Get one Invoice
     * const invoice = await prisma.invoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends invoiceFindFirstOrThrowArgs>(args?: SelectSubset<T, invoiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__invoiceClient<$Result.GetResult<Prisma.$invoicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Invoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {invoiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invoices
     * const invoices = await prisma.invoice.findMany()
     * 
     * // Get first 10 Invoices
     * const invoices = await prisma.invoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const invoiceWithIdOnly = await prisma.invoice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends invoiceFindManyArgs>(args?: SelectSubset<T, invoiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$invoicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Invoice.
     * @param {invoiceCreateArgs} args - Arguments to create a Invoice.
     * @example
     * // Create one Invoice
     * const Invoice = await prisma.invoice.create({
     *   data: {
     *     // ... data to create a Invoice
     *   }
     * })
     * 
     */
    create<T extends invoiceCreateArgs>(args: SelectSubset<T, invoiceCreateArgs<ExtArgs>>): Prisma__invoiceClient<$Result.GetResult<Prisma.$invoicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Invoices.
     * @param {invoiceCreateManyArgs} args - Arguments to create many Invoices.
     * @example
     * // Create many Invoices
     * const invoice = await prisma.invoice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends invoiceCreateManyArgs>(args?: SelectSubset<T, invoiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Invoice.
     * @param {invoiceDeleteArgs} args - Arguments to delete one Invoice.
     * @example
     * // Delete one Invoice
     * const Invoice = await prisma.invoice.delete({
     *   where: {
     *     // ... filter to delete one Invoice
     *   }
     * })
     * 
     */
    delete<T extends invoiceDeleteArgs>(args: SelectSubset<T, invoiceDeleteArgs<ExtArgs>>): Prisma__invoiceClient<$Result.GetResult<Prisma.$invoicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Invoice.
     * @param {invoiceUpdateArgs} args - Arguments to update one Invoice.
     * @example
     * // Update one Invoice
     * const invoice = await prisma.invoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends invoiceUpdateArgs>(args: SelectSubset<T, invoiceUpdateArgs<ExtArgs>>): Prisma__invoiceClient<$Result.GetResult<Prisma.$invoicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Invoices.
     * @param {invoiceDeleteManyArgs} args - Arguments to filter Invoices to delete.
     * @example
     * // Delete a few Invoices
     * const { count } = await prisma.invoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends invoiceDeleteManyArgs>(args?: SelectSubset<T, invoiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {invoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invoices
     * const invoice = await prisma.invoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends invoiceUpdateManyArgs>(args: SelectSubset<T, invoiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Invoice.
     * @param {invoiceUpsertArgs} args - Arguments to update or create a Invoice.
     * @example
     * // Update or create a Invoice
     * const invoice = await prisma.invoice.upsert({
     *   create: {
     *     // ... data to create a Invoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invoice we want to update
     *   }
     * })
     */
    upsert<T extends invoiceUpsertArgs>(args: SelectSubset<T, invoiceUpsertArgs<ExtArgs>>): Prisma__invoiceClient<$Result.GetResult<Prisma.$invoicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Invoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {invoiceCountArgs} args - Arguments to filter Invoices to count.
     * @example
     * // Count the number of Invoices
     * const count = await prisma.invoice.count({
     *   where: {
     *     // ... the filter for the Invoices we want to count
     *   }
     * })
    **/
    count<T extends invoiceCountArgs>(
      args?: Subset<T, invoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvoiceAggregateArgs>(args: Subset<T, InvoiceAggregateArgs>): Prisma.PrismaPromise<GetInvoiceAggregateType<T>>

    /**
     * Group by Invoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {invoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends invoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: invoiceGroupByArgs['orderBy'] }
        : { orderBy?: invoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, invoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the invoice model
   */
  readonly fields: invoiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for invoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__invoiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    deal<T extends dealDefaultArgs<ExtArgs> = {}>(args?: Subset<T, dealDefaultArgs<ExtArgs>>): Prisma__dealClient<$Result.GetResult<Prisma.$dealPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payments<T extends invoice$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, invoice$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the invoice model
   */
  interface invoiceFieldRefs {
    readonly id: FieldRef<"invoice", 'Int'>
    readonly number: FieldRef<"invoice", 'String'>
    readonly issueDate: FieldRef<"invoice", 'DateTime'>
    readonly dueDate: FieldRef<"invoice", 'DateTime'>
    readonly amount: FieldRef<"invoice", 'Decimal'>
    readonly status: FieldRef<"invoice", 'String'>
    readonly dealId: FieldRef<"invoice", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * invoice findUnique
   */
  export type invoiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the invoice
     */
    select?: invoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the invoice
     */
    omit?: invoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: invoiceInclude<ExtArgs> | null
    /**
     * Filter, which invoice to fetch.
     */
    where: invoiceWhereUniqueInput
  }

  /**
   * invoice findUniqueOrThrow
   */
  export type invoiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the invoice
     */
    select?: invoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the invoice
     */
    omit?: invoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: invoiceInclude<ExtArgs> | null
    /**
     * Filter, which invoice to fetch.
     */
    where: invoiceWhereUniqueInput
  }

  /**
   * invoice findFirst
   */
  export type invoiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the invoice
     */
    select?: invoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the invoice
     */
    omit?: invoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: invoiceInclude<ExtArgs> | null
    /**
     * Filter, which invoice to fetch.
     */
    where?: invoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of invoices to fetch.
     */
    orderBy?: invoiceOrderByWithRelationInput | invoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for invoices.
     */
    cursor?: invoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * invoice findFirstOrThrow
   */
  export type invoiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the invoice
     */
    select?: invoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the invoice
     */
    omit?: invoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: invoiceInclude<ExtArgs> | null
    /**
     * Filter, which invoice to fetch.
     */
    where?: invoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of invoices to fetch.
     */
    orderBy?: invoiceOrderByWithRelationInput | invoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for invoices.
     */
    cursor?: invoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` invoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of invoices.
     */
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * invoice findMany
   */
  export type invoiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the invoice
     */
    select?: invoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the invoice
     */
    omit?: invoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: invoiceInclude<ExtArgs> | null
    /**
     * Filter, which invoices to fetch.
     */
    where?: invoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of invoices to fetch.
     */
    orderBy?: invoiceOrderByWithRelationInput | invoiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing invoices.
     */
    cursor?: invoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` invoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` invoices.
     */
    skip?: number
    distinct?: InvoiceScalarFieldEnum | InvoiceScalarFieldEnum[]
  }

  /**
   * invoice create
   */
  export type invoiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the invoice
     */
    select?: invoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the invoice
     */
    omit?: invoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: invoiceInclude<ExtArgs> | null
    /**
     * The data needed to create a invoice.
     */
    data: XOR<invoiceCreateInput, invoiceUncheckedCreateInput>
  }

  /**
   * invoice createMany
   */
  export type invoiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many invoices.
     */
    data: invoiceCreateManyInput | invoiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * invoice update
   */
  export type invoiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the invoice
     */
    select?: invoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the invoice
     */
    omit?: invoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: invoiceInclude<ExtArgs> | null
    /**
     * The data needed to update a invoice.
     */
    data: XOR<invoiceUpdateInput, invoiceUncheckedUpdateInput>
    /**
     * Choose, which invoice to update.
     */
    where: invoiceWhereUniqueInput
  }

  /**
   * invoice updateMany
   */
  export type invoiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update invoices.
     */
    data: XOR<invoiceUpdateManyMutationInput, invoiceUncheckedUpdateManyInput>
    /**
     * Filter which invoices to update
     */
    where?: invoiceWhereInput
    /**
     * Limit how many invoices to update.
     */
    limit?: number
  }

  /**
   * invoice upsert
   */
  export type invoiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the invoice
     */
    select?: invoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the invoice
     */
    omit?: invoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: invoiceInclude<ExtArgs> | null
    /**
     * The filter to search for the invoice to update in case it exists.
     */
    where: invoiceWhereUniqueInput
    /**
     * In case the invoice found by the `where` argument doesn't exist, create a new invoice with this data.
     */
    create: XOR<invoiceCreateInput, invoiceUncheckedCreateInput>
    /**
     * In case the invoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<invoiceUpdateInput, invoiceUncheckedUpdateInput>
  }

  /**
   * invoice delete
   */
  export type invoiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the invoice
     */
    select?: invoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the invoice
     */
    omit?: invoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: invoiceInclude<ExtArgs> | null
    /**
     * Filter which invoice to delete.
     */
    where: invoiceWhereUniqueInput
  }

  /**
   * invoice deleteMany
   */
  export type invoiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which invoices to delete
     */
    where?: invoiceWhereInput
    /**
     * Limit how many invoices to delete.
     */
    limit?: number
  }

  /**
   * invoice.payments
   */
  export type invoice$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    where?: paymentWhereInput
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    cursor?: paymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * invoice without action
   */
  export type invoiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the invoice
     */
    select?: invoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the invoice
     */
    omit?: invoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: invoiceInclude<ExtArgs> | null
  }


  /**
   * Model pagecontent
   */

  export type AggregatePagecontent = {
    _count: PagecontentCountAggregateOutputType | null
    _avg: PagecontentAvgAggregateOutputType | null
    _sum: PagecontentSumAggregateOutputType | null
    _min: PagecontentMinAggregateOutputType | null
    _max: PagecontentMaxAggregateOutputType | null
  }

  export type PagecontentAvgAggregateOutputType = {
    id: number | null
  }

  export type PagecontentSumAggregateOutputType = {
    id: number | null
  }

  export type PagecontentMinAggregateOutputType = {
    id: number | null
    page: string | null
    section: string | null
    key: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PagecontentMaxAggregateOutputType = {
    id: number | null
    page: string | null
    section: string | null
    key: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PagecontentCountAggregateOutputType = {
    id: number
    page: number
    section: number
    key: number
    value: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PagecontentAvgAggregateInputType = {
    id?: true
  }

  export type PagecontentSumAggregateInputType = {
    id?: true
  }

  export type PagecontentMinAggregateInputType = {
    id?: true
    page?: true
    section?: true
    key?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PagecontentMaxAggregateInputType = {
    id?: true
    page?: true
    section?: true
    key?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PagecontentCountAggregateInputType = {
    id?: true
    page?: true
    section?: true
    key?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PagecontentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which pagecontent to aggregate.
     */
    where?: pagecontentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pagecontents to fetch.
     */
    orderBy?: pagecontentOrderByWithRelationInput | pagecontentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: pagecontentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pagecontents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pagecontents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned pagecontents
    **/
    _count?: true | PagecontentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PagecontentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PagecontentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PagecontentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PagecontentMaxAggregateInputType
  }

  export type GetPagecontentAggregateType<T extends PagecontentAggregateArgs> = {
        [P in keyof T & keyof AggregatePagecontent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePagecontent[P]>
      : GetScalarType<T[P], AggregatePagecontent[P]>
  }




  export type pagecontentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: pagecontentWhereInput
    orderBy?: pagecontentOrderByWithAggregationInput | pagecontentOrderByWithAggregationInput[]
    by: PagecontentScalarFieldEnum[] | PagecontentScalarFieldEnum
    having?: pagecontentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PagecontentCountAggregateInputType | true
    _avg?: PagecontentAvgAggregateInputType
    _sum?: PagecontentSumAggregateInputType
    _min?: PagecontentMinAggregateInputType
    _max?: PagecontentMaxAggregateInputType
  }

  export type PagecontentGroupByOutputType = {
    id: number
    page: string
    section: string
    key: string
    value: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: PagecontentCountAggregateOutputType | null
    _avg: PagecontentAvgAggregateOutputType | null
    _sum: PagecontentSumAggregateOutputType | null
    _min: PagecontentMinAggregateOutputType | null
    _max: PagecontentMaxAggregateOutputType | null
  }

  type GetPagecontentGroupByPayload<T extends pagecontentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PagecontentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PagecontentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PagecontentGroupByOutputType[P]>
            : GetScalarType<T[P], PagecontentGroupByOutputType[P]>
        }
      >
    >


  export type pagecontentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    page?: boolean
    section?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["pagecontent"]>



  export type pagecontentSelectScalar = {
    id?: boolean
    page?: boolean
    section?: boolean
    key?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type pagecontentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "page" | "section" | "key" | "value" | "createdAt" | "updatedAt", ExtArgs["result"]["pagecontent"]>

  export type $pagecontentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "pagecontent"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      page: string
      section: string
      key: string
      value: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pagecontent"]>
    composites: {}
  }

  type pagecontentGetPayload<S extends boolean | null | undefined | pagecontentDefaultArgs> = $Result.GetResult<Prisma.$pagecontentPayload, S>

  type pagecontentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<pagecontentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PagecontentCountAggregateInputType | true
    }

  export interface pagecontentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['pagecontent'], meta: { name: 'pagecontent' } }
    /**
     * Find zero or one Pagecontent that matches the filter.
     * @param {pagecontentFindUniqueArgs} args - Arguments to find a Pagecontent
     * @example
     * // Get one Pagecontent
     * const pagecontent = await prisma.pagecontent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends pagecontentFindUniqueArgs>(args: SelectSubset<T, pagecontentFindUniqueArgs<ExtArgs>>): Prisma__pagecontentClient<$Result.GetResult<Prisma.$pagecontentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Pagecontent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {pagecontentFindUniqueOrThrowArgs} args - Arguments to find a Pagecontent
     * @example
     * // Get one Pagecontent
     * const pagecontent = await prisma.pagecontent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends pagecontentFindUniqueOrThrowArgs>(args: SelectSubset<T, pagecontentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__pagecontentClient<$Result.GetResult<Prisma.$pagecontentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pagecontent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagecontentFindFirstArgs} args - Arguments to find a Pagecontent
     * @example
     * // Get one Pagecontent
     * const pagecontent = await prisma.pagecontent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends pagecontentFindFirstArgs>(args?: SelectSubset<T, pagecontentFindFirstArgs<ExtArgs>>): Prisma__pagecontentClient<$Result.GetResult<Prisma.$pagecontentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pagecontent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagecontentFindFirstOrThrowArgs} args - Arguments to find a Pagecontent
     * @example
     * // Get one Pagecontent
     * const pagecontent = await prisma.pagecontent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends pagecontentFindFirstOrThrowArgs>(args?: SelectSubset<T, pagecontentFindFirstOrThrowArgs<ExtArgs>>): Prisma__pagecontentClient<$Result.GetResult<Prisma.$pagecontentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pagecontents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagecontentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pagecontents
     * const pagecontents = await prisma.pagecontent.findMany()
     * 
     * // Get first 10 Pagecontents
     * const pagecontents = await prisma.pagecontent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pagecontentWithIdOnly = await prisma.pagecontent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends pagecontentFindManyArgs>(args?: SelectSubset<T, pagecontentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$pagecontentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Pagecontent.
     * @param {pagecontentCreateArgs} args - Arguments to create a Pagecontent.
     * @example
     * // Create one Pagecontent
     * const Pagecontent = await prisma.pagecontent.create({
     *   data: {
     *     // ... data to create a Pagecontent
     *   }
     * })
     * 
     */
    create<T extends pagecontentCreateArgs>(args: SelectSubset<T, pagecontentCreateArgs<ExtArgs>>): Prisma__pagecontentClient<$Result.GetResult<Prisma.$pagecontentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pagecontents.
     * @param {pagecontentCreateManyArgs} args - Arguments to create many Pagecontents.
     * @example
     * // Create many Pagecontents
     * const pagecontent = await prisma.pagecontent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends pagecontentCreateManyArgs>(args?: SelectSubset<T, pagecontentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pagecontent.
     * @param {pagecontentDeleteArgs} args - Arguments to delete one Pagecontent.
     * @example
     * // Delete one Pagecontent
     * const Pagecontent = await prisma.pagecontent.delete({
     *   where: {
     *     // ... filter to delete one Pagecontent
     *   }
     * })
     * 
     */
    delete<T extends pagecontentDeleteArgs>(args: SelectSubset<T, pagecontentDeleteArgs<ExtArgs>>): Prisma__pagecontentClient<$Result.GetResult<Prisma.$pagecontentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Pagecontent.
     * @param {pagecontentUpdateArgs} args - Arguments to update one Pagecontent.
     * @example
     * // Update one Pagecontent
     * const pagecontent = await prisma.pagecontent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends pagecontentUpdateArgs>(args: SelectSubset<T, pagecontentUpdateArgs<ExtArgs>>): Prisma__pagecontentClient<$Result.GetResult<Prisma.$pagecontentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pagecontents.
     * @param {pagecontentDeleteManyArgs} args - Arguments to filter Pagecontents to delete.
     * @example
     * // Delete a few Pagecontents
     * const { count } = await prisma.pagecontent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends pagecontentDeleteManyArgs>(args?: SelectSubset<T, pagecontentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pagecontents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagecontentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pagecontents
     * const pagecontent = await prisma.pagecontent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends pagecontentUpdateManyArgs>(args: SelectSubset<T, pagecontentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pagecontent.
     * @param {pagecontentUpsertArgs} args - Arguments to update or create a Pagecontent.
     * @example
     * // Update or create a Pagecontent
     * const pagecontent = await prisma.pagecontent.upsert({
     *   create: {
     *     // ... data to create a Pagecontent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pagecontent we want to update
     *   }
     * })
     */
    upsert<T extends pagecontentUpsertArgs>(args: SelectSubset<T, pagecontentUpsertArgs<ExtArgs>>): Prisma__pagecontentClient<$Result.GetResult<Prisma.$pagecontentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pagecontents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagecontentCountArgs} args - Arguments to filter Pagecontents to count.
     * @example
     * // Count the number of Pagecontents
     * const count = await prisma.pagecontent.count({
     *   where: {
     *     // ... the filter for the Pagecontents we want to count
     *   }
     * })
    **/
    count<T extends pagecontentCountArgs>(
      args?: Subset<T, pagecontentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PagecontentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pagecontent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PagecontentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PagecontentAggregateArgs>(args: Subset<T, PagecontentAggregateArgs>): Prisma.PrismaPromise<GetPagecontentAggregateType<T>>

    /**
     * Group by Pagecontent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {pagecontentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends pagecontentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: pagecontentGroupByArgs['orderBy'] }
        : { orderBy?: pagecontentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, pagecontentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPagecontentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the pagecontent model
   */
  readonly fields: pagecontentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for pagecontent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__pagecontentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the pagecontent model
   */
  interface pagecontentFieldRefs {
    readonly id: FieldRef<"pagecontent", 'Int'>
    readonly page: FieldRef<"pagecontent", 'String'>
    readonly section: FieldRef<"pagecontent", 'String'>
    readonly key: FieldRef<"pagecontent", 'String'>
    readonly value: FieldRef<"pagecontent", 'Json'>
    readonly createdAt: FieldRef<"pagecontent", 'DateTime'>
    readonly updatedAt: FieldRef<"pagecontent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * pagecontent findUnique
   */
  export type pagecontentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagecontent
     */
    select?: pagecontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pagecontent
     */
    omit?: pagecontentOmit<ExtArgs> | null
    /**
     * Filter, which pagecontent to fetch.
     */
    where: pagecontentWhereUniqueInput
  }

  /**
   * pagecontent findUniqueOrThrow
   */
  export type pagecontentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagecontent
     */
    select?: pagecontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pagecontent
     */
    omit?: pagecontentOmit<ExtArgs> | null
    /**
     * Filter, which pagecontent to fetch.
     */
    where: pagecontentWhereUniqueInput
  }

  /**
   * pagecontent findFirst
   */
  export type pagecontentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagecontent
     */
    select?: pagecontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pagecontent
     */
    omit?: pagecontentOmit<ExtArgs> | null
    /**
     * Filter, which pagecontent to fetch.
     */
    where?: pagecontentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pagecontents to fetch.
     */
    orderBy?: pagecontentOrderByWithRelationInput | pagecontentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pagecontents.
     */
    cursor?: pagecontentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pagecontents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pagecontents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pagecontents.
     */
    distinct?: PagecontentScalarFieldEnum | PagecontentScalarFieldEnum[]
  }

  /**
   * pagecontent findFirstOrThrow
   */
  export type pagecontentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagecontent
     */
    select?: pagecontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pagecontent
     */
    omit?: pagecontentOmit<ExtArgs> | null
    /**
     * Filter, which pagecontent to fetch.
     */
    where?: pagecontentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pagecontents to fetch.
     */
    orderBy?: pagecontentOrderByWithRelationInput | pagecontentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for pagecontents.
     */
    cursor?: pagecontentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pagecontents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pagecontents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of pagecontents.
     */
    distinct?: PagecontentScalarFieldEnum | PagecontentScalarFieldEnum[]
  }

  /**
   * pagecontent findMany
   */
  export type pagecontentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagecontent
     */
    select?: pagecontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pagecontent
     */
    omit?: pagecontentOmit<ExtArgs> | null
    /**
     * Filter, which pagecontents to fetch.
     */
    where?: pagecontentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of pagecontents to fetch.
     */
    orderBy?: pagecontentOrderByWithRelationInput | pagecontentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing pagecontents.
     */
    cursor?: pagecontentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` pagecontents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` pagecontents.
     */
    skip?: number
    distinct?: PagecontentScalarFieldEnum | PagecontentScalarFieldEnum[]
  }

  /**
   * pagecontent create
   */
  export type pagecontentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagecontent
     */
    select?: pagecontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pagecontent
     */
    omit?: pagecontentOmit<ExtArgs> | null
    /**
     * The data needed to create a pagecontent.
     */
    data: XOR<pagecontentCreateInput, pagecontentUncheckedCreateInput>
  }

  /**
   * pagecontent createMany
   */
  export type pagecontentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many pagecontents.
     */
    data: pagecontentCreateManyInput | pagecontentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * pagecontent update
   */
  export type pagecontentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagecontent
     */
    select?: pagecontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pagecontent
     */
    omit?: pagecontentOmit<ExtArgs> | null
    /**
     * The data needed to update a pagecontent.
     */
    data: XOR<pagecontentUpdateInput, pagecontentUncheckedUpdateInput>
    /**
     * Choose, which pagecontent to update.
     */
    where: pagecontentWhereUniqueInput
  }

  /**
   * pagecontent updateMany
   */
  export type pagecontentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update pagecontents.
     */
    data: XOR<pagecontentUpdateManyMutationInput, pagecontentUncheckedUpdateManyInput>
    /**
     * Filter which pagecontents to update
     */
    where?: pagecontentWhereInput
    /**
     * Limit how many pagecontents to update.
     */
    limit?: number
  }

  /**
   * pagecontent upsert
   */
  export type pagecontentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagecontent
     */
    select?: pagecontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pagecontent
     */
    omit?: pagecontentOmit<ExtArgs> | null
    /**
     * The filter to search for the pagecontent to update in case it exists.
     */
    where: pagecontentWhereUniqueInput
    /**
     * In case the pagecontent found by the `where` argument doesn't exist, create a new pagecontent with this data.
     */
    create: XOR<pagecontentCreateInput, pagecontentUncheckedCreateInput>
    /**
     * In case the pagecontent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<pagecontentUpdateInput, pagecontentUncheckedUpdateInput>
  }

  /**
   * pagecontent delete
   */
  export type pagecontentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagecontent
     */
    select?: pagecontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pagecontent
     */
    omit?: pagecontentOmit<ExtArgs> | null
    /**
     * Filter which pagecontent to delete.
     */
    where: pagecontentWhereUniqueInput
  }

  /**
   * pagecontent deleteMany
   */
  export type pagecontentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which pagecontents to delete
     */
    where?: pagecontentWhereInput
    /**
     * Limit how many pagecontents to delete.
     */
    limit?: number
  }

  /**
   * pagecontent without action
   */
  export type pagecontentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pagecontent
     */
    select?: pagecontentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pagecontent
     */
    omit?: pagecontentOmit<ExtArgs> | null
  }


  /**
   * Model payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    id: number | null
    amount: Decimal | null
    dealId: number | null
    invoiceId: number | null
  }

  export type PaymentSumAggregateOutputType = {
    id: number | null
    amount: Decimal | null
    dealId: number | null
    invoiceId: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: number | null
    date: Date | null
    amount: Decimal | null
    method: string | null
    reference: string | null
    dealId: number | null
    invoiceId: number | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    amount: Decimal | null
    method: string | null
    reference: string | null
    dealId: number | null
    invoiceId: number | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    date: number
    amount: number
    method: number
    reference: number
    dealId: number
    invoiceId: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    id?: true
    amount?: true
    dealId?: true
    invoiceId?: true
  }

  export type PaymentSumAggregateInputType = {
    id?: true
    amount?: true
    dealId?: true
    invoiceId?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    date?: true
    amount?: true
    method?: true
    reference?: true
    dealId?: true
    invoiceId?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    date?: true
    amount?: true
    method?: true
    reference?: true
    dealId?: true
    invoiceId?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    date?: true
    amount?: true
    method?: true
    reference?: true
    dealId?: true
    invoiceId?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment to aggregate.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type paymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paymentWhereInput
    orderBy?: paymentOrderByWithAggregationInput | paymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: paymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: number
    date: Date
    amount: Decimal
    method: string
    reference: string | null
    dealId: number
    invoiceId: number | null
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends paymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type paymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    amount?: boolean
    method?: boolean
    reference?: boolean
    dealId?: boolean
    invoiceId?: boolean
    deal?: boolean | dealDefaultArgs<ExtArgs>
    invoice?: boolean | payment$invoiceArgs<ExtArgs>
    schedules?: boolean | payment$schedulesArgs<ExtArgs>
    _count?: boolean | PaymentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>



  export type paymentSelectScalar = {
    id?: boolean
    date?: boolean
    amount?: boolean
    method?: boolean
    reference?: boolean
    dealId?: boolean
    invoiceId?: boolean
  }

  export type paymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "amount" | "method" | "reference" | "dealId" | "invoiceId", ExtArgs["result"]["payment"]>
  export type paymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    deal?: boolean | dealDefaultArgs<ExtArgs>
    invoice?: boolean | payment$invoiceArgs<ExtArgs>
    schedules?: boolean | payment$schedulesArgs<ExtArgs>
    _count?: boolean | PaymentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $paymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "payment"
    objects: {
      deal: Prisma.$dealPayload<ExtArgs>
      invoice: Prisma.$invoicePayload<ExtArgs> | null
      schedules: Prisma.$paymentschedulePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      amount: Prisma.Decimal
      method: string
      reference: string | null
      dealId: number
      invoiceId: number | null
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type paymentGetPayload<S extends boolean | null | undefined | paymentDefaultArgs> = $Result.GetResult<Prisma.$paymentPayload, S>

  type paymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<paymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface paymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payment'], meta: { name: 'payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {paymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends paymentFindUniqueArgs>(args: SelectSubset<T, paymentFindUniqueArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {paymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends paymentFindUniqueOrThrowArgs>(args: SelectSubset<T, paymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends paymentFindFirstArgs>(args?: SelectSubset<T, paymentFindFirstArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends paymentFindFirstOrThrowArgs>(args?: SelectSubset<T, paymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends paymentFindManyArgs>(args?: SelectSubset<T, paymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {paymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends paymentCreateArgs>(args: SelectSubset<T, paymentCreateArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {paymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends paymentCreateManyArgs>(args?: SelectSubset<T, paymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payment.
     * @param {paymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends paymentDeleteArgs>(args: SelectSubset<T, paymentDeleteArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {paymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends paymentUpdateArgs>(args: SelectSubset<T, paymentUpdateArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {paymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends paymentDeleteManyArgs>(args?: SelectSubset<T, paymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends paymentUpdateManyArgs>(args: SelectSubset<T, paymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment.
     * @param {paymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends paymentUpsertArgs>(args: SelectSubset<T, paymentUpsertArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends paymentCountArgs>(
      args?: Subset<T, paymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends paymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: paymentGroupByArgs['orderBy'] }
        : { orderBy?: paymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, paymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the payment model
   */
  readonly fields: paymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__paymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    deal<T extends dealDefaultArgs<ExtArgs> = {}>(args?: Subset<T, dealDefaultArgs<ExtArgs>>): Prisma__dealClient<$Result.GetResult<Prisma.$dealPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    invoice<T extends payment$invoiceArgs<ExtArgs> = {}>(args?: Subset<T, payment$invoiceArgs<ExtArgs>>): Prisma__invoiceClient<$Result.GetResult<Prisma.$invoicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    schedules<T extends payment$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, payment$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentschedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the payment model
   */
  interface paymentFieldRefs {
    readonly id: FieldRef<"payment", 'Int'>
    readonly date: FieldRef<"payment", 'DateTime'>
    readonly amount: FieldRef<"payment", 'Decimal'>
    readonly method: FieldRef<"payment", 'String'>
    readonly reference: FieldRef<"payment", 'String'>
    readonly dealId: FieldRef<"payment", 'Int'>
    readonly invoiceId: FieldRef<"payment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * payment findUnique
   */
  export type paymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment findUniqueOrThrow
   */
  export type paymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment findFirst
   */
  export type paymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payments.
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * payment findFirstOrThrow
   */
  export type paymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payments.
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * payment findMany
   */
  export type paymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter, which payments to fetch.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payments.
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * payment create
   */
  export type paymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * The data needed to create a payment.
     */
    data: XOR<paymentCreateInput, paymentUncheckedCreateInput>
  }

  /**
   * payment createMany
   */
  export type paymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many payments.
     */
    data: paymentCreateManyInput | paymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * payment update
   */
  export type paymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * The data needed to update a payment.
     */
    data: XOR<paymentUpdateInput, paymentUncheckedUpdateInput>
    /**
     * Choose, which payment to update.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment updateMany
   */
  export type paymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update payments.
     */
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyInput>
    /**
     * Filter which payments to update
     */
    where?: paymentWhereInput
    /**
     * Limit how many payments to update.
     */
    limit?: number
  }

  /**
   * payment upsert
   */
  export type paymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * The filter to search for the payment to update in case it exists.
     */
    where: paymentWhereUniqueInput
    /**
     * In case the payment found by the `where` argument doesn't exist, create a new payment with this data.
     */
    create: XOR<paymentCreateInput, paymentUncheckedCreateInput>
    /**
     * In case the payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<paymentUpdateInput, paymentUncheckedUpdateInput>
  }

  /**
   * payment delete
   */
  export type paymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    /**
     * Filter which payment to delete.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment deleteMany
   */
  export type paymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payments to delete
     */
    where?: paymentWhereInput
    /**
     * Limit how many payments to delete.
     */
    limit?: number
  }

  /**
   * payment.invoice
   */
  export type payment$invoiceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the invoice
     */
    select?: invoiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the invoice
     */
    omit?: invoiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: invoiceInclude<ExtArgs> | null
    where?: invoiceWhereInput
  }

  /**
   * payment.schedules
   */
  export type payment$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paymentschedule
     */
    select?: paymentscheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the paymentschedule
     */
    omit?: paymentscheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentscheduleInclude<ExtArgs> | null
    where?: paymentscheduleWhereInput
    orderBy?: paymentscheduleOrderByWithRelationInput | paymentscheduleOrderByWithRelationInput[]
    cursor?: paymentscheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentscheduleScalarFieldEnum | PaymentscheduleScalarFieldEnum[]
  }

  /**
   * payment without action
   */
  export type paymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
  }


  /**
   * Model paymentschedule
   */

  export type AggregatePaymentschedule = {
    _count: PaymentscheduleCountAggregateOutputType | null
    _avg: PaymentscheduleAvgAggregateOutputType | null
    _sum: PaymentscheduleSumAggregateOutputType | null
    _min: PaymentscheduleMinAggregateOutputType | null
    _max: PaymentscheduleMaxAggregateOutputType | null
  }

  export type PaymentscheduleAvgAggregateOutputType = {
    id: number | null
    dealId: number | null
    amount: Decimal | null
    paymentId: number | null
  }

  export type PaymentscheduleSumAggregateOutputType = {
    id: number | null
    dealId: number | null
    amount: Decimal | null
    paymentId: number | null
  }

  export type PaymentscheduleMinAggregateOutputType = {
    id: number | null
    dealId: number | null
    label: string | null
    dueDate: Date | null
    amount: Decimal | null
    status: string | null
    paymentId: number | null
    createdAt: Date | null
  }

  export type PaymentscheduleMaxAggregateOutputType = {
    id: number | null
    dealId: number | null
    label: string | null
    dueDate: Date | null
    amount: Decimal | null
    status: string | null
    paymentId: number | null
    createdAt: Date | null
  }

  export type PaymentscheduleCountAggregateOutputType = {
    id: number
    dealId: number
    label: number
    dueDate: number
    amount: number
    status: number
    paymentId: number
    createdAt: number
    _all: number
  }


  export type PaymentscheduleAvgAggregateInputType = {
    id?: true
    dealId?: true
    amount?: true
    paymentId?: true
  }

  export type PaymentscheduleSumAggregateInputType = {
    id?: true
    dealId?: true
    amount?: true
    paymentId?: true
  }

  export type PaymentscheduleMinAggregateInputType = {
    id?: true
    dealId?: true
    label?: true
    dueDate?: true
    amount?: true
    status?: true
    paymentId?: true
    createdAt?: true
  }

  export type PaymentscheduleMaxAggregateInputType = {
    id?: true
    dealId?: true
    label?: true
    dueDate?: true
    amount?: true
    status?: true
    paymentId?: true
    createdAt?: true
  }

  export type PaymentscheduleCountAggregateInputType = {
    id?: true
    dealId?: true
    label?: true
    dueDate?: true
    amount?: true
    status?: true
    paymentId?: true
    createdAt?: true
    _all?: true
  }

  export type PaymentscheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which paymentschedule to aggregate.
     */
    where?: paymentscheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of paymentschedules to fetch.
     */
    orderBy?: paymentscheduleOrderByWithRelationInput | paymentscheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: paymentscheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` paymentschedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` paymentschedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned paymentschedules
    **/
    _count?: true | PaymentscheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentscheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentscheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentscheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentscheduleMaxAggregateInputType
  }

  export type GetPaymentscheduleAggregateType<T extends PaymentscheduleAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentschedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentschedule[P]>
      : GetScalarType<T[P], AggregatePaymentschedule[P]>
  }




  export type paymentscheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paymentscheduleWhereInput
    orderBy?: paymentscheduleOrderByWithAggregationInput | paymentscheduleOrderByWithAggregationInput[]
    by: PaymentscheduleScalarFieldEnum[] | PaymentscheduleScalarFieldEnum
    having?: paymentscheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentscheduleCountAggregateInputType | true
    _avg?: PaymentscheduleAvgAggregateInputType
    _sum?: PaymentscheduleSumAggregateInputType
    _min?: PaymentscheduleMinAggregateInputType
    _max?: PaymentscheduleMaxAggregateInputType
  }

  export type PaymentscheduleGroupByOutputType = {
    id: number
    dealId: number
    label: string
    dueDate: Date
    amount: Decimal
    status: string
    paymentId: number | null
    createdAt: Date
    _count: PaymentscheduleCountAggregateOutputType | null
    _avg: PaymentscheduleAvgAggregateOutputType | null
    _sum: PaymentscheduleSumAggregateOutputType | null
    _min: PaymentscheduleMinAggregateOutputType | null
    _max: PaymentscheduleMaxAggregateOutputType | null
  }

  type GetPaymentscheduleGroupByPayload<T extends paymentscheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentscheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentscheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentscheduleGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentscheduleGroupByOutputType[P]>
        }
      >
    >


  export type paymentscheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dealId?: boolean
    label?: boolean
    dueDate?: boolean
    amount?: boolean
    status?: boolean
    paymentId?: boolean
    createdAt?: boolean
    deal?: boolean | dealDefaultArgs<ExtArgs>
    payment?: boolean | paymentschedule$paymentArgs<ExtArgs>
  }, ExtArgs["result"]["paymentschedule"]>



  export type paymentscheduleSelectScalar = {
    id?: boolean
    dealId?: boolean
    label?: boolean
    dueDate?: boolean
    amount?: boolean
    status?: boolean
    paymentId?: boolean
    createdAt?: boolean
  }

  export type paymentscheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "dealId" | "label" | "dueDate" | "amount" | "status" | "paymentId" | "createdAt", ExtArgs["result"]["paymentschedule"]>
  export type paymentscheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    deal?: boolean | dealDefaultArgs<ExtArgs>
    payment?: boolean | paymentschedule$paymentArgs<ExtArgs>
  }

  export type $paymentschedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "paymentschedule"
    objects: {
      deal: Prisma.$dealPayload<ExtArgs>
      payment: Prisma.$paymentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dealId: number
      label: string
      dueDate: Date
      amount: Prisma.Decimal
      status: string
      paymentId: number | null
      createdAt: Date
    }, ExtArgs["result"]["paymentschedule"]>
    composites: {}
  }

  type paymentscheduleGetPayload<S extends boolean | null | undefined | paymentscheduleDefaultArgs> = $Result.GetResult<Prisma.$paymentschedulePayload, S>

  type paymentscheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<paymentscheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentscheduleCountAggregateInputType | true
    }

  export interface paymentscheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['paymentschedule'], meta: { name: 'paymentschedule' } }
    /**
     * Find zero or one Paymentschedule that matches the filter.
     * @param {paymentscheduleFindUniqueArgs} args - Arguments to find a Paymentschedule
     * @example
     * // Get one Paymentschedule
     * const paymentschedule = await prisma.paymentschedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends paymentscheduleFindUniqueArgs>(args: SelectSubset<T, paymentscheduleFindUniqueArgs<ExtArgs>>): Prisma__paymentscheduleClient<$Result.GetResult<Prisma.$paymentschedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Paymentschedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {paymentscheduleFindUniqueOrThrowArgs} args - Arguments to find a Paymentschedule
     * @example
     * // Get one Paymentschedule
     * const paymentschedule = await prisma.paymentschedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends paymentscheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, paymentscheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__paymentscheduleClient<$Result.GetResult<Prisma.$paymentschedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Paymentschedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentscheduleFindFirstArgs} args - Arguments to find a Paymentschedule
     * @example
     * // Get one Paymentschedule
     * const paymentschedule = await prisma.paymentschedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends paymentscheduleFindFirstArgs>(args?: SelectSubset<T, paymentscheduleFindFirstArgs<ExtArgs>>): Prisma__paymentscheduleClient<$Result.GetResult<Prisma.$paymentschedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Paymentschedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentscheduleFindFirstOrThrowArgs} args - Arguments to find a Paymentschedule
     * @example
     * // Get one Paymentschedule
     * const paymentschedule = await prisma.paymentschedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends paymentscheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, paymentscheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__paymentscheduleClient<$Result.GetResult<Prisma.$paymentschedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Paymentschedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentscheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Paymentschedules
     * const paymentschedules = await prisma.paymentschedule.findMany()
     * 
     * // Get first 10 Paymentschedules
     * const paymentschedules = await prisma.paymentschedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentscheduleWithIdOnly = await prisma.paymentschedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends paymentscheduleFindManyArgs>(args?: SelectSubset<T, paymentscheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentschedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Paymentschedule.
     * @param {paymentscheduleCreateArgs} args - Arguments to create a Paymentschedule.
     * @example
     * // Create one Paymentschedule
     * const Paymentschedule = await prisma.paymentschedule.create({
     *   data: {
     *     // ... data to create a Paymentschedule
     *   }
     * })
     * 
     */
    create<T extends paymentscheduleCreateArgs>(args: SelectSubset<T, paymentscheduleCreateArgs<ExtArgs>>): Prisma__paymentscheduleClient<$Result.GetResult<Prisma.$paymentschedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Paymentschedules.
     * @param {paymentscheduleCreateManyArgs} args - Arguments to create many Paymentschedules.
     * @example
     * // Create many Paymentschedules
     * const paymentschedule = await prisma.paymentschedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends paymentscheduleCreateManyArgs>(args?: SelectSubset<T, paymentscheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Paymentschedule.
     * @param {paymentscheduleDeleteArgs} args - Arguments to delete one Paymentschedule.
     * @example
     * // Delete one Paymentschedule
     * const Paymentschedule = await prisma.paymentschedule.delete({
     *   where: {
     *     // ... filter to delete one Paymentschedule
     *   }
     * })
     * 
     */
    delete<T extends paymentscheduleDeleteArgs>(args: SelectSubset<T, paymentscheduleDeleteArgs<ExtArgs>>): Prisma__paymentscheduleClient<$Result.GetResult<Prisma.$paymentschedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Paymentschedule.
     * @param {paymentscheduleUpdateArgs} args - Arguments to update one Paymentschedule.
     * @example
     * // Update one Paymentschedule
     * const paymentschedule = await prisma.paymentschedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends paymentscheduleUpdateArgs>(args: SelectSubset<T, paymentscheduleUpdateArgs<ExtArgs>>): Prisma__paymentscheduleClient<$Result.GetResult<Prisma.$paymentschedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Paymentschedules.
     * @param {paymentscheduleDeleteManyArgs} args - Arguments to filter Paymentschedules to delete.
     * @example
     * // Delete a few Paymentschedules
     * const { count } = await prisma.paymentschedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends paymentscheduleDeleteManyArgs>(args?: SelectSubset<T, paymentscheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Paymentschedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentscheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Paymentschedules
     * const paymentschedule = await prisma.paymentschedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends paymentscheduleUpdateManyArgs>(args: SelectSubset<T, paymentscheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Paymentschedule.
     * @param {paymentscheduleUpsertArgs} args - Arguments to update or create a Paymentschedule.
     * @example
     * // Update or create a Paymentschedule
     * const paymentschedule = await prisma.paymentschedule.upsert({
     *   create: {
     *     // ... data to create a Paymentschedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Paymentschedule we want to update
     *   }
     * })
     */
    upsert<T extends paymentscheduleUpsertArgs>(args: SelectSubset<T, paymentscheduleUpsertArgs<ExtArgs>>): Prisma__paymentscheduleClient<$Result.GetResult<Prisma.$paymentschedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Paymentschedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentscheduleCountArgs} args - Arguments to filter Paymentschedules to count.
     * @example
     * // Count the number of Paymentschedules
     * const count = await prisma.paymentschedule.count({
     *   where: {
     *     // ... the filter for the Paymentschedules we want to count
     *   }
     * })
    **/
    count<T extends paymentscheduleCountArgs>(
      args?: Subset<T, paymentscheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentscheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Paymentschedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentscheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentscheduleAggregateArgs>(args: Subset<T, PaymentscheduleAggregateArgs>): Prisma.PrismaPromise<GetPaymentscheduleAggregateType<T>>

    /**
     * Group by Paymentschedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentscheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends paymentscheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: paymentscheduleGroupByArgs['orderBy'] }
        : { orderBy?: paymentscheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, paymentscheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentscheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the paymentschedule model
   */
  readonly fields: paymentscheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for paymentschedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__paymentscheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    deal<T extends dealDefaultArgs<ExtArgs> = {}>(args?: Subset<T, dealDefaultArgs<ExtArgs>>): Prisma__dealClient<$Result.GetResult<Prisma.$dealPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payment<T extends paymentschedule$paymentArgs<ExtArgs> = {}>(args?: Subset<T, paymentschedule$paymentArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the paymentschedule model
   */
  interface paymentscheduleFieldRefs {
    readonly id: FieldRef<"paymentschedule", 'Int'>
    readonly dealId: FieldRef<"paymentschedule", 'Int'>
    readonly label: FieldRef<"paymentschedule", 'String'>
    readonly dueDate: FieldRef<"paymentschedule", 'DateTime'>
    readonly amount: FieldRef<"paymentschedule", 'Decimal'>
    readonly status: FieldRef<"paymentschedule", 'String'>
    readonly paymentId: FieldRef<"paymentschedule", 'Int'>
    readonly createdAt: FieldRef<"paymentschedule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * paymentschedule findUnique
   */
  export type paymentscheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paymentschedule
     */
    select?: paymentscheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the paymentschedule
     */
    omit?: paymentscheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentscheduleInclude<ExtArgs> | null
    /**
     * Filter, which paymentschedule to fetch.
     */
    where: paymentscheduleWhereUniqueInput
  }

  /**
   * paymentschedule findUniqueOrThrow
   */
  export type paymentscheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paymentschedule
     */
    select?: paymentscheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the paymentschedule
     */
    omit?: paymentscheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentscheduleInclude<ExtArgs> | null
    /**
     * Filter, which paymentschedule to fetch.
     */
    where: paymentscheduleWhereUniqueInput
  }

  /**
   * paymentschedule findFirst
   */
  export type paymentscheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paymentschedule
     */
    select?: paymentscheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the paymentschedule
     */
    omit?: paymentscheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentscheduleInclude<ExtArgs> | null
    /**
     * Filter, which paymentschedule to fetch.
     */
    where?: paymentscheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of paymentschedules to fetch.
     */
    orderBy?: paymentscheduleOrderByWithRelationInput | paymentscheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for paymentschedules.
     */
    cursor?: paymentscheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` paymentschedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` paymentschedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of paymentschedules.
     */
    distinct?: PaymentscheduleScalarFieldEnum | PaymentscheduleScalarFieldEnum[]
  }

  /**
   * paymentschedule findFirstOrThrow
   */
  export type paymentscheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paymentschedule
     */
    select?: paymentscheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the paymentschedule
     */
    omit?: paymentscheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentscheduleInclude<ExtArgs> | null
    /**
     * Filter, which paymentschedule to fetch.
     */
    where?: paymentscheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of paymentschedules to fetch.
     */
    orderBy?: paymentscheduleOrderByWithRelationInput | paymentscheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for paymentschedules.
     */
    cursor?: paymentscheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` paymentschedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` paymentschedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of paymentschedules.
     */
    distinct?: PaymentscheduleScalarFieldEnum | PaymentscheduleScalarFieldEnum[]
  }

  /**
   * paymentschedule findMany
   */
  export type paymentscheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paymentschedule
     */
    select?: paymentscheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the paymentschedule
     */
    omit?: paymentscheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentscheduleInclude<ExtArgs> | null
    /**
     * Filter, which paymentschedules to fetch.
     */
    where?: paymentscheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of paymentschedules to fetch.
     */
    orderBy?: paymentscheduleOrderByWithRelationInput | paymentscheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing paymentschedules.
     */
    cursor?: paymentscheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` paymentschedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` paymentschedules.
     */
    skip?: number
    distinct?: PaymentscheduleScalarFieldEnum | PaymentscheduleScalarFieldEnum[]
  }

  /**
   * paymentschedule create
   */
  export type paymentscheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paymentschedule
     */
    select?: paymentscheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the paymentschedule
     */
    omit?: paymentscheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentscheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a paymentschedule.
     */
    data: XOR<paymentscheduleCreateInput, paymentscheduleUncheckedCreateInput>
  }

  /**
   * paymentschedule createMany
   */
  export type paymentscheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many paymentschedules.
     */
    data: paymentscheduleCreateManyInput | paymentscheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * paymentschedule update
   */
  export type paymentscheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paymentschedule
     */
    select?: paymentscheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the paymentschedule
     */
    omit?: paymentscheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentscheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a paymentschedule.
     */
    data: XOR<paymentscheduleUpdateInput, paymentscheduleUncheckedUpdateInput>
    /**
     * Choose, which paymentschedule to update.
     */
    where: paymentscheduleWhereUniqueInput
  }

  /**
   * paymentschedule updateMany
   */
  export type paymentscheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update paymentschedules.
     */
    data: XOR<paymentscheduleUpdateManyMutationInput, paymentscheduleUncheckedUpdateManyInput>
    /**
     * Filter which paymentschedules to update
     */
    where?: paymentscheduleWhereInput
    /**
     * Limit how many paymentschedules to update.
     */
    limit?: number
  }

  /**
   * paymentschedule upsert
   */
  export type paymentscheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paymentschedule
     */
    select?: paymentscheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the paymentschedule
     */
    omit?: paymentscheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentscheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the paymentschedule to update in case it exists.
     */
    where: paymentscheduleWhereUniqueInput
    /**
     * In case the paymentschedule found by the `where` argument doesn't exist, create a new paymentschedule with this data.
     */
    create: XOR<paymentscheduleCreateInput, paymentscheduleUncheckedCreateInput>
    /**
     * In case the paymentschedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<paymentscheduleUpdateInput, paymentscheduleUncheckedUpdateInput>
  }

  /**
   * paymentschedule delete
   */
  export type paymentscheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paymentschedule
     */
    select?: paymentscheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the paymentschedule
     */
    omit?: paymentscheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentscheduleInclude<ExtArgs> | null
    /**
     * Filter which paymentschedule to delete.
     */
    where: paymentscheduleWhereUniqueInput
  }

  /**
   * paymentschedule deleteMany
   */
  export type paymentscheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which paymentschedules to delete
     */
    where?: paymentscheduleWhereInput
    /**
     * Limit how many paymentschedules to delete.
     */
    limit?: number
  }

  /**
   * paymentschedule.payment
   */
  export type paymentschedule$paymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentInclude<ExtArgs> | null
    where?: paymentWhereInput
  }

  /**
   * paymentschedule without action
   */
  export type paymentscheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the paymentschedule
     */
    select?: paymentscheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the paymentschedule
     */
    omit?: paymentscheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: paymentscheduleInclude<ExtArgs> | null
  }


  /**
   * Model project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    id: number | null
    surface: Decimal | null
    units: number | null
  }

  export type ProjectSumAggregateOutputType = {
    id: number | null
    surface: Decimal | null
    units: number | null
  }

  export type ProjectMinAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    description: string | null
    coverImage: string | null
    status: string | null
    location: string | null
    category: string | null
    surface: Decimal | null
    units: number | null
    startedAt: Date | null
    deliveredAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    description: string | null
    coverImage: string | null
    status: string | null
    location: string | null
    category: string | null
    surface: Decimal | null
    units: number | null
    startedAt: Date | null
    deliveredAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    title: number
    slug: number
    description: number
    coverImage: number
    status: number
    location: number
    category: number
    surface: number
    units: number
    startedAt: number
    deliveredAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    id?: true
    surface?: true
    units?: true
  }

  export type ProjectSumAggregateInputType = {
    id?: true
    surface?: true
    units?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    coverImage?: true
    status?: true
    location?: true
    category?: true
    surface?: true
    units?: true
    startedAt?: true
    deliveredAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    coverImage?: true
    status?: true
    location?: true
    category?: true
    surface?: true
    units?: true
    startedAt?: true
    deliveredAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    coverImage?: true
    status?: true
    location?: true
    category?: true
    surface?: true
    units?: true
    startedAt?: true
    deliveredAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which project to aggregate.
     */
    where?: projectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projects to fetch.
     */
    orderBy?: projectOrderByWithRelationInput | projectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: projectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type projectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: projectWhereInput
    orderBy?: projectOrderByWithAggregationInput | projectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: projectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: number
    title: string
    slug: string
    description: string | null
    coverImage: string | null
    status: string | null
    location: string | null
    category: string | null
    surface: Decimal | null
    units: number | null
    startedAt: Date | null
    deliveredAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends projectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type projectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    coverImage?: boolean
    status?: boolean
    location?: boolean
    category?: boolean
    surface?: boolean
    units?: boolean
    startedAt?: boolean
    deliveredAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    medias?: boolean | project$mediasArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>



  export type projectSelectScalar = {
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    coverImage?: boolean
    status?: boolean
    location?: boolean
    category?: boolean
    surface?: boolean
    units?: boolean
    startedAt?: boolean
    deliveredAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type projectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "slug" | "description" | "coverImage" | "status" | "location" | "category" | "surface" | "units" | "startedAt" | "deliveredAt" | "createdAt" | "updatedAt", ExtArgs["result"]["project"]>
  export type projectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medias?: boolean | project$mediasArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $projectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "project"
    objects: {
      medias: Prisma.$projectmediaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      slug: string
      description: string | null
      coverImage: string | null
      status: string | null
      location: string | null
      category: string | null
      surface: Prisma.Decimal | null
      units: number | null
      startedAt: Date | null
      deliveredAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type projectGetPayload<S extends boolean | null | undefined | projectDefaultArgs> = $Result.GetResult<Prisma.$projectPayload, S>

  type projectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<projectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface projectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['project'], meta: { name: 'project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {projectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends projectFindUniqueArgs>(args: SelectSubset<T, projectFindUniqueArgs<ExtArgs>>): Prisma__projectClient<$Result.GetResult<Prisma.$projectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {projectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends projectFindUniqueOrThrowArgs>(args: SelectSubset<T, projectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__projectClient<$Result.GetResult<Prisma.$projectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends projectFindFirstArgs>(args?: SelectSubset<T, projectFindFirstArgs<ExtArgs>>): Prisma__projectClient<$Result.GetResult<Prisma.$projectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends projectFindFirstOrThrowArgs>(args?: SelectSubset<T, projectFindFirstOrThrowArgs<ExtArgs>>): Prisma__projectClient<$Result.GetResult<Prisma.$projectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends projectFindManyArgs>(args?: SelectSubset<T, projectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$projectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Project.
     * @param {projectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends projectCreateArgs>(args: SelectSubset<T, projectCreateArgs<ExtArgs>>): Prisma__projectClient<$Result.GetResult<Prisma.$projectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projects.
     * @param {projectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends projectCreateManyArgs>(args?: SelectSubset<T, projectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Project.
     * @param {projectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends projectDeleteArgs>(args: SelectSubset<T, projectDeleteArgs<ExtArgs>>): Prisma__projectClient<$Result.GetResult<Prisma.$projectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Project.
     * @param {projectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends projectUpdateArgs>(args: SelectSubset<T, projectUpdateArgs<ExtArgs>>): Prisma__projectClient<$Result.GetResult<Prisma.$projectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projects.
     * @param {projectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends projectDeleteManyArgs>(args?: SelectSubset<T, projectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends projectUpdateManyArgs>(args: SelectSubset<T, projectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {projectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends projectUpsertArgs>(args: SelectSubset<T, projectUpsertArgs<ExtArgs>>): Prisma__projectClient<$Result.GetResult<Prisma.$projectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends projectCountArgs>(
      args?: Subset<T, projectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends projectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: projectGroupByArgs['orderBy'] }
        : { orderBy?: projectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, projectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the project model
   */
  readonly fields: projectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__projectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    medias<T extends project$mediasArgs<ExtArgs> = {}>(args?: Subset<T, project$mediasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$projectmediaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the project model
   */
  interface projectFieldRefs {
    readonly id: FieldRef<"project", 'Int'>
    readonly title: FieldRef<"project", 'String'>
    readonly slug: FieldRef<"project", 'String'>
    readonly description: FieldRef<"project", 'String'>
    readonly coverImage: FieldRef<"project", 'String'>
    readonly status: FieldRef<"project", 'String'>
    readonly location: FieldRef<"project", 'String'>
    readonly category: FieldRef<"project", 'String'>
    readonly surface: FieldRef<"project", 'Decimal'>
    readonly units: FieldRef<"project", 'Int'>
    readonly startedAt: FieldRef<"project", 'DateTime'>
    readonly deliveredAt: FieldRef<"project", 'DateTime'>
    readonly createdAt: FieldRef<"project", 'DateTime'>
    readonly updatedAt: FieldRef<"project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * project findUnique
   */
  export type projectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project
     */
    select?: projectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project
     */
    omit?: projectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectInclude<ExtArgs> | null
    /**
     * Filter, which project to fetch.
     */
    where: projectWhereUniqueInput
  }

  /**
   * project findUniqueOrThrow
   */
  export type projectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project
     */
    select?: projectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project
     */
    omit?: projectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectInclude<ExtArgs> | null
    /**
     * Filter, which project to fetch.
     */
    where: projectWhereUniqueInput
  }

  /**
   * project findFirst
   */
  export type projectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project
     */
    select?: projectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project
     */
    omit?: projectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectInclude<ExtArgs> | null
    /**
     * Filter, which project to fetch.
     */
    where?: projectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projects to fetch.
     */
    orderBy?: projectOrderByWithRelationInput | projectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for projects.
     */
    cursor?: projectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * project findFirstOrThrow
   */
  export type projectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project
     */
    select?: projectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project
     */
    omit?: projectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectInclude<ExtArgs> | null
    /**
     * Filter, which project to fetch.
     */
    where?: projectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projects to fetch.
     */
    orderBy?: projectOrderByWithRelationInput | projectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for projects.
     */
    cursor?: projectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * project findMany
   */
  export type projectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project
     */
    select?: projectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project
     */
    omit?: projectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectInclude<ExtArgs> | null
    /**
     * Filter, which projects to fetch.
     */
    where?: projectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projects to fetch.
     */
    orderBy?: projectOrderByWithRelationInput | projectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing projects.
     */
    cursor?: projectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * project create
   */
  export type projectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project
     */
    select?: projectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project
     */
    omit?: projectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectInclude<ExtArgs> | null
    /**
     * The data needed to create a project.
     */
    data: XOR<projectCreateInput, projectUncheckedCreateInput>
  }

  /**
   * project createMany
   */
  export type projectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many projects.
     */
    data: projectCreateManyInput | projectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * project update
   */
  export type projectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project
     */
    select?: projectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project
     */
    omit?: projectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectInclude<ExtArgs> | null
    /**
     * The data needed to update a project.
     */
    data: XOR<projectUpdateInput, projectUncheckedUpdateInput>
    /**
     * Choose, which project to update.
     */
    where: projectWhereUniqueInput
  }

  /**
   * project updateMany
   */
  export type projectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update projects.
     */
    data: XOR<projectUpdateManyMutationInput, projectUncheckedUpdateManyInput>
    /**
     * Filter which projects to update
     */
    where?: projectWhereInput
    /**
     * Limit how many projects to update.
     */
    limit?: number
  }

  /**
   * project upsert
   */
  export type projectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project
     */
    select?: projectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project
     */
    omit?: projectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectInclude<ExtArgs> | null
    /**
     * The filter to search for the project to update in case it exists.
     */
    where: projectWhereUniqueInput
    /**
     * In case the project found by the `where` argument doesn't exist, create a new project with this data.
     */
    create: XOR<projectCreateInput, projectUncheckedCreateInput>
    /**
     * In case the project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<projectUpdateInput, projectUncheckedUpdateInput>
  }

  /**
   * project delete
   */
  export type projectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project
     */
    select?: projectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project
     */
    omit?: projectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectInclude<ExtArgs> | null
    /**
     * Filter which project to delete.
     */
    where: projectWhereUniqueInput
  }

  /**
   * project deleteMany
   */
  export type projectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which projects to delete
     */
    where?: projectWhereInput
    /**
     * Limit how many projects to delete.
     */
    limit?: number
  }

  /**
   * project.medias
   */
  export type project$mediasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projectmedia
     */
    select?: projectmediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projectmedia
     */
    omit?: projectmediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectmediaInclude<ExtArgs> | null
    where?: projectmediaWhereInput
    orderBy?: projectmediaOrderByWithRelationInput | projectmediaOrderByWithRelationInput[]
    cursor?: projectmediaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectmediaScalarFieldEnum | ProjectmediaScalarFieldEnum[]
  }

  /**
   * project without action
   */
  export type projectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the project
     */
    select?: projectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the project
     */
    omit?: projectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectInclude<ExtArgs> | null
  }


  /**
   * Model projectmedia
   */

  export type AggregateProjectmedia = {
    _count: ProjectmediaCountAggregateOutputType | null
    _avg: ProjectmediaAvgAggregateOutputType | null
    _sum: ProjectmediaSumAggregateOutputType | null
    _min: ProjectmediaMinAggregateOutputType | null
    _max: ProjectmediaMaxAggregateOutputType | null
  }

  export type ProjectmediaAvgAggregateOutputType = {
    id: number | null
    projectId: number | null
    order: number | null
  }

  export type ProjectmediaSumAggregateOutputType = {
    id: number | null
    projectId: number | null
    order: number | null
  }

  export type ProjectmediaMinAggregateOutputType = {
    id: number | null
    projectId: number | null
    kind: string | null
    url: string | null
    alt: string | null
    order: number | null
    createdAt: Date | null
  }

  export type ProjectmediaMaxAggregateOutputType = {
    id: number | null
    projectId: number | null
    kind: string | null
    url: string | null
    alt: string | null
    order: number | null
    createdAt: Date | null
  }

  export type ProjectmediaCountAggregateOutputType = {
    id: number
    projectId: number
    kind: number
    url: number
    alt: number
    order: number
    createdAt: number
    _all: number
  }


  export type ProjectmediaAvgAggregateInputType = {
    id?: true
    projectId?: true
    order?: true
  }

  export type ProjectmediaSumAggregateInputType = {
    id?: true
    projectId?: true
    order?: true
  }

  export type ProjectmediaMinAggregateInputType = {
    id?: true
    projectId?: true
    kind?: true
    url?: true
    alt?: true
    order?: true
    createdAt?: true
  }

  export type ProjectmediaMaxAggregateInputType = {
    id?: true
    projectId?: true
    kind?: true
    url?: true
    alt?: true
    order?: true
    createdAt?: true
  }

  export type ProjectmediaCountAggregateInputType = {
    id?: true
    projectId?: true
    kind?: true
    url?: true
    alt?: true
    order?: true
    createdAt?: true
    _all?: true
  }

  export type ProjectmediaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which projectmedia to aggregate.
     */
    where?: projectmediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projectmedias to fetch.
     */
    orderBy?: projectmediaOrderByWithRelationInput | projectmediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: projectmediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projectmedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projectmedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned projectmedias
    **/
    _count?: true | ProjectmediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectmediaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectmediaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectmediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectmediaMaxAggregateInputType
  }

  export type GetProjectmediaAggregateType<T extends ProjectmediaAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectmedia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectmedia[P]>
      : GetScalarType<T[P], AggregateProjectmedia[P]>
  }




  export type projectmediaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: projectmediaWhereInput
    orderBy?: projectmediaOrderByWithAggregationInput | projectmediaOrderByWithAggregationInput[]
    by: ProjectmediaScalarFieldEnum[] | ProjectmediaScalarFieldEnum
    having?: projectmediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectmediaCountAggregateInputType | true
    _avg?: ProjectmediaAvgAggregateInputType
    _sum?: ProjectmediaSumAggregateInputType
    _min?: ProjectmediaMinAggregateInputType
    _max?: ProjectmediaMaxAggregateInputType
  }

  export type ProjectmediaGroupByOutputType = {
    id: number
    projectId: number
    kind: string
    url: string
    alt: string | null
    order: number
    createdAt: Date
    _count: ProjectmediaCountAggregateOutputType | null
    _avg: ProjectmediaAvgAggregateOutputType | null
    _sum: ProjectmediaSumAggregateOutputType | null
    _min: ProjectmediaMinAggregateOutputType | null
    _max: ProjectmediaMaxAggregateOutputType | null
  }

  type GetProjectmediaGroupByPayload<T extends projectmediaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectmediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectmediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectmediaGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectmediaGroupByOutputType[P]>
        }
      >
    >


  export type projectmediaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    kind?: boolean
    url?: boolean
    alt?: boolean
    order?: boolean
    createdAt?: boolean
    project?: boolean | projectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectmedia"]>



  export type projectmediaSelectScalar = {
    id?: boolean
    projectId?: boolean
    kind?: boolean
    url?: boolean
    alt?: boolean
    order?: boolean
    createdAt?: boolean
  }

  export type projectmediaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "projectId" | "kind" | "url" | "alt" | "order" | "createdAt", ExtArgs["result"]["projectmedia"]>
  export type projectmediaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | projectDefaultArgs<ExtArgs>
  }

  export type $projectmediaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "projectmedia"
    objects: {
      project: Prisma.$projectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      projectId: number
      kind: string
      url: string
      alt: string | null
      order: number
      createdAt: Date
    }, ExtArgs["result"]["projectmedia"]>
    composites: {}
  }

  type projectmediaGetPayload<S extends boolean | null | undefined | projectmediaDefaultArgs> = $Result.GetResult<Prisma.$projectmediaPayload, S>

  type projectmediaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<projectmediaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectmediaCountAggregateInputType | true
    }

  export interface projectmediaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['projectmedia'], meta: { name: 'projectmedia' } }
    /**
     * Find zero or one Projectmedia that matches the filter.
     * @param {projectmediaFindUniqueArgs} args - Arguments to find a Projectmedia
     * @example
     * // Get one Projectmedia
     * const projectmedia = await prisma.projectmedia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends projectmediaFindUniqueArgs>(args: SelectSubset<T, projectmediaFindUniqueArgs<ExtArgs>>): Prisma__projectmediaClient<$Result.GetResult<Prisma.$projectmediaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Projectmedia that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {projectmediaFindUniqueOrThrowArgs} args - Arguments to find a Projectmedia
     * @example
     * // Get one Projectmedia
     * const projectmedia = await prisma.projectmedia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends projectmediaFindUniqueOrThrowArgs>(args: SelectSubset<T, projectmediaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__projectmediaClient<$Result.GetResult<Prisma.$projectmediaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Projectmedia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectmediaFindFirstArgs} args - Arguments to find a Projectmedia
     * @example
     * // Get one Projectmedia
     * const projectmedia = await prisma.projectmedia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends projectmediaFindFirstArgs>(args?: SelectSubset<T, projectmediaFindFirstArgs<ExtArgs>>): Prisma__projectmediaClient<$Result.GetResult<Prisma.$projectmediaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Projectmedia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectmediaFindFirstOrThrowArgs} args - Arguments to find a Projectmedia
     * @example
     * // Get one Projectmedia
     * const projectmedia = await prisma.projectmedia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends projectmediaFindFirstOrThrowArgs>(args?: SelectSubset<T, projectmediaFindFirstOrThrowArgs<ExtArgs>>): Prisma__projectmediaClient<$Result.GetResult<Prisma.$projectmediaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projectmedias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectmediaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projectmedias
     * const projectmedias = await prisma.projectmedia.findMany()
     * 
     * // Get first 10 Projectmedias
     * const projectmedias = await prisma.projectmedia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectmediaWithIdOnly = await prisma.projectmedia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends projectmediaFindManyArgs>(args?: SelectSubset<T, projectmediaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$projectmediaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Projectmedia.
     * @param {projectmediaCreateArgs} args - Arguments to create a Projectmedia.
     * @example
     * // Create one Projectmedia
     * const Projectmedia = await prisma.projectmedia.create({
     *   data: {
     *     // ... data to create a Projectmedia
     *   }
     * })
     * 
     */
    create<T extends projectmediaCreateArgs>(args: SelectSubset<T, projectmediaCreateArgs<ExtArgs>>): Prisma__projectmediaClient<$Result.GetResult<Prisma.$projectmediaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projectmedias.
     * @param {projectmediaCreateManyArgs} args - Arguments to create many Projectmedias.
     * @example
     * // Create many Projectmedias
     * const projectmedia = await prisma.projectmedia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends projectmediaCreateManyArgs>(args?: SelectSubset<T, projectmediaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Projectmedia.
     * @param {projectmediaDeleteArgs} args - Arguments to delete one Projectmedia.
     * @example
     * // Delete one Projectmedia
     * const Projectmedia = await prisma.projectmedia.delete({
     *   where: {
     *     // ... filter to delete one Projectmedia
     *   }
     * })
     * 
     */
    delete<T extends projectmediaDeleteArgs>(args: SelectSubset<T, projectmediaDeleteArgs<ExtArgs>>): Prisma__projectmediaClient<$Result.GetResult<Prisma.$projectmediaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Projectmedia.
     * @param {projectmediaUpdateArgs} args - Arguments to update one Projectmedia.
     * @example
     * // Update one Projectmedia
     * const projectmedia = await prisma.projectmedia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends projectmediaUpdateArgs>(args: SelectSubset<T, projectmediaUpdateArgs<ExtArgs>>): Prisma__projectmediaClient<$Result.GetResult<Prisma.$projectmediaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projectmedias.
     * @param {projectmediaDeleteManyArgs} args - Arguments to filter Projectmedias to delete.
     * @example
     * // Delete a few Projectmedias
     * const { count } = await prisma.projectmedia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends projectmediaDeleteManyArgs>(args?: SelectSubset<T, projectmediaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projectmedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectmediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projectmedias
     * const projectmedia = await prisma.projectmedia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends projectmediaUpdateManyArgs>(args: SelectSubset<T, projectmediaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Projectmedia.
     * @param {projectmediaUpsertArgs} args - Arguments to update or create a Projectmedia.
     * @example
     * // Update or create a Projectmedia
     * const projectmedia = await prisma.projectmedia.upsert({
     *   create: {
     *     // ... data to create a Projectmedia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Projectmedia we want to update
     *   }
     * })
     */
    upsert<T extends projectmediaUpsertArgs>(args: SelectSubset<T, projectmediaUpsertArgs<ExtArgs>>): Prisma__projectmediaClient<$Result.GetResult<Prisma.$projectmediaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Projectmedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectmediaCountArgs} args - Arguments to filter Projectmedias to count.
     * @example
     * // Count the number of Projectmedias
     * const count = await prisma.projectmedia.count({
     *   where: {
     *     // ... the filter for the Projectmedias we want to count
     *   }
     * })
    **/
    count<T extends projectmediaCountArgs>(
      args?: Subset<T, projectmediaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectmediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Projectmedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectmediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectmediaAggregateArgs>(args: Subset<T, ProjectmediaAggregateArgs>): Prisma.PrismaPromise<GetProjectmediaAggregateType<T>>

    /**
     * Group by Projectmedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {projectmediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends projectmediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: projectmediaGroupByArgs['orderBy'] }
        : { orderBy?: projectmediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, projectmediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectmediaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the projectmedia model
   */
  readonly fields: projectmediaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for projectmedia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__projectmediaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends projectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, projectDefaultArgs<ExtArgs>>): Prisma__projectClient<$Result.GetResult<Prisma.$projectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the projectmedia model
   */
  interface projectmediaFieldRefs {
    readonly id: FieldRef<"projectmedia", 'Int'>
    readonly projectId: FieldRef<"projectmedia", 'Int'>
    readonly kind: FieldRef<"projectmedia", 'String'>
    readonly url: FieldRef<"projectmedia", 'String'>
    readonly alt: FieldRef<"projectmedia", 'String'>
    readonly order: FieldRef<"projectmedia", 'Int'>
    readonly createdAt: FieldRef<"projectmedia", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * projectmedia findUnique
   */
  export type projectmediaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projectmedia
     */
    select?: projectmediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projectmedia
     */
    omit?: projectmediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectmediaInclude<ExtArgs> | null
    /**
     * Filter, which projectmedia to fetch.
     */
    where: projectmediaWhereUniqueInput
  }

  /**
   * projectmedia findUniqueOrThrow
   */
  export type projectmediaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projectmedia
     */
    select?: projectmediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projectmedia
     */
    omit?: projectmediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectmediaInclude<ExtArgs> | null
    /**
     * Filter, which projectmedia to fetch.
     */
    where: projectmediaWhereUniqueInput
  }

  /**
   * projectmedia findFirst
   */
  export type projectmediaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projectmedia
     */
    select?: projectmediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projectmedia
     */
    omit?: projectmediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectmediaInclude<ExtArgs> | null
    /**
     * Filter, which projectmedia to fetch.
     */
    where?: projectmediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projectmedias to fetch.
     */
    orderBy?: projectmediaOrderByWithRelationInput | projectmediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for projectmedias.
     */
    cursor?: projectmediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projectmedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projectmedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of projectmedias.
     */
    distinct?: ProjectmediaScalarFieldEnum | ProjectmediaScalarFieldEnum[]
  }

  /**
   * projectmedia findFirstOrThrow
   */
  export type projectmediaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projectmedia
     */
    select?: projectmediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projectmedia
     */
    omit?: projectmediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectmediaInclude<ExtArgs> | null
    /**
     * Filter, which projectmedia to fetch.
     */
    where?: projectmediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projectmedias to fetch.
     */
    orderBy?: projectmediaOrderByWithRelationInput | projectmediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for projectmedias.
     */
    cursor?: projectmediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projectmedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projectmedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of projectmedias.
     */
    distinct?: ProjectmediaScalarFieldEnum | ProjectmediaScalarFieldEnum[]
  }

  /**
   * projectmedia findMany
   */
  export type projectmediaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projectmedia
     */
    select?: projectmediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projectmedia
     */
    omit?: projectmediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectmediaInclude<ExtArgs> | null
    /**
     * Filter, which projectmedias to fetch.
     */
    where?: projectmediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of projectmedias to fetch.
     */
    orderBy?: projectmediaOrderByWithRelationInput | projectmediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing projectmedias.
     */
    cursor?: projectmediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` projectmedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` projectmedias.
     */
    skip?: number
    distinct?: ProjectmediaScalarFieldEnum | ProjectmediaScalarFieldEnum[]
  }

  /**
   * projectmedia create
   */
  export type projectmediaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projectmedia
     */
    select?: projectmediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projectmedia
     */
    omit?: projectmediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectmediaInclude<ExtArgs> | null
    /**
     * The data needed to create a projectmedia.
     */
    data: XOR<projectmediaCreateInput, projectmediaUncheckedCreateInput>
  }

  /**
   * projectmedia createMany
   */
  export type projectmediaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many projectmedias.
     */
    data: projectmediaCreateManyInput | projectmediaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * projectmedia update
   */
  export type projectmediaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projectmedia
     */
    select?: projectmediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projectmedia
     */
    omit?: projectmediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectmediaInclude<ExtArgs> | null
    /**
     * The data needed to update a projectmedia.
     */
    data: XOR<projectmediaUpdateInput, projectmediaUncheckedUpdateInput>
    /**
     * Choose, which projectmedia to update.
     */
    where: projectmediaWhereUniqueInput
  }

  /**
   * projectmedia updateMany
   */
  export type projectmediaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update projectmedias.
     */
    data: XOR<projectmediaUpdateManyMutationInput, projectmediaUncheckedUpdateManyInput>
    /**
     * Filter which projectmedias to update
     */
    where?: projectmediaWhereInput
    /**
     * Limit how many projectmedias to update.
     */
    limit?: number
  }

  /**
   * projectmedia upsert
   */
  export type projectmediaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projectmedia
     */
    select?: projectmediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projectmedia
     */
    omit?: projectmediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectmediaInclude<ExtArgs> | null
    /**
     * The filter to search for the projectmedia to update in case it exists.
     */
    where: projectmediaWhereUniqueInput
    /**
     * In case the projectmedia found by the `where` argument doesn't exist, create a new projectmedia with this data.
     */
    create: XOR<projectmediaCreateInput, projectmediaUncheckedCreateInput>
    /**
     * In case the projectmedia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<projectmediaUpdateInput, projectmediaUncheckedUpdateInput>
  }

  /**
   * projectmedia delete
   */
  export type projectmediaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projectmedia
     */
    select?: projectmediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projectmedia
     */
    omit?: projectmediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectmediaInclude<ExtArgs> | null
    /**
     * Filter which projectmedia to delete.
     */
    where: projectmediaWhereUniqueInput
  }

  /**
   * projectmedia deleteMany
   */
  export type projectmediaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which projectmedias to delete
     */
    where?: projectmediaWhereInput
    /**
     * Limit how many projectmedias to delete.
     */
    limit?: number
  }

  /**
   * projectmedia without action
   */
  export type projectmediaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the projectmedia
     */
    select?: projectmediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the projectmedia
     */
    omit?: projectmediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: projectmediaInclude<ExtArgs> | null
  }


  /**
   * Model property
   */

  export type AggregateProperty = {
    _count: PropertyCountAggregateOutputType | null
    _avg: PropertyAvgAggregateOutputType | null
    _sum: PropertySumAggregateOutputType | null
    _min: PropertyMinAggregateOutputType | null
    _max: PropertyMaxAggregateOutputType | null
  }

  export type PropertyAvgAggregateOutputType = {
    id: number | null
    price: Decimal | null
    bedrooms: number | null
    bathrooms: number | null
    area_m2: Decimal | null
    surfaceHabitable: number | null
    yearOfConstruction: number | null
    capacity: number | null
  }

  export type PropertySumAggregateOutputType = {
    id: number | null
    price: Decimal | null
    bedrooms: number | null
    bathrooms: number | null
    area_m2: Decimal | null
    surfaceHabitable: number | null
    yearOfConstruction: number | null
    capacity: number | null
  }

  export type PropertyMinAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    description: string | null
    price: Decimal | null
    location: string | null
    category: string | null
    bedrooms: number | null
    bathrooms: number | null
    area_m2: Decimal | null
    surfaceHabitable: number | null
    type: string | null
    yearOfConstruction: number | null
    capacity: number | null
    status: string | null
    mainImage: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PropertyMaxAggregateOutputType = {
    id: number | null
    title: string | null
    slug: string | null
    description: string | null
    price: Decimal | null
    location: string | null
    category: string | null
    bedrooms: number | null
    bathrooms: number | null
    area_m2: Decimal | null
    surfaceHabitable: number | null
    type: string | null
    yearOfConstruction: number | null
    capacity: number | null
    status: string | null
    mainImage: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PropertyCountAggregateOutputType = {
    id: number
    title: number
    slug: number
    description: number
    price: number
    location: number
    category: number
    bedrooms: number
    bathrooms: number
    area_m2: number
    surfaceHabitable: number
    type: number
    yearOfConstruction: number
    capacity: number
    status: number
    mainImage: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PropertyAvgAggregateInputType = {
    id?: true
    price?: true
    bedrooms?: true
    bathrooms?: true
    area_m2?: true
    surfaceHabitable?: true
    yearOfConstruction?: true
    capacity?: true
  }

  export type PropertySumAggregateInputType = {
    id?: true
    price?: true
    bedrooms?: true
    bathrooms?: true
    area_m2?: true
    surfaceHabitable?: true
    yearOfConstruction?: true
    capacity?: true
  }

  export type PropertyMinAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    price?: true
    location?: true
    category?: true
    bedrooms?: true
    bathrooms?: true
    area_m2?: true
    surfaceHabitable?: true
    type?: true
    yearOfConstruction?: true
    capacity?: true
    status?: true
    mainImage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PropertyMaxAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    price?: true
    location?: true
    category?: true
    bedrooms?: true
    bathrooms?: true
    area_m2?: true
    surfaceHabitable?: true
    type?: true
    yearOfConstruction?: true
    capacity?: true
    status?: true
    mainImage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PropertyCountAggregateInputType = {
    id?: true
    title?: true
    slug?: true
    description?: true
    price?: true
    location?: true
    category?: true
    bedrooms?: true
    bathrooms?: true
    area_m2?: true
    surfaceHabitable?: true
    type?: true
    yearOfConstruction?: true
    capacity?: true
    status?: true
    mainImage?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PropertyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which property to aggregate.
     */
    where?: propertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of properties to fetch.
     */
    orderBy?: propertyOrderByWithRelationInput | propertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: propertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned properties
    **/
    _count?: true | PropertyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PropertyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PropertySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PropertyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PropertyMaxAggregateInputType
  }

  export type GetPropertyAggregateType<T extends PropertyAggregateArgs> = {
        [P in keyof T & keyof AggregateProperty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProperty[P]>
      : GetScalarType<T[P], AggregateProperty[P]>
  }




  export type propertyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: propertyWhereInput
    orderBy?: propertyOrderByWithAggregationInput | propertyOrderByWithAggregationInput[]
    by: PropertyScalarFieldEnum[] | PropertyScalarFieldEnum
    having?: propertyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PropertyCountAggregateInputType | true
    _avg?: PropertyAvgAggregateInputType
    _sum?: PropertySumAggregateInputType
    _min?: PropertyMinAggregateInputType
    _max?: PropertyMaxAggregateInputType
  }

  export type PropertyGroupByOutputType = {
    id: number
    title: string
    slug: string
    description: string | null
    price: Decimal | null
    location: string | null
    category: string | null
    bedrooms: number | null
    bathrooms: number | null
    area_m2: Decimal | null
    surfaceHabitable: number | null
    type: string | null
    yearOfConstruction: number | null
    capacity: number | null
    status: string | null
    mainImage: string | null
    createdAt: Date
    updatedAt: Date
    _count: PropertyCountAggregateOutputType | null
    _avg: PropertyAvgAggregateOutputType | null
    _sum: PropertySumAggregateOutputType | null
    _min: PropertyMinAggregateOutputType | null
    _max: PropertyMaxAggregateOutputType | null
  }

  type GetPropertyGroupByPayload<T extends propertyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PropertyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PropertyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PropertyGroupByOutputType[P]>
            : GetScalarType<T[P], PropertyGroupByOutputType[P]>
        }
      >
    >


  export type propertySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    price?: boolean
    location?: boolean
    category?: boolean
    bedrooms?: boolean
    bathrooms?: boolean
    area_m2?: boolean
    surfaceHabitable?: boolean
    type?: boolean
    yearOfConstruction?: boolean
    capacity?: boolean
    status?: boolean
    mainImage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    images?: boolean | property$imagesArgs<ExtArgs>
    deals?: boolean | property$dealsArgs<ExtArgs>
    expenses?: boolean | property$expensesArgs<ExtArgs>
    inquiries?: boolean | property$inquiriesArgs<ExtArgs>
    contactLeads?: boolean | property$contactLeadsArgs<ExtArgs>
    coOwnerships?: boolean | property$coOwnershipsArgs<ExtArgs>
    _count?: boolean | PropertyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["property"]>



  export type propertySelectScalar = {
    id?: boolean
    title?: boolean
    slug?: boolean
    description?: boolean
    price?: boolean
    location?: boolean
    category?: boolean
    bedrooms?: boolean
    bathrooms?: boolean
    area_m2?: boolean
    surfaceHabitable?: boolean
    type?: boolean
    yearOfConstruction?: boolean
    capacity?: boolean
    status?: boolean
    mainImage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type propertyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "slug" | "description" | "price" | "location" | "category" | "bedrooms" | "bathrooms" | "area_m2" | "surfaceHabitable" | "type" | "yearOfConstruction" | "capacity" | "status" | "mainImage" | "createdAt" | "updatedAt", ExtArgs["result"]["property"]>
  export type propertyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | property$imagesArgs<ExtArgs>
    deals?: boolean | property$dealsArgs<ExtArgs>
    expenses?: boolean | property$expensesArgs<ExtArgs>
    inquiries?: boolean | property$inquiriesArgs<ExtArgs>
    contactLeads?: boolean | property$contactLeadsArgs<ExtArgs>
    coOwnerships?: boolean | property$coOwnershipsArgs<ExtArgs>
    _count?: boolean | PropertyCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $propertyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "property"
    objects: {
      images: Prisma.$propertyimagePayload<ExtArgs>[]
      deals: Prisma.$dealPayload<ExtArgs>[]
      expenses: Prisma.$expensePayload<ExtArgs>[]
      inquiries: Prisma.$inquiryPayload<ExtArgs>[]
      contactLeads: Prisma.$contactleadPayload<ExtArgs>[]
      coOwnerships: Prisma.$coownershipPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      slug: string
      description: string | null
      price: Prisma.Decimal | null
      location: string | null
      category: string | null
      bedrooms: number | null
      bathrooms: number | null
      area_m2: Prisma.Decimal | null
      surfaceHabitable: number | null
      type: string | null
      yearOfConstruction: number | null
      capacity: number | null
      status: string | null
      mainImage: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["property"]>
    composites: {}
  }

  type propertyGetPayload<S extends boolean | null | undefined | propertyDefaultArgs> = $Result.GetResult<Prisma.$propertyPayload, S>

  type propertyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<propertyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PropertyCountAggregateInputType | true
    }

  export interface propertyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['property'], meta: { name: 'property' } }
    /**
     * Find zero or one Property that matches the filter.
     * @param {propertyFindUniqueArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends propertyFindUniqueArgs>(args: SelectSubset<T, propertyFindUniqueArgs<ExtArgs>>): Prisma__propertyClient<$Result.GetResult<Prisma.$propertyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Property that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {propertyFindUniqueOrThrowArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends propertyFindUniqueOrThrowArgs>(args: SelectSubset<T, propertyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__propertyClient<$Result.GetResult<Prisma.$propertyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Property that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {propertyFindFirstArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends propertyFindFirstArgs>(args?: SelectSubset<T, propertyFindFirstArgs<ExtArgs>>): Prisma__propertyClient<$Result.GetResult<Prisma.$propertyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Property that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {propertyFindFirstOrThrowArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends propertyFindFirstOrThrowArgs>(args?: SelectSubset<T, propertyFindFirstOrThrowArgs<ExtArgs>>): Prisma__propertyClient<$Result.GetResult<Prisma.$propertyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Properties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {propertyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Properties
     * const properties = await prisma.property.findMany()
     * 
     * // Get first 10 Properties
     * const properties = await prisma.property.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const propertyWithIdOnly = await prisma.property.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends propertyFindManyArgs>(args?: SelectSubset<T, propertyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$propertyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Property.
     * @param {propertyCreateArgs} args - Arguments to create a Property.
     * @example
     * // Create one Property
     * const Property = await prisma.property.create({
     *   data: {
     *     // ... data to create a Property
     *   }
     * })
     * 
     */
    create<T extends propertyCreateArgs>(args: SelectSubset<T, propertyCreateArgs<ExtArgs>>): Prisma__propertyClient<$Result.GetResult<Prisma.$propertyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Properties.
     * @param {propertyCreateManyArgs} args - Arguments to create many Properties.
     * @example
     * // Create many Properties
     * const property = await prisma.property.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends propertyCreateManyArgs>(args?: SelectSubset<T, propertyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Property.
     * @param {propertyDeleteArgs} args - Arguments to delete one Property.
     * @example
     * // Delete one Property
     * const Property = await prisma.property.delete({
     *   where: {
     *     // ... filter to delete one Property
     *   }
     * })
     * 
     */
    delete<T extends propertyDeleteArgs>(args: SelectSubset<T, propertyDeleteArgs<ExtArgs>>): Prisma__propertyClient<$Result.GetResult<Prisma.$propertyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Property.
     * @param {propertyUpdateArgs} args - Arguments to update one Property.
     * @example
     * // Update one Property
     * const property = await prisma.property.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends propertyUpdateArgs>(args: SelectSubset<T, propertyUpdateArgs<ExtArgs>>): Prisma__propertyClient<$Result.GetResult<Prisma.$propertyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Properties.
     * @param {propertyDeleteManyArgs} args - Arguments to filter Properties to delete.
     * @example
     * // Delete a few Properties
     * const { count } = await prisma.property.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends propertyDeleteManyArgs>(args?: SelectSubset<T, propertyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Properties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {propertyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Properties
     * const property = await prisma.property.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends propertyUpdateManyArgs>(args: SelectSubset<T, propertyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Property.
     * @param {propertyUpsertArgs} args - Arguments to update or create a Property.
     * @example
     * // Update or create a Property
     * const property = await prisma.property.upsert({
     *   create: {
     *     // ... data to create a Property
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Property we want to update
     *   }
     * })
     */
    upsert<T extends propertyUpsertArgs>(args: SelectSubset<T, propertyUpsertArgs<ExtArgs>>): Prisma__propertyClient<$Result.GetResult<Prisma.$propertyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Properties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {propertyCountArgs} args - Arguments to filter Properties to count.
     * @example
     * // Count the number of Properties
     * const count = await prisma.property.count({
     *   where: {
     *     // ... the filter for the Properties we want to count
     *   }
     * })
    **/
    count<T extends propertyCountArgs>(
      args?: Subset<T, propertyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PropertyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Property.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PropertyAggregateArgs>(args: Subset<T, PropertyAggregateArgs>): Prisma.PrismaPromise<GetPropertyAggregateType<T>>

    /**
     * Group by Property.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {propertyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends propertyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: propertyGroupByArgs['orderBy'] }
        : { orderBy?: propertyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, propertyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPropertyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the property model
   */
  readonly fields: propertyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for property.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__propertyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    images<T extends property$imagesArgs<ExtArgs> = {}>(args?: Subset<T, property$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$propertyimagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    deals<T extends property$dealsArgs<ExtArgs> = {}>(args?: Subset<T, property$dealsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$dealPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    expenses<T extends property$expensesArgs<ExtArgs> = {}>(args?: Subset<T, property$expensesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$expensePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    inquiries<T extends property$inquiriesArgs<ExtArgs> = {}>(args?: Subset<T, property$inquiriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$inquiryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    contactLeads<T extends property$contactLeadsArgs<ExtArgs> = {}>(args?: Subset<T, property$contactLeadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$contactleadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    coOwnerships<T extends property$coOwnershipsArgs<ExtArgs> = {}>(args?: Subset<T, property$coOwnershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coownershipPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the property model
   */
  interface propertyFieldRefs {
    readonly id: FieldRef<"property", 'Int'>
    readonly title: FieldRef<"property", 'String'>
    readonly slug: FieldRef<"property", 'String'>
    readonly description: FieldRef<"property", 'String'>
    readonly price: FieldRef<"property", 'Decimal'>
    readonly location: FieldRef<"property", 'String'>
    readonly category: FieldRef<"property", 'String'>
    readonly bedrooms: FieldRef<"property", 'Int'>
    readonly bathrooms: FieldRef<"property", 'Int'>
    readonly area_m2: FieldRef<"property", 'Decimal'>
    readonly surfaceHabitable: FieldRef<"property", 'Int'>
    readonly type: FieldRef<"property", 'String'>
    readonly yearOfConstruction: FieldRef<"property", 'Int'>
    readonly capacity: FieldRef<"property", 'Int'>
    readonly status: FieldRef<"property", 'String'>
    readonly mainImage: FieldRef<"property", 'String'>
    readonly createdAt: FieldRef<"property", 'DateTime'>
    readonly updatedAt: FieldRef<"property", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * property findUnique
   */
  export type propertyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the property
     */
    select?: propertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the property
     */
    omit?: propertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyInclude<ExtArgs> | null
    /**
     * Filter, which property to fetch.
     */
    where: propertyWhereUniqueInput
  }

  /**
   * property findUniqueOrThrow
   */
  export type propertyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the property
     */
    select?: propertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the property
     */
    omit?: propertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyInclude<ExtArgs> | null
    /**
     * Filter, which property to fetch.
     */
    where: propertyWhereUniqueInput
  }

  /**
   * property findFirst
   */
  export type propertyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the property
     */
    select?: propertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the property
     */
    omit?: propertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyInclude<ExtArgs> | null
    /**
     * Filter, which property to fetch.
     */
    where?: propertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of properties to fetch.
     */
    orderBy?: propertyOrderByWithRelationInput | propertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for properties.
     */
    cursor?: propertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of properties.
     */
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * property findFirstOrThrow
   */
  export type propertyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the property
     */
    select?: propertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the property
     */
    omit?: propertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyInclude<ExtArgs> | null
    /**
     * Filter, which property to fetch.
     */
    where?: propertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of properties to fetch.
     */
    orderBy?: propertyOrderByWithRelationInput | propertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for properties.
     */
    cursor?: propertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of properties.
     */
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * property findMany
   */
  export type propertyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the property
     */
    select?: propertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the property
     */
    omit?: propertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyInclude<ExtArgs> | null
    /**
     * Filter, which properties to fetch.
     */
    where?: propertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of properties to fetch.
     */
    orderBy?: propertyOrderByWithRelationInput | propertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing properties.
     */
    cursor?: propertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` properties.
     */
    skip?: number
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * property create
   */
  export type propertyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the property
     */
    select?: propertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the property
     */
    omit?: propertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyInclude<ExtArgs> | null
    /**
     * The data needed to create a property.
     */
    data: XOR<propertyCreateInput, propertyUncheckedCreateInput>
  }

  /**
   * property createMany
   */
  export type propertyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many properties.
     */
    data: propertyCreateManyInput | propertyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * property update
   */
  export type propertyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the property
     */
    select?: propertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the property
     */
    omit?: propertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyInclude<ExtArgs> | null
    /**
     * The data needed to update a property.
     */
    data: XOR<propertyUpdateInput, propertyUncheckedUpdateInput>
    /**
     * Choose, which property to update.
     */
    where: propertyWhereUniqueInput
  }

  /**
   * property updateMany
   */
  export type propertyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update properties.
     */
    data: XOR<propertyUpdateManyMutationInput, propertyUncheckedUpdateManyInput>
    /**
     * Filter which properties to update
     */
    where?: propertyWhereInput
    /**
     * Limit how many properties to update.
     */
    limit?: number
  }

  /**
   * property upsert
   */
  export type propertyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the property
     */
    select?: propertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the property
     */
    omit?: propertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyInclude<ExtArgs> | null
    /**
     * The filter to search for the property to update in case it exists.
     */
    where: propertyWhereUniqueInput
    /**
     * In case the property found by the `where` argument doesn't exist, create a new property with this data.
     */
    create: XOR<propertyCreateInput, propertyUncheckedCreateInput>
    /**
     * In case the property was found with the provided `where` argument, update it with this data.
     */
    update: XOR<propertyUpdateInput, propertyUncheckedUpdateInput>
  }

  /**
   * property delete
   */
  export type propertyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the property
     */
    select?: propertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the property
     */
    omit?: propertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyInclude<ExtArgs> | null
    /**
     * Filter which property to delete.
     */
    where: propertyWhereUniqueInput
  }

  /**
   * property deleteMany
   */
  export type propertyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which properties to delete
     */
    where?: propertyWhereInput
    /**
     * Limit how many properties to delete.
     */
    limit?: number
  }

  /**
   * property.images
   */
  export type property$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propertyimage
     */
    select?: propertyimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propertyimage
     */
    omit?: propertyimageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyimageInclude<ExtArgs> | null
    where?: propertyimageWhereInput
    orderBy?: propertyimageOrderByWithRelationInput | propertyimageOrderByWithRelationInput[]
    cursor?: propertyimageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PropertyimageScalarFieldEnum | PropertyimageScalarFieldEnum[]
  }

  /**
   * property.deals
   */
  export type property$dealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deal
     */
    select?: dealSelect<ExtArgs> | null
    /**
     * Omit specific fields from the deal
     */
    omit?: dealOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: dealInclude<ExtArgs> | null
    where?: dealWhereInput
    orderBy?: dealOrderByWithRelationInput | dealOrderByWithRelationInput[]
    cursor?: dealWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DealScalarFieldEnum | DealScalarFieldEnum[]
  }

  /**
   * property.expenses
   */
  export type property$expensesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the expense
     */
    select?: expenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the expense
     */
    omit?: expenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: expenseInclude<ExtArgs> | null
    where?: expenseWhereInput
    orderBy?: expenseOrderByWithRelationInput | expenseOrderByWithRelationInput[]
    cursor?: expenseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpenseScalarFieldEnum | ExpenseScalarFieldEnum[]
  }

  /**
   * property.inquiries
   */
  export type property$inquiriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inquiry
     */
    select?: inquirySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inquiry
     */
    omit?: inquiryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inquiryInclude<ExtArgs> | null
    where?: inquiryWhereInput
    orderBy?: inquiryOrderByWithRelationInput | inquiryOrderByWithRelationInput[]
    cursor?: inquiryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InquiryScalarFieldEnum | InquiryScalarFieldEnum[]
  }

  /**
   * property.contactLeads
   */
  export type property$contactLeadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the contactlead
     */
    select?: contactleadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the contactlead
     */
    omit?: contactleadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: contactleadInclude<ExtArgs> | null
    where?: contactleadWhereInput
    orderBy?: contactleadOrderByWithRelationInput | contactleadOrderByWithRelationInput[]
    cursor?: contactleadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactleadScalarFieldEnum | ContactleadScalarFieldEnum[]
  }

  /**
   * property.coOwnerships
   */
  export type property$coOwnershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the coownership
     */
    select?: coownershipSelect<ExtArgs> | null
    /**
     * Omit specific fields from the coownership
     */
    omit?: coownershipOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coownershipInclude<ExtArgs> | null
    where?: coownershipWhereInput
    orderBy?: coownershipOrderByWithRelationInput | coownershipOrderByWithRelationInput[]
    cursor?: coownershipWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoownershipScalarFieldEnum | CoownershipScalarFieldEnum[]
  }

  /**
   * property without action
   */
  export type propertyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the property
     */
    select?: propertySelect<ExtArgs> | null
    /**
     * Omit specific fields from the property
     */
    omit?: propertyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyInclude<ExtArgs> | null
  }


  /**
   * Model propertyimage
   */

  export type AggregatePropertyimage = {
    _count: PropertyimageCountAggregateOutputType | null
    _avg: PropertyimageAvgAggregateOutputType | null
    _sum: PropertyimageSumAggregateOutputType | null
    _min: PropertyimageMinAggregateOutputType | null
    _max: PropertyimageMaxAggregateOutputType | null
  }

  export type PropertyimageAvgAggregateOutputType = {
    id: number | null
    propertyId: number | null
    order: number | null
  }

  export type PropertyimageSumAggregateOutputType = {
    id: number | null
    propertyId: number | null
    order: number | null
  }

  export type PropertyimageMinAggregateOutputType = {
    id: number | null
    propertyId: number | null
    url: string | null
    alt: string | null
    order: number | null
    createdAt: Date | null
  }

  export type PropertyimageMaxAggregateOutputType = {
    id: number | null
    propertyId: number | null
    url: string | null
    alt: string | null
    order: number | null
    createdAt: Date | null
  }

  export type PropertyimageCountAggregateOutputType = {
    id: number
    propertyId: number
    url: number
    alt: number
    order: number
    createdAt: number
    _all: number
  }


  export type PropertyimageAvgAggregateInputType = {
    id?: true
    propertyId?: true
    order?: true
  }

  export type PropertyimageSumAggregateInputType = {
    id?: true
    propertyId?: true
    order?: true
  }

  export type PropertyimageMinAggregateInputType = {
    id?: true
    propertyId?: true
    url?: true
    alt?: true
    order?: true
    createdAt?: true
  }

  export type PropertyimageMaxAggregateInputType = {
    id?: true
    propertyId?: true
    url?: true
    alt?: true
    order?: true
    createdAt?: true
  }

  export type PropertyimageCountAggregateInputType = {
    id?: true
    propertyId?: true
    url?: true
    alt?: true
    order?: true
    createdAt?: true
    _all?: true
  }

  export type PropertyimageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which propertyimage to aggregate.
     */
    where?: propertyimageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of propertyimages to fetch.
     */
    orderBy?: propertyimageOrderByWithRelationInput | propertyimageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: propertyimageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` propertyimages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` propertyimages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned propertyimages
    **/
    _count?: true | PropertyimageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PropertyimageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PropertyimageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PropertyimageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PropertyimageMaxAggregateInputType
  }

  export type GetPropertyimageAggregateType<T extends PropertyimageAggregateArgs> = {
        [P in keyof T & keyof AggregatePropertyimage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePropertyimage[P]>
      : GetScalarType<T[P], AggregatePropertyimage[P]>
  }




  export type propertyimageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: propertyimageWhereInput
    orderBy?: propertyimageOrderByWithAggregationInput | propertyimageOrderByWithAggregationInput[]
    by: PropertyimageScalarFieldEnum[] | PropertyimageScalarFieldEnum
    having?: propertyimageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PropertyimageCountAggregateInputType | true
    _avg?: PropertyimageAvgAggregateInputType
    _sum?: PropertyimageSumAggregateInputType
    _min?: PropertyimageMinAggregateInputType
    _max?: PropertyimageMaxAggregateInputType
  }

  export type PropertyimageGroupByOutputType = {
    id: number
    propertyId: number
    url: string
    alt: string | null
    order: number
    createdAt: Date
    _count: PropertyimageCountAggregateOutputType | null
    _avg: PropertyimageAvgAggregateOutputType | null
    _sum: PropertyimageSumAggregateOutputType | null
    _min: PropertyimageMinAggregateOutputType | null
    _max: PropertyimageMaxAggregateOutputType | null
  }

  type GetPropertyimageGroupByPayload<T extends propertyimageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PropertyimageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PropertyimageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PropertyimageGroupByOutputType[P]>
            : GetScalarType<T[P], PropertyimageGroupByOutputType[P]>
        }
      >
    >


  export type propertyimageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    propertyId?: boolean
    url?: boolean
    alt?: boolean
    order?: boolean
    createdAt?: boolean
    property?: boolean | propertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["propertyimage"]>



  export type propertyimageSelectScalar = {
    id?: boolean
    propertyId?: boolean
    url?: boolean
    alt?: boolean
    order?: boolean
    createdAt?: boolean
  }

  export type propertyimageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "propertyId" | "url" | "alt" | "order" | "createdAt", ExtArgs["result"]["propertyimage"]>
  export type propertyimageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    property?: boolean | propertyDefaultArgs<ExtArgs>
  }

  export type $propertyimagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "propertyimage"
    objects: {
      property: Prisma.$propertyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      propertyId: number
      url: string
      alt: string | null
      order: number
      createdAt: Date
    }, ExtArgs["result"]["propertyimage"]>
    composites: {}
  }

  type propertyimageGetPayload<S extends boolean | null | undefined | propertyimageDefaultArgs> = $Result.GetResult<Prisma.$propertyimagePayload, S>

  type propertyimageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<propertyimageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PropertyimageCountAggregateInputType | true
    }

  export interface propertyimageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['propertyimage'], meta: { name: 'propertyimage' } }
    /**
     * Find zero or one Propertyimage that matches the filter.
     * @param {propertyimageFindUniqueArgs} args - Arguments to find a Propertyimage
     * @example
     * // Get one Propertyimage
     * const propertyimage = await prisma.propertyimage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends propertyimageFindUniqueArgs>(args: SelectSubset<T, propertyimageFindUniqueArgs<ExtArgs>>): Prisma__propertyimageClient<$Result.GetResult<Prisma.$propertyimagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Propertyimage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {propertyimageFindUniqueOrThrowArgs} args - Arguments to find a Propertyimage
     * @example
     * // Get one Propertyimage
     * const propertyimage = await prisma.propertyimage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends propertyimageFindUniqueOrThrowArgs>(args: SelectSubset<T, propertyimageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__propertyimageClient<$Result.GetResult<Prisma.$propertyimagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Propertyimage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {propertyimageFindFirstArgs} args - Arguments to find a Propertyimage
     * @example
     * // Get one Propertyimage
     * const propertyimage = await prisma.propertyimage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends propertyimageFindFirstArgs>(args?: SelectSubset<T, propertyimageFindFirstArgs<ExtArgs>>): Prisma__propertyimageClient<$Result.GetResult<Prisma.$propertyimagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Propertyimage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {propertyimageFindFirstOrThrowArgs} args - Arguments to find a Propertyimage
     * @example
     * // Get one Propertyimage
     * const propertyimage = await prisma.propertyimage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends propertyimageFindFirstOrThrowArgs>(args?: SelectSubset<T, propertyimageFindFirstOrThrowArgs<ExtArgs>>): Prisma__propertyimageClient<$Result.GetResult<Prisma.$propertyimagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Propertyimages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {propertyimageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Propertyimages
     * const propertyimages = await prisma.propertyimage.findMany()
     * 
     * // Get first 10 Propertyimages
     * const propertyimages = await prisma.propertyimage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const propertyimageWithIdOnly = await prisma.propertyimage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends propertyimageFindManyArgs>(args?: SelectSubset<T, propertyimageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$propertyimagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Propertyimage.
     * @param {propertyimageCreateArgs} args - Arguments to create a Propertyimage.
     * @example
     * // Create one Propertyimage
     * const Propertyimage = await prisma.propertyimage.create({
     *   data: {
     *     // ... data to create a Propertyimage
     *   }
     * })
     * 
     */
    create<T extends propertyimageCreateArgs>(args: SelectSubset<T, propertyimageCreateArgs<ExtArgs>>): Prisma__propertyimageClient<$Result.GetResult<Prisma.$propertyimagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Propertyimages.
     * @param {propertyimageCreateManyArgs} args - Arguments to create many Propertyimages.
     * @example
     * // Create many Propertyimages
     * const propertyimage = await prisma.propertyimage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends propertyimageCreateManyArgs>(args?: SelectSubset<T, propertyimageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Propertyimage.
     * @param {propertyimageDeleteArgs} args - Arguments to delete one Propertyimage.
     * @example
     * // Delete one Propertyimage
     * const Propertyimage = await prisma.propertyimage.delete({
     *   where: {
     *     // ... filter to delete one Propertyimage
     *   }
     * })
     * 
     */
    delete<T extends propertyimageDeleteArgs>(args: SelectSubset<T, propertyimageDeleteArgs<ExtArgs>>): Prisma__propertyimageClient<$Result.GetResult<Prisma.$propertyimagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Propertyimage.
     * @param {propertyimageUpdateArgs} args - Arguments to update one Propertyimage.
     * @example
     * // Update one Propertyimage
     * const propertyimage = await prisma.propertyimage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends propertyimageUpdateArgs>(args: SelectSubset<T, propertyimageUpdateArgs<ExtArgs>>): Prisma__propertyimageClient<$Result.GetResult<Prisma.$propertyimagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Propertyimages.
     * @param {propertyimageDeleteManyArgs} args - Arguments to filter Propertyimages to delete.
     * @example
     * // Delete a few Propertyimages
     * const { count } = await prisma.propertyimage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends propertyimageDeleteManyArgs>(args?: SelectSubset<T, propertyimageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Propertyimages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {propertyimageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Propertyimages
     * const propertyimage = await prisma.propertyimage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends propertyimageUpdateManyArgs>(args: SelectSubset<T, propertyimageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Propertyimage.
     * @param {propertyimageUpsertArgs} args - Arguments to update or create a Propertyimage.
     * @example
     * // Update or create a Propertyimage
     * const propertyimage = await prisma.propertyimage.upsert({
     *   create: {
     *     // ... data to create a Propertyimage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Propertyimage we want to update
     *   }
     * })
     */
    upsert<T extends propertyimageUpsertArgs>(args: SelectSubset<T, propertyimageUpsertArgs<ExtArgs>>): Prisma__propertyimageClient<$Result.GetResult<Prisma.$propertyimagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Propertyimages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {propertyimageCountArgs} args - Arguments to filter Propertyimages to count.
     * @example
     * // Count the number of Propertyimages
     * const count = await prisma.propertyimage.count({
     *   where: {
     *     // ... the filter for the Propertyimages we want to count
     *   }
     * })
    **/
    count<T extends propertyimageCountArgs>(
      args?: Subset<T, propertyimageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PropertyimageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Propertyimage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyimageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PropertyimageAggregateArgs>(args: Subset<T, PropertyimageAggregateArgs>): Prisma.PrismaPromise<GetPropertyimageAggregateType<T>>

    /**
     * Group by Propertyimage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {propertyimageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends propertyimageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: propertyimageGroupByArgs['orderBy'] }
        : { orderBy?: propertyimageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, propertyimageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPropertyimageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the propertyimage model
   */
  readonly fields: propertyimageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for propertyimage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__propertyimageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    property<T extends propertyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, propertyDefaultArgs<ExtArgs>>): Prisma__propertyClient<$Result.GetResult<Prisma.$propertyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the propertyimage model
   */
  interface propertyimageFieldRefs {
    readonly id: FieldRef<"propertyimage", 'Int'>
    readonly propertyId: FieldRef<"propertyimage", 'Int'>
    readonly url: FieldRef<"propertyimage", 'String'>
    readonly alt: FieldRef<"propertyimage", 'String'>
    readonly order: FieldRef<"propertyimage", 'Int'>
    readonly createdAt: FieldRef<"propertyimage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * propertyimage findUnique
   */
  export type propertyimageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propertyimage
     */
    select?: propertyimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propertyimage
     */
    omit?: propertyimageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyimageInclude<ExtArgs> | null
    /**
     * Filter, which propertyimage to fetch.
     */
    where: propertyimageWhereUniqueInput
  }

  /**
   * propertyimage findUniqueOrThrow
   */
  export type propertyimageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propertyimage
     */
    select?: propertyimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propertyimage
     */
    omit?: propertyimageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyimageInclude<ExtArgs> | null
    /**
     * Filter, which propertyimage to fetch.
     */
    where: propertyimageWhereUniqueInput
  }

  /**
   * propertyimage findFirst
   */
  export type propertyimageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propertyimage
     */
    select?: propertyimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propertyimage
     */
    omit?: propertyimageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyimageInclude<ExtArgs> | null
    /**
     * Filter, which propertyimage to fetch.
     */
    where?: propertyimageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of propertyimages to fetch.
     */
    orderBy?: propertyimageOrderByWithRelationInput | propertyimageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for propertyimages.
     */
    cursor?: propertyimageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` propertyimages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` propertyimages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of propertyimages.
     */
    distinct?: PropertyimageScalarFieldEnum | PropertyimageScalarFieldEnum[]
  }

  /**
   * propertyimage findFirstOrThrow
   */
  export type propertyimageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propertyimage
     */
    select?: propertyimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propertyimage
     */
    omit?: propertyimageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyimageInclude<ExtArgs> | null
    /**
     * Filter, which propertyimage to fetch.
     */
    where?: propertyimageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of propertyimages to fetch.
     */
    orderBy?: propertyimageOrderByWithRelationInput | propertyimageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for propertyimages.
     */
    cursor?: propertyimageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` propertyimages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` propertyimages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of propertyimages.
     */
    distinct?: PropertyimageScalarFieldEnum | PropertyimageScalarFieldEnum[]
  }

  /**
   * propertyimage findMany
   */
  export type propertyimageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propertyimage
     */
    select?: propertyimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propertyimage
     */
    omit?: propertyimageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyimageInclude<ExtArgs> | null
    /**
     * Filter, which propertyimages to fetch.
     */
    where?: propertyimageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of propertyimages to fetch.
     */
    orderBy?: propertyimageOrderByWithRelationInput | propertyimageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing propertyimages.
     */
    cursor?: propertyimageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` propertyimages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` propertyimages.
     */
    skip?: number
    distinct?: PropertyimageScalarFieldEnum | PropertyimageScalarFieldEnum[]
  }

  /**
   * propertyimage create
   */
  export type propertyimageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propertyimage
     */
    select?: propertyimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propertyimage
     */
    omit?: propertyimageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyimageInclude<ExtArgs> | null
    /**
     * The data needed to create a propertyimage.
     */
    data: XOR<propertyimageCreateInput, propertyimageUncheckedCreateInput>
  }

  /**
   * propertyimage createMany
   */
  export type propertyimageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many propertyimages.
     */
    data: propertyimageCreateManyInput | propertyimageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * propertyimage update
   */
  export type propertyimageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propertyimage
     */
    select?: propertyimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propertyimage
     */
    omit?: propertyimageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyimageInclude<ExtArgs> | null
    /**
     * The data needed to update a propertyimage.
     */
    data: XOR<propertyimageUpdateInput, propertyimageUncheckedUpdateInput>
    /**
     * Choose, which propertyimage to update.
     */
    where: propertyimageWhereUniqueInput
  }

  /**
   * propertyimage updateMany
   */
  export type propertyimageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update propertyimages.
     */
    data: XOR<propertyimageUpdateManyMutationInput, propertyimageUncheckedUpdateManyInput>
    /**
     * Filter which propertyimages to update
     */
    where?: propertyimageWhereInput
    /**
     * Limit how many propertyimages to update.
     */
    limit?: number
  }

  /**
   * propertyimage upsert
   */
  export type propertyimageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propertyimage
     */
    select?: propertyimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propertyimage
     */
    omit?: propertyimageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyimageInclude<ExtArgs> | null
    /**
     * The filter to search for the propertyimage to update in case it exists.
     */
    where: propertyimageWhereUniqueInput
    /**
     * In case the propertyimage found by the `where` argument doesn't exist, create a new propertyimage with this data.
     */
    create: XOR<propertyimageCreateInput, propertyimageUncheckedCreateInput>
    /**
     * In case the propertyimage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<propertyimageUpdateInput, propertyimageUncheckedUpdateInput>
  }

  /**
   * propertyimage delete
   */
  export type propertyimageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propertyimage
     */
    select?: propertyimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propertyimage
     */
    omit?: propertyimageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyimageInclude<ExtArgs> | null
    /**
     * Filter which propertyimage to delete.
     */
    where: propertyimageWhereUniqueInput
  }

  /**
   * propertyimage deleteMany
   */
  export type propertyimageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which propertyimages to delete
     */
    where?: propertyimageWhereInput
    /**
     * Limit how many propertyimages to delete.
     */
    limit?: number
  }

  /**
   * propertyimage without action
   */
  export type propertyimageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the propertyimage
     */
    select?: propertyimageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the propertyimage
     */
    omit?: propertyimageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: propertyimageInclude<ExtArgs> | null
  }


  /**
   * Model service
   */

  export type AggregateService = {
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  export type ServiceAvgAggregateOutputType = {
    id: number | null
  }

  export type ServiceSumAggregateOutputType = {
    id: number | null
  }

  export type ServiceMinAggregateOutputType = {
    id: number | null
    name: string | null
    title: string | null
    description: string | null
    content: string | null
    icon: string | null
    slug: string | null
  }

  export type ServiceMaxAggregateOutputType = {
    id: number | null
    name: string | null
    title: string | null
    description: string | null
    content: string | null
    icon: string | null
    slug: string | null
  }

  export type ServiceCountAggregateOutputType = {
    id: number
    name: number
    title: number
    description: number
    content: number
    icon: number
    slug: number
    _all: number
  }


  export type ServiceAvgAggregateInputType = {
    id?: true
  }

  export type ServiceSumAggregateInputType = {
    id?: true
  }

  export type ServiceMinAggregateInputType = {
    id?: true
    name?: true
    title?: true
    description?: true
    content?: true
    icon?: true
    slug?: true
  }

  export type ServiceMaxAggregateInputType = {
    id?: true
    name?: true
    title?: true
    description?: true
    content?: true
    icon?: true
    slug?: true
  }

  export type ServiceCountAggregateInputType = {
    id?: true
    name?: true
    title?: true
    description?: true
    content?: true
    icon?: true
    slug?: true
    _all?: true
  }

  export type ServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which service to aggregate.
     */
    where?: serviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     */
    orderBy?: serviceOrderByWithRelationInput | serviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: serviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned services
    **/
    _count?: true | ServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceMaxAggregateInputType
  }

  export type GetServiceAggregateType<T extends ServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateService[P]>
      : GetScalarType<T[P], AggregateService[P]>
  }




  export type serviceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: serviceWhereInput
    orderBy?: serviceOrderByWithAggregationInput | serviceOrderByWithAggregationInput[]
    by: ServiceScalarFieldEnum[] | ServiceScalarFieldEnum
    having?: serviceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCountAggregateInputType | true
    _avg?: ServiceAvgAggregateInputType
    _sum?: ServiceSumAggregateInputType
    _min?: ServiceMinAggregateInputType
    _max?: ServiceMaxAggregateInputType
  }

  export type ServiceGroupByOutputType = {
    id: number
    name: string
    title: string | null
    description: string | null
    content: string | null
    icon: string | null
    slug: string | null
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  type GetServiceGroupByPayload<T extends serviceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceGroupByOutputType[P]>
        }
      >
    >


  export type serviceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    title?: boolean
    description?: boolean
    content?: boolean
    icon?: boolean
    slug?: boolean
  }, ExtArgs["result"]["service"]>



  export type serviceSelectScalar = {
    id?: boolean
    name?: boolean
    title?: boolean
    description?: boolean
    content?: boolean
    icon?: boolean
    slug?: boolean
  }

  export type serviceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "title" | "description" | "content" | "icon" | "slug", ExtArgs["result"]["service"]>

  export type $servicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "service"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      title: string | null
      description: string | null
      content: string | null
      icon: string | null
      slug: string | null
    }, ExtArgs["result"]["service"]>
    composites: {}
  }

  type serviceGetPayload<S extends boolean | null | undefined | serviceDefaultArgs> = $Result.GetResult<Prisma.$servicePayload, S>

  type serviceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<serviceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceCountAggregateInputType | true
    }

  export interface serviceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['service'], meta: { name: 'service' } }
    /**
     * Find zero or one Service that matches the filter.
     * @param {serviceFindUniqueArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends serviceFindUniqueArgs>(args: SelectSubset<T, serviceFindUniqueArgs<ExtArgs>>): Prisma__serviceClient<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Service that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {serviceFindUniqueOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends serviceFindUniqueOrThrowArgs>(args: SelectSubset<T, serviceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__serviceClient<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Service that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceFindFirstArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends serviceFindFirstArgs>(args?: SelectSubset<T, serviceFindFirstArgs<ExtArgs>>): Prisma__serviceClient<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Service that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceFindFirstOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends serviceFindFirstOrThrowArgs>(args?: SelectSubset<T, serviceFindFirstOrThrowArgs<ExtArgs>>): Prisma__serviceClient<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.service.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.service.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceWithIdOnly = await prisma.service.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends serviceFindManyArgs>(args?: SelectSubset<T, serviceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Service.
     * @param {serviceCreateArgs} args - Arguments to create a Service.
     * @example
     * // Create one Service
     * const Service = await prisma.service.create({
     *   data: {
     *     // ... data to create a Service
     *   }
     * })
     * 
     */
    create<T extends serviceCreateArgs>(args: SelectSubset<T, serviceCreateArgs<ExtArgs>>): Prisma__serviceClient<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Services.
     * @param {serviceCreateManyArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends serviceCreateManyArgs>(args?: SelectSubset<T, serviceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Service.
     * @param {serviceDeleteArgs} args - Arguments to delete one Service.
     * @example
     * // Delete one Service
     * const Service = await prisma.service.delete({
     *   where: {
     *     // ... filter to delete one Service
     *   }
     * })
     * 
     */
    delete<T extends serviceDeleteArgs>(args: SelectSubset<T, serviceDeleteArgs<ExtArgs>>): Prisma__serviceClient<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Service.
     * @param {serviceUpdateArgs} args - Arguments to update one Service.
     * @example
     * // Update one Service
     * const service = await prisma.service.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends serviceUpdateArgs>(args: SelectSubset<T, serviceUpdateArgs<ExtArgs>>): Prisma__serviceClient<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Services.
     * @param {serviceDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.service.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends serviceDeleteManyArgs>(args?: SelectSubset<T, serviceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends serviceUpdateManyArgs>(args: SelectSubset<T, serviceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Service.
     * @param {serviceUpsertArgs} args - Arguments to update or create a Service.
     * @example
     * // Update or create a Service
     * const service = await prisma.service.upsert({
     *   create: {
     *     // ... data to create a Service
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Service we want to update
     *   }
     * })
     */
    upsert<T extends serviceUpsertArgs>(args: SelectSubset<T, serviceUpsertArgs<ExtArgs>>): Prisma__serviceClient<$Result.GetResult<Prisma.$servicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.service.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends serviceCountArgs>(
      args?: Subset<T, serviceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceAggregateArgs>(args: Subset<T, ServiceAggregateArgs>): Prisma.PrismaPromise<GetServiceAggregateType<T>>

    /**
     * Group by Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {serviceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends serviceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: serviceGroupByArgs['orderBy'] }
        : { orderBy?: serviceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, serviceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the service model
   */
  readonly fields: serviceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for service.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__serviceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the service model
   */
  interface serviceFieldRefs {
    readonly id: FieldRef<"service", 'Int'>
    readonly name: FieldRef<"service", 'String'>
    readonly title: FieldRef<"service", 'String'>
    readonly description: FieldRef<"service", 'String'>
    readonly content: FieldRef<"service", 'String'>
    readonly icon: FieldRef<"service", 'String'>
    readonly slug: FieldRef<"service", 'String'>
  }
    

  // Custom InputTypes
  /**
   * service findUnique
   */
  export type serviceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the service
     */
    omit?: serviceOmit<ExtArgs> | null
    /**
     * Filter, which service to fetch.
     */
    where: serviceWhereUniqueInput
  }

  /**
   * service findUniqueOrThrow
   */
  export type serviceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the service
     */
    omit?: serviceOmit<ExtArgs> | null
    /**
     * Filter, which service to fetch.
     */
    where: serviceWhereUniqueInput
  }

  /**
   * service findFirst
   */
  export type serviceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the service
     */
    omit?: serviceOmit<ExtArgs> | null
    /**
     * Filter, which service to fetch.
     */
    where?: serviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     */
    orderBy?: serviceOrderByWithRelationInput | serviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for services.
     */
    cursor?: serviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * service findFirstOrThrow
   */
  export type serviceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the service
     */
    omit?: serviceOmit<ExtArgs> | null
    /**
     * Filter, which service to fetch.
     */
    where?: serviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     */
    orderBy?: serviceOrderByWithRelationInput | serviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for services.
     */
    cursor?: serviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * service findMany
   */
  export type serviceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the service
     */
    omit?: serviceOmit<ExtArgs> | null
    /**
     * Filter, which services to fetch.
     */
    where?: serviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of services to fetch.
     */
    orderBy?: serviceOrderByWithRelationInput | serviceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing services.
     */
    cursor?: serviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` services.
     */
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * service create
   */
  export type serviceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the service
     */
    omit?: serviceOmit<ExtArgs> | null
    /**
     * The data needed to create a service.
     */
    data: XOR<serviceCreateInput, serviceUncheckedCreateInput>
  }

  /**
   * service createMany
   */
  export type serviceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many services.
     */
    data: serviceCreateManyInput | serviceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * service update
   */
  export type serviceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the service
     */
    omit?: serviceOmit<ExtArgs> | null
    /**
     * The data needed to update a service.
     */
    data: XOR<serviceUpdateInput, serviceUncheckedUpdateInput>
    /**
     * Choose, which service to update.
     */
    where: serviceWhereUniqueInput
  }

  /**
   * service updateMany
   */
  export type serviceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update services.
     */
    data: XOR<serviceUpdateManyMutationInput, serviceUncheckedUpdateManyInput>
    /**
     * Filter which services to update
     */
    where?: serviceWhereInput
    /**
     * Limit how many services to update.
     */
    limit?: number
  }

  /**
   * service upsert
   */
  export type serviceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the service
     */
    omit?: serviceOmit<ExtArgs> | null
    /**
     * The filter to search for the service to update in case it exists.
     */
    where: serviceWhereUniqueInput
    /**
     * In case the service found by the `where` argument doesn't exist, create a new service with this data.
     */
    create: XOR<serviceCreateInput, serviceUncheckedCreateInput>
    /**
     * In case the service was found with the provided `where` argument, update it with this data.
     */
    update: XOR<serviceUpdateInput, serviceUncheckedUpdateInput>
  }

  /**
   * service delete
   */
  export type serviceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the service
     */
    omit?: serviceOmit<ExtArgs> | null
    /**
     * Filter which service to delete.
     */
    where: serviceWhereUniqueInput
  }

  /**
   * service deleteMany
   */
  export type serviceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which services to delete
     */
    where?: serviceWhereInput
    /**
     * Limit how many services to delete.
     */
    limit?: number
  }

  /**
   * service without action
   */
  export type serviceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the service
     */
    select?: serviceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the service
     */
    omit?: serviceOmit<ExtArgs> | null
  }


  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    isStaff: boolean | null
    role: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    isStaff: boolean | null
    role: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    isStaff: number
    role: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    isStaff?: true
    role?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    isStaff?: true
    role?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    isStaff?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string | null
    isStaff: boolean
    role: string
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    isStaff?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>



  export type userSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    isStaff?: boolean
    role?: boolean
    createdAt?: boolean
  }

  export type userOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "name" | "isStaff" | "role" | "createdAt", ExtArgs["result"]["user"]>

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      name: string | null
      isStaff: boolean
      role: string
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'Int'>
    readonly email: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly name: FieldRef<"user", 'String'>
    readonly isStaff: FieldRef<"user", 'Boolean'>
    readonly role: FieldRef<"user", 'String'>
    readonly createdAt: FieldRef<"user", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
  }


  /**
   * Model companyinfo
   */

  export type AggregateCompanyinfo = {
    _count: CompanyinfoCountAggregateOutputType | null
    _avg: CompanyinfoAvgAggregateOutputType | null
    _sum: CompanyinfoSumAggregateOutputType | null
    _min: CompanyinfoMinAggregateOutputType | null
    _max: CompanyinfoMaxAggregateOutputType | null
  }

  export type CompanyinfoAvgAggregateOutputType = {
    id: number | null
    order: number | null
  }

  export type CompanyinfoSumAggregateOutputType = {
    id: number | null
    order: number | null
  }

  export type CompanyinfoMinAggregateOutputType = {
    id: number | null
    key: string | null
    value: string | null
    category: string | null
    label: string | null
    order: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyinfoMaxAggregateOutputType = {
    id: number | null
    key: string | null
    value: string | null
    category: string | null
    label: string | null
    order: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyinfoCountAggregateOutputType = {
    id: number
    key: number
    value: number
    category: number
    label: number
    order: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanyinfoAvgAggregateInputType = {
    id?: true
    order?: true
  }

  export type CompanyinfoSumAggregateInputType = {
    id?: true
    order?: true
  }

  export type CompanyinfoMinAggregateInputType = {
    id?: true
    key?: true
    value?: true
    category?: true
    label?: true
    order?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyinfoMaxAggregateInputType = {
    id?: true
    key?: true
    value?: true
    category?: true
    label?: true
    order?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyinfoCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    category?: true
    label?: true
    order?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanyinfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which companyinfo to aggregate.
     */
    where?: companyinfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companyinfos to fetch.
     */
    orderBy?: companyinfoOrderByWithRelationInput | companyinfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: companyinfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companyinfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companyinfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned companyinfos
    **/
    _count?: true | CompanyinfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyinfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanyinfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyinfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyinfoMaxAggregateInputType
  }

  export type GetCompanyinfoAggregateType<T extends CompanyinfoAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanyinfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanyinfo[P]>
      : GetScalarType<T[P], AggregateCompanyinfo[P]>
  }




  export type companyinfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: companyinfoWhereInput
    orderBy?: companyinfoOrderByWithAggregationInput | companyinfoOrderByWithAggregationInput[]
    by: CompanyinfoScalarFieldEnum[] | CompanyinfoScalarFieldEnum
    having?: companyinfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyinfoCountAggregateInputType | true
    _avg?: CompanyinfoAvgAggregateInputType
    _sum?: CompanyinfoSumAggregateInputType
    _min?: CompanyinfoMinAggregateInputType
    _max?: CompanyinfoMaxAggregateInputType
  }

  export type CompanyinfoGroupByOutputType = {
    id: number
    key: string
    value: string
    category: string
    label: string | null
    order: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: CompanyinfoCountAggregateOutputType | null
    _avg: CompanyinfoAvgAggregateOutputType | null
    _sum: CompanyinfoSumAggregateOutputType | null
    _min: CompanyinfoMinAggregateOutputType | null
    _max: CompanyinfoMaxAggregateOutputType | null
  }

  type GetCompanyinfoGroupByPayload<T extends companyinfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyinfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyinfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyinfoGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyinfoGroupByOutputType[P]>
        }
      >
    >


  export type companyinfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    category?: boolean
    label?: boolean
    order?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["companyinfo"]>



  export type companyinfoSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    category?: boolean
    label?: boolean
    order?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type companyinfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "value" | "category" | "label" | "order" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["companyinfo"]>

  export type $companyinfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "companyinfo"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      key: string
      value: string
      category: string
      label: string | null
      order: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["companyinfo"]>
    composites: {}
  }

  type companyinfoGetPayload<S extends boolean | null | undefined | companyinfoDefaultArgs> = $Result.GetResult<Prisma.$companyinfoPayload, S>

  type companyinfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<companyinfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyinfoCountAggregateInputType | true
    }

  export interface companyinfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['companyinfo'], meta: { name: 'companyinfo' } }
    /**
     * Find zero or one Companyinfo that matches the filter.
     * @param {companyinfoFindUniqueArgs} args - Arguments to find a Companyinfo
     * @example
     * // Get one Companyinfo
     * const companyinfo = await prisma.companyinfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends companyinfoFindUniqueArgs>(args: SelectSubset<T, companyinfoFindUniqueArgs<ExtArgs>>): Prisma__companyinfoClient<$Result.GetResult<Prisma.$companyinfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Companyinfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {companyinfoFindUniqueOrThrowArgs} args - Arguments to find a Companyinfo
     * @example
     * // Get one Companyinfo
     * const companyinfo = await prisma.companyinfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends companyinfoFindUniqueOrThrowArgs>(args: SelectSubset<T, companyinfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__companyinfoClient<$Result.GetResult<Prisma.$companyinfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Companyinfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companyinfoFindFirstArgs} args - Arguments to find a Companyinfo
     * @example
     * // Get one Companyinfo
     * const companyinfo = await prisma.companyinfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends companyinfoFindFirstArgs>(args?: SelectSubset<T, companyinfoFindFirstArgs<ExtArgs>>): Prisma__companyinfoClient<$Result.GetResult<Prisma.$companyinfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Companyinfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companyinfoFindFirstOrThrowArgs} args - Arguments to find a Companyinfo
     * @example
     * // Get one Companyinfo
     * const companyinfo = await prisma.companyinfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends companyinfoFindFirstOrThrowArgs>(args?: SelectSubset<T, companyinfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__companyinfoClient<$Result.GetResult<Prisma.$companyinfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Companyinfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companyinfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companyinfos
     * const companyinfos = await prisma.companyinfo.findMany()
     * 
     * // Get first 10 Companyinfos
     * const companyinfos = await prisma.companyinfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyinfoWithIdOnly = await prisma.companyinfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends companyinfoFindManyArgs>(args?: SelectSubset<T, companyinfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$companyinfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Companyinfo.
     * @param {companyinfoCreateArgs} args - Arguments to create a Companyinfo.
     * @example
     * // Create one Companyinfo
     * const Companyinfo = await prisma.companyinfo.create({
     *   data: {
     *     // ... data to create a Companyinfo
     *   }
     * })
     * 
     */
    create<T extends companyinfoCreateArgs>(args: SelectSubset<T, companyinfoCreateArgs<ExtArgs>>): Prisma__companyinfoClient<$Result.GetResult<Prisma.$companyinfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Companyinfos.
     * @param {companyinfoCreateManyArgs} args - Arguments to create many Companyinfos.
     * @example
     * // Create many Companyinfos
     * const companyinfo = await prisma.companyinfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends companyinfoCreateManyArgs>(args?: SelectSubset<T, companyinfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Companyinfo.
     * @param {companyinfoDeleteArgs} args - Arguments to delete one Companyinfo.
     * @example
     * // Delete one Companyinfo
     * const Companyinfo = await prisma.companyinfo.delete({
     *   where: {
     *     // ... filter to delete one Companyinfo
     *   }
     * })
     * 
     */
    delete<T extends companyinfoDeleteArgs>(args: SelectSubset<T, companyinfoDeleteArgs<ExtArgs>>): Prisma__companyinfoClient<$Result.GetResult<Prisma.$companyinfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Companyinfo.
     * @param {companyinfoUpdateArgs} args - Arguments to update one Companyinfo.
     * @example
     * // Update one Companyinfo
     * const companyinfo = await prisma.companyinfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends companyinfoUpdateArgs>(args: SelectSubset<T, companyinfoUpdateArgs<ExtArgs>>): Prisma__companyinfoClient<$Result.GetResult<Prisma.$companyinfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Companyinfos.
     * @param {companyinfoDeleteManyArgs} args - Arguments to filter Companyinfos to delete.
     * @example
     * // Delete a few Companyinfos
     * const { count } = await prisma.companyinfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends companyinfoDeleteManyArgs>(args?: SelectSubset<T, companyinfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companyinfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companyinfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companyinfos
     * const companyinfo = await prisma.companyinfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends companyinfoUpdateManyArgs>(args: SelectSubset<T, companyinfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Companyinfo.
     * @param {companyinfoUpsertArgs} args - Arguments to update or create a Companyinfo.
     * @example
     * // Update or create a Companyinfo
     * const companyinfo = await prisma.companyinfo.upsert({
     *   create: {
     *     // ... data to create a Companyinfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Companyinfo we want to update
     *   }
     * })
     */
    upsert<T extends companyinfoUpsertArgs>(args: SelectSubset<T, companyinfoUpsertArgs<ExtArgs>>): Prisma__companyinfoClient<$Result.GetResult<Prisma.$companyinfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Companyinfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companyinfoCountArgs} args - Arguments to filter Companyinfos to count.
     * @example
     * // Count the number of Companyinfos
     * const count = await prisma.companyinfo.count({
     *   where: {
     *     // ... the filter for the Companyinfos we want to count
     *   }
     * })
    **/
    count<T extends companyinfoCountArgs>(
      args?: Subset<T, companyinfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyinfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Companyinfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyinfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyinfoAggregateArgs>(args: Subset<T, CompanyinfoAggregateArgs>): Prisma.PrismaPromise<GetCompanyinfoAggregateType<T>>

    /**
     * Group by Companyinfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companyinfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends companyinfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: companyinfoGroupByArgs['orderBy'] }
        : { orderBy?: companyinfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, companyinfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyinfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the companyinfo model
   */
  readonly fields: companyinfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for companyinfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__companyinfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the companyinfo model
   */
  interface companyinfoFieldRefs {
    readonly id: FieldRef<"companyinfo", 'Int'>
    readonly key: FieldRef<"companyinfo", 'String'>
    readonly value: FieldRef<"companyinfo", 'String'>
    readonly category: FieldRef<"companyinfo", 'String'>
    readonly label: FieldRef<"companyinfo", 'String'>
    readonly order: FieldRef<"companyinfo", 'Int'>
    readonly isActive: FieldRef<"companyinfo", 'Boolean'>
    readonly createdAt: FieldRef<"companyinfo", 'DateTime'>
    readonly updatedAt: FieldRef<"companyinfo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * companyinfo findUnique
   */
  export type companyinfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companyinfo
     */
    select?: companyinfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companyinfo
     */
    omit?: companyinfoOmit<ExtArgs> | null
    /**
     * Filter, which companyinfo to fetch.
     */
    where: companyinfoWhereUniqueInput
  }

  /**
   * companyinfo findUniqueOrThrow
   */
  export type companyinfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companyinfo
     */
    select?: companyinfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companyinfo
     */
    omit?: companyinfoOmit<ExtArgs> | null
    /**
     * Filter, which companyinfo to fetch.
     */
    where: companyinfoWhereUniqueInput
  }

  /**
   * companyinfo findFirst
   */
  export type companyinfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companyinfo
     */
    select?: companyinfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companyinfo
     */
    omit?: companyinfoOmit<ExtArgs> | null
    /**
     * Filter, which companyinfo to fetch.
     */
    where?: companyinfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companyinfos to fetch.
     */
    orderBy?: companyinfoOrderByWithRelationInput | companyinfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for companyinfos.
     */
    cursor?: companyinfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companyinfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companyinfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of companyinfos.
     */
    distinct?: CompanyinfoScalarFieldEnum | CompanyinfoScalarFieldEnum[]
  }

  /**
   * companyinfo findFirstOrThrow
   */
  export type companyinfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companyinfo
     */
    select?: companyinfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companyinfo
     */
    omit?: companyinfoOmit<ExtArgs> | null
    /**
     * Filter, which companyinfo to fetch.
     */
    where?: companyinfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companyinfos to fetch.
     */
    orderBy?: companyinfoOrderByWithRelationInput | companyinfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for companyinfos.
     */
    cursor?: companyinfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companyinfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companyinfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of companyinfos.
     */
    distinct?: CompanyinfoScalarFieldEnum | CompanyinfoScalarFieldEnum[]
  }

  /**
   * companyinfo findMany
   */
  export type companyinfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companyinfo
     */
    select?: companyinfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companyinfo
     */
    omit?: companyinfoOmit<ExtArgs> | null
    /**
     * Filter, which companyinfos to fetch.
     */
    where?: companyinfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companyinfos to fetch.
     */
    orderBy?: companyinfoOrderByWithRelationInput | companyinfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing companyinfos.
     */
    cursor?: companyinfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companyinfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companyinfos.
     */
    skip?: number
    distinct?: CompanyinfoScalarFieldEnum | CompanyinfoScalarFieldEnum[]
  }

  /**
   * companyinfo create
   */
  export type companyinfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companyinfo
     */
    select?: companyinfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companyinfo
     */
    omit?: companyinfoOmit<ExtArgs> | null
    /**
     * The data needed to create a companyinfo.
     */
    data: XOR<companyinfoCreateInput, companyinfoUncheckedCreateInput>
  }

  /**
   * companyinfo createMany
   */
  export type companyinfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many companyinfos.
     */
    data: companyinfoCreateManyInput | companyinfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * companyinfo update
   */
  export type companyinfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companyinfo
     */
    select?: companyinfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companyinfo
     */
    omit?: companyinfoOmit<ExtArgs> | null
    /**
     * The data needed to update a companyinfo.
     */
    data: XOR<companyinfoUpdateInput, companyinfoUncheckedUpdateInput>
    /**
     * Choose, which companyinfo to update.
     */
    where: companyinfoWhereUniqueInput
  }

  /**
   * companyinfo updateMany
   */
  export type companyinfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update companyinfos.
     */
    data: XOR<companyinfoUpdateManyMutationInput, companyinfoUncheckedUpdateManyInput>
    /**
     * Filter which companyinfos to update
     */
    where?: companyinfoWhereInput
    /**
     * Limit how many companyinfos to update.
     */
    limit?: number
  }

  /**
   * companyinfo upsert
   */
  export type companyinfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companyinfo
     */
    select?: companyinfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companyinfo
     */
    omit?: companyinfoOmit<ExtArgs> | null
    /**
     * The filter to search for the companyinfo to update in case it exists.
     */
    where: companyinfoWhereUniqueInput
    /**
     * In case the companyinfo found by the `where` argument doesn't exist, create a new companyinfo with this data.
     */
    create: XOR<companyinfoCreateInput, companyinfoUncheckedCreateInput>
    /**
     * In case the companyinfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<companyinfoUpdateInput, companyinfoUncheckedUpdateInput>
  }

  /**
   * companyinfo delete
   */
  export type companyinfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companyinfo
     */
    select?: companyinfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companyinfo
     */
    omit?: companyinfoOmit<ExtArgs> | null
    /**
     * Filter which companyinfo to delete.
     */
    where: companyinfoWhereUniqueInput
  }

  /**
   * companyinfo deleteMany
   */
  export type companyinfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which companyinfos to delete
     */
    where?: companyinfoWhereInput
    /**
     * Limit how many companyinfos to delete.
     */
    limit?: number
  }

  /**
   * companyinfo without action
   */
  export type companyinfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companyinfo
     */
    select?: companyinfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companyinfo
     */
    omit?: companyinfoOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AuditlogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    entity: 'entity',
    entityId: 'entityId',
    before: 'before',
    after: 'after',
    createdAt: 'createdAt'
  };

  export type AuditlogScalarFieldEnum = (typeof AuditlogScalarFieldEnum)[keyof typeof AuditlogScalarFieldEnum]


  export const ClientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    address: 'address',
    idNumber: 'idNumber',
    notes: 'notes'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const ContactleadScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    message: 'message',
    source: 'source',
    createdAt: 'createdAt',
    propertyId: 'propertyId'
  };

  export type ContactleadScalarFieldEnum = (typeof ContactleadScalarFieldEnum)[keyof typeof ContactleadScalarFieldEnum]


  export const CoownershipScalarFieldEnum: {
    id: 'id',
    propertyId: 'propertyId',
    clientId: 'clientId',
    share: 'share',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type CoownershipScalarFieldEnum = (typeof CoownershipScalarFieldEnum)[keyof typeof CoownershipScalarFieldEnum]


  export const DealScalarFieldEnum: {
    id: 'id',
    type: 'type',
    status: 'status',
    basePrice: 'basePrice',
    discount: 'discount',
    taxRate: 'taxRate',
    commissionRate: 'commissionRate',
    expectedClose: 'expectedClose',
    closedAt: 'closedAt',
    createdAt: 'createdAt',
    propertyId: 'propertyId',
    clientId: 'clientId'
  };

  export type DealScalarFieldEnum = (typeof DealScalarFieldEnum)[keyof typeof DealScalarFieldEnum]


  export const ExpenseScalarFieldEnum: {
    id: 'id',
    date: 'date',
    category: 'category',
    description: 'description',
    amount: 'amount',
    payee: 'payee',
    dealId: 'dealId',
    propertyId: 'propertyId'
  };

  export type ExpenseScalarFieldEnum = (typeof ExpenseScalarFieldEnum)[keyof typeof ExpenseScalarFieldEnum]


  export const InquiryScalarFieldEnum: {
    id: 'id',
    propertyId: 'propertyId',
    fullName: 'fullName',
    phone: 'phone',
    email: 'email',
    message: 'message',
    type: 'type',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type InquiryScalarFieldEnum = (typeof InquiryScalarFieldEnum)[keyof typeof InquiryScalarFieldEnum]


  export const InvoiceScalarFieldEnum: {
    id: 'id',
    number: 'number',
    issueDate: 'issueDate',
    dueDate: 'dueDate',
    amount: 'amount',
    status: 'status',
    dealId: 'dealId'
  };

  export type InvoiceScalarFieldEnum = (typeof InvoiceScalarFieldEnum)[keyof typeof InvoiceScalarFieldEnum]


  export const PagecontentScalarFieldEnum: {
    id: 'id',
    page: 'page',
    section: 'section',
    key: 'key',
    value: 'value',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PagecontentScalarFieldEnum = (typeof PagecontentScalarFieldEnum)[keyof typeof PagecontentScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    date: 'date',
    amount: 'amount',
    method: 'method',
    reference: 'reference',
    dealId: 'dealId',
    invoiceId: 'invoiceId'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const PaymentscheduleScalarFieldEnum: {
    id: 'id',
    dealId: 'dealId',
    label: 'label',
    dueDate: 'dueDate',
    amount: 'amount',
    status: 'status',
    paymentId: 'paymentId',
    createdAt: 'createdAt'
  };

  export type PaymentscheduleScalarFieldEnum = (typeof PaymentscheduleScalarFieldEnum)[keyof typeof PaymentscheduleScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    title: 'title',
    slug: 'slug',
    description: 'description',
    coverImage: 'coverImage',
    status: 'status',
    location: 'location',
    category: 'category',
    surface: 'surface',
    units: 'units',
    startedAt: 'startedAt',
    deliveredAt: 'deliveredAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const ProjectmediaScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    kind: 'kind',
    url: 'url',
    alt: 'alt',
    order: 'order',
    createdAt: 'createdAt'
  };

  export type ProjectmediaScalarFieldEnum = (typeof ProjectmediaScalarFieldEnum)[keyof typeof ProjectmediaScalarFieldEnum]


  export const PropertyScalarFieldEnum: {
    id: 'id',
    title: 'title',
    slug: 'slug',
    description: 'description',
    price: 'price',
    location: 'location',
    category: 'category',
    bedrooms: 'bedrooms',
    bathrooms: 'bathrooms',
    area_m2: 'area_m2',
    surfaceHabitable: 'surfaceHabitable',
    type: 'type',
    yearOfConstruction: 'yearOfConstruction',
    capacity: 'capacity',
    status: 'status',
    mainImage: 'mainImage',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PropertyScalarFieldEnum = (typeof PropertyScalarFieldEnum)[keyof typeof PropertyScalarFieldEnum]


  export const PropertyimageScalarFieldEnum: {
    id: 'id',
    propertyId: 'propertyId',
    url: 'url',
    alt: 'alt',
    order: 'order',
    createdAt: 'createdAt'
  };

  export type PropertyimageScalarFieldEnum = (typeof PropertyimageScalarFieldEnum)[keyof typeof PropertyimageScalarFieldEnum]


  export const ServiceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    title: 'title',
    description: 'description',
    content: 'content',
    icon: 'icon',
    slug: 'slug'
  };

  export type ServiceScalarFieldEnum = (typeof ServiceScalarFieldEnum)[keyof typeof ServiceScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    isStaff: 'isStaff',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CompanyinfoScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    category: 'category',
    label: 'label',
    order: 'order',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyinfoScalarFieldEnum = (typeof CompanyinfoScalarFieldEnum)[keyof typeof CompanyinfoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const auditlogOrderByRelevanceFieldEnum: {
    action: 'action',
    entity: 'entity'
  };

  export type auditlogOrderByRelevanceFieldEnum = (typeof auditlogOrderByRelevanceFieldEnum)[keyof typeof auditlogOrderByRelevanceFieldEnum]


  export const clientOrderByRelevanceFieldEnum: {
    name: 'name',
    email: 'email',
    phone: 'phone',
    address: 'address',
    idNumber: 'idNumber',
    notes: 'notes'
  };

  export type clientOrderByRelevanceFieldEnum = (typeof clientOrderByRelevanceFieldEnum)[keyof typeof clientOrderByRelevanceFieldEnum]


  export const contactleadOrderByRelevanceFieldEnum: {
    name: 'name',
    email: 'email',
    phone: 'phone',
    message: 'message',
    source: 'source'
  };

  export type contactleadOrderByRelevanceFieldEnum = (typeof contactleadOrderByRelevanceFieldEnum)[keyof typeof contactleadOrderByRelevanceFieldEnum]


  export const coownershipOrderByRelevanceFieldEnum: {
    role: 'role'
  };

  export type coownershipOrderByRelevanceFieldEnum = (typeof coownershipOrderByRelevanceFieldEnum)[keyof typeof coownershipOrderByRelevanceFieldEnum]


  export const dealOrderByRelevanceFieldEnum: {
    type: 'type',
    status: 'status'
  };

  export type dealOrderByRelevanceFieldEnum = (typeof dealOrderByRelevanceFieldEnum)[keyof typeof dealOrderByRelevanceFieldEnum]


  export const expenseOrderByRelevanceFieldEnum: {
    category: 'category',
    description: 'description',
    payee: 'payee'
  };

  export type expenseOrderByRelevanceFieldEnum = (typeof expenseOrderByRelevanceFieldEnum)[keyof typeof expenseOrderByRelevanceFieldEnum]


  export const inquiryOrderByRelevanceFieldEnum: {
    fullName: 'fullName',
    phone: 'phone',
    email: 'email',
    message: 'message'
  };

  export type inquiryOrderByRelevanceFieldEnum = (typeof inquiryOrderByRelevanceFieldEnum)[keyof typeof inquiryOrderByRelevanceFieldEnum]


  export const invoiceOrderByRelevanceFieldEnum: {
    number: 'number',
    status: 'status'
  };

  export type invoiceOrderByRelevanceFieldEnum = (typeof invoiceOrderByRelevanceFieldEnum)[keyof typeof invoiceOrderByRelevanceFieldEnum]


  export const pagecontentOrderByRelevanceFieldEnum: {
    page: 'page',
    section: 'section',
    key: 'key'
  };

  export type pagecontentOrderByRelevanceFieldEnum = (typeof pagecontentOrderByRelevanceFieldEnum)[keyof typeof pagecontentOrderByRelevanceFieldEnum]


  export const paymentOrderByRelevanceFieldEnum: {
    method: 'method',
    reference: 'reference'
  };

  export type paymentOrderByRelevanceFieldEnum = (typeof paymentOrderByRelevanceFieldEnum)[keyof typeof paymentOrderByRelevanceFieldEnum]


  export const paymentscheduleOrderByRelevanceFieldEnum: {
    label: 'label',
    status: 'status'
  };

  export type paymentscheduleOrderByRelevanceFieldEnum = (typeof paymentscheduleOrderByRelevanceFieldEnum)[keyof typeof paymentscheduleOrderByRelevanceFieldEnum]


  export const projectOrderByRelevanceFieldEnum: {
    title: 'title',
    slug: 'slug',
    description: 'description',
    coverImage: 'coverImage',
    status: 'status',
    location: 'location',
    category: 'category'
  };

  export type projectOrderByRelevanceFieldEnum = (typeof projectOrderByRelevanceFieldEnum)[keyof typeof projectOrderByRelevanceFieldEnum]


  export const projectmediaOrderByRelevanceFieldEnum: {
    kind: 'kind',
    url: 'url',
    alt: 'alt'
  };

  export type projectmediaOrderByRelevanceFieldEnum = (typeof projectmediaOrderByRelevanceFieldEnum)[keyof typeof projectmediaOrderByRelevanceFieldEnum]


  export const propertyOrderByRelevanceFieldEnum: {
    title: 'title',
    slug: 'slug',
    description: 'description',
    location: 'location',
    category: 'category',
    type: 'type',
    status: 'status',
    mainImage: 'mainImage'
  };

  export type propertyOrderByRelevanceFieldEnum = (typeof propertyOrderByRelevanceFieldEnum)[keyof typeof propertyOrderByRelevanceFieldEnum]


  export const propertyimageOrderByRelevanceFieldEnum: {
    url: 'url',
    alt: 'alt'
  };

  export type propertyimageOrderByRelevanceFieldEnum = (typeof propertyimageOrderByRelevanceFieldEnum)[keyof typeof propertyimageOrderByRelevanceFieldEnum]


  export const serviceOrderByRelevanceFieldEnum: {
    name: 'name',
    title: 'title',
    description: 'description',
    content: 'content',
    icon: 'icon',
    slug: 'slug'
  };

  export type serviceOrderByRelevanceFieldEnum = (typeof serviceOrderByRelevanceFieldEnum)[keyof typeof serviceOrderByRelevanceFieldEnum]


  export const userOrderByRelevanceFieldEnum: {
    email: 'email',
    password: 'password',
    name: 'name',
    role: 'role'
  };

  export type userOrderByRelevanceFieldEnum = (typeof userOrderByRelevanceFieldEnum)[keyof typeof userOrderByRelevanceFieldEnum]


  export const companyinfoOrderByRelevanceFieldEnum: {
    key: 'key',
    value: 'value',
    category: 'category',
    label: 'label'
  };

  export type companyinfoOrderByRelevanceFieldEnum = (typeof companyinfoOrderByRelevanceFieldEnum)[keyof typeof companyinfoOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'inquiry_type'
   */
  export type Enuminquiry_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'inquiry_type'>
    


  /**
   * Reference to a field of type 'inquiry_status'
   */
  export type Enuminquiry_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'inquiry_status'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type auditlogWhereInput = {
    AND?: auditlogWhereInput | auditlogWhereInput[]
    OR?: auditlogWhereInput[]
    NOT?: auditlogWhereInput | auditlogWhereInput[]
    id?: IntFilter<"auditlog"> | number
    userId?: IntNullableFilter<"auditlog"> | number | null
    action?: StringFilter<"auditlog"> | string
    entity?: StringFilter<"auditlog"> | string
    entityId?: IntNullableFilter<"auditlog"> | number | null
    before?: JsonNullableFilter<"auditlog">
    after?: JsonNullableFilter<"auditlog">
    createdAt?: DateTimeFilter<"auditlog"> | Date | string
  }

  export type auditlogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrderInput | SortOrder
    before?: SortOrderInput | SortOrder
    after?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _relevance?: auditlogOrderByRelevanceInput
  }

  export type auditlogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: auditlogWhereInput | auditlogWhereInput[]
    OR?: auditlogWhereInput[]
    NOT?: auditlogWhereInput | auditlogWhereInput[]
    userId?: IntNullableFilter<"auditlog"> | number | null
    action?: StringFilter<"auditlog"> | string
    entity?: StringFilter<"auditlog"> | string
    entityId?: IntNullableFilter<"auditlog"> | number | null
    before?: JsonNullableFilter<"auditlog">
    after?: JsonNullableFilter<"auditlog">
    createdAt?: DateTimeFilter<"auditlog"> | Date | string
  }, "id">

  export type auditlogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrderInput | SortOrder
    before?: SortOrderInput | SortOrder
    after?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: auditlogCountOrderByAggregateInput
    _avg?: auditlogAvgOrderByAggregateInput
    _max?: auditlogMaxOrderByAggregateInput
    _min?: auditlogMinOrderByAggregateInput
    _sum?: auditlogSumOrderByAggregateInput
  }

  export type auditlogScalarWhereWithAggregatesInput = {
    AND?: auditlogScalarWhereWithAggregatesInput | auditlogScalarWhereWithAggregatesInput[]
    OR?: auditlogScalarWhereWithAggregatesInput[]
    NOT?: auditlogScalarWhereWithAggregatesInput | auditlogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"auditlog"> | number
    userId?: IntNullableWithAggregatesFilter<"auditlog"> | number | null
    action?: StringWithAggregatesFilter<"auditlog"> | string
    entity?: StringWithAggregatesFilter<"auditlog"> | string
    entityId?: IntNullableWithAggregatesFilter<"auditlog"> | number | null
    before?: JsonNullableWithAggregatesFilter<"auditlog">
    after?: JsonNullableWithAggregatesFilter<"auditlog">
    createdAt?: DateTimeWithAggregatesFilter<"auditlog"> | Date | string
  }

  export type clientWhereInput = {
    AND?: clientWhereInput | clientWhereInput[]
    OR?: clientWhereInput[]
    NOT?: clientWhereInput | clientWhereInput[]
    id?: IntFilter<"client"> | number
    name?: StringFilter<"client"> | string
    email?: StringNullableFilter<"client"> | string | null
    phone?: StringNullableFilter<"client"> | string | null
    address?: StringNullableFilter<"client"> | string | null
    idNumber?: StringNullableFilter<"client"> | string | null
    notes?: StringNullableFilter<"client"> | string | null
    deals?: DealListRelationFilter
    coOwnerships?: CoownershipListRelationFilter
  }

  export type clientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    idNumber?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    deals?: dealOrderByRelationAggregateInput
    coOwnerships?: coownershipOrderByRelationAggregateInput
    _relevance?: clientOrderByRelevanceInput
  }

  export type clientWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: clientWhereInput | clientWhereInput[]
    OR?: clientWhereInput[]
    NOT?: clientWhereInput | clientWhereInput[]
    name?: StringFilter<"client"> | string
    email?: StringNullableFilter<"client"> | string | null
    phone?: StringNullableFilter<"client"> | string | null
    address?: StringNullableFilter<"client"> | string | null
    idNumber?: StringNullableFilter<"client"> | string | null
    notes?: StringNullableFilter<"client"> | string | null
    deals?: DealListRelationFilter
    coOwnerships?: CoownershipListRelationFilter
  }, "id">

  export type clientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    idNumber?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: clientCountOrderByAggregateInput
    _avg?: clientAvgOrderByAggregateInput
    _max?: clientMaxOrderByAggregateInput
    _min?: clientMinOrderByAggregateInput
    _sum?: clientSumOrderByAggregateInput
  }

  export type clientScalarWhereWithAggregatesInput = {
    AND?: clientScalarWhereWithAggregatesInput | clientScalarWhereWithAggregatesInput[]
    OR?: clientScalarWhereWithAggregatesInput[]
    NOT?: clientScalarWhereWithAggregatesInput | clientScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"client"> | number
    name?: StringWithAggregatesFilter<"client"> | string
    email?: StringNullableWithAggregatesFilter<"client"> | string | null
    phone?: StringNullableWithAggregatesFilter<"client"> | string | null
    address?: StringNullableWithAggregatesFilter<"client"> | string | null
    idNumber?: StringNullableWithAggregatesFilter<"client"> | string | null
    notes?: StringNullableWithAggregatesFilter<"client"> | string | null
  }

  export type contactleadWhereInput = {
    AND?: contactleadWhereInput | contactleadWhereInput[]
    OR?: contactleadWhereInput[]
    NOT?: contactleadWhereInput | contactleadWhereInput[]
    id?: IntFilter<"contactlead"> | number
    name?: StringFilter<"contactlead"> | string
    email?: StringNullableFilter<"contactlead"> | string | null
    phone?: StringNullableFilter<"contactlead"> | string | null
    message?: StringFilter<"contactlead"> | string
    source?: StringFilter<"contactlead"> | string
    createdAt?: DateTimeFilter<"contactlead"> | Date | string
    propertyId?: IntNullableFilter<"contactlead"> | number | null
    property?: XOR<PropertyNullableScalarRelationFilter, propertyWhereInput> | null
  }

  export type contactleadOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    message?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
    propertyId?: SortOrderInput | SortOrder
    property?: propertyOrderByWithRelationInput
    _relevance?: contactleadOrderByRelevanceInput
  }

  export type contactleadWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: contactleadWhereInput | contactleadWhereInput[]
    OR?: contactleadWhereInput[]
    NOT?: contactleadWhereInput | contactleadWhereInput[]
    name?: StringFilter<"contactlead"> | string
    email?: StringNullableFilter<"contactlead"> | string | null
    phone?: StringNullableFilter<"contactlead"> | string | null
    message?: StringFilter<"contactlead"> | string
    source?: StringFilter<"contactlead"> | string
    createdAt?: DateTimeFilter<"contactlead"> | Date | string
    propertyId?: IntNullableFilter<"contactlead"> | number | null
    property?: XOR<PropertyNullableScalarRelationFilter, propertyWhereInput> | null
  }, "id">

  export type contactleadOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    message?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
    propertyId?: SortOrderInput | SortOrder
    _count?: contactleadCountOrderByAggregateInput
    _avg?: contactleadAvgOrderByAggregateInput
    _max?: contactleadMaxOrderByAggregateInput
    _min?: contactleadMinOrderByAggregateInput
    _sum?: contactleadSumOrderByAggregateInput
  }

  export type contactleadScalarWhereWithAggregatesInput = {
    AND?: contactleadScalarWhereWithAggregatesInput | contactleadScalarWhereWithAggregatesInput[]
    OR?: contactleadScalarWhereWithAggregatesInput[]
    NOT?: contactleadScalarWhereWithAggregatesInput | contactleadScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"contactlead"> | number
    name?: StringWithAggregatesFilter<"contactlead"> | string
    email?: StringNullableWithAggregatesFilter<"contactlead"> | string | null
    phone?: StringNullableWithAggregatesFilter<"contactlead"> | string | null
    message?: StringWithAggregatesFilter<"contactlead"> | string
    source?: StringWithAggregatesFilter<"contactlead"> | string
    createdAt?: DateTimeWithAggregatesFilter<"contactlead"> | Date | string
    propertyId?: IntNullableWithAggregatesFilter<"contactlead"> | number | null
  }

  export type coownershipWhereInput = {
    AND?: coownershipWhereInput | coownershipWhereInput[]
    OR?: coownershipWhereInput[]
    NOT?: coownershipWhereInput | coownershipWhereInput[]
    id?: IntFilter<"coownership"> | number
    propertyId?: IntFilter<"coownership"> | number
    clientId?: IntFilter<"coownership"> | number
    share?: DecimalFilter<"coownership"> | Decimal | DecimalJsLike | number | string
    role?: StringFilter<"coownership"> | string
    createdAt?: DateTimeFilter<"coownership"> | Date | string
    property?: XOR<PropertyScalarRelationFilter, propertyWhereInput>
    client?: XOR<ClientScalarRelationFilter, clientWhereInput>
  }

  export type coownershipOrderByWithRelationInput = {
    id?: SortOrder
    propertyId?: SortOrder
    clientId?: SortOrder
    share?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    property?: propertyOrderByWithRelationInput
    client?: clientOrderByWithRelationInput
    _relevance?: coownershipOrderByRelevanceInput
  }

  export type coownershipWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    propertyId_clientId?: coownershipPropertyIdClientIdCompoundUniqueInput
    AND?: coownershipWhereInput | coownershipWhereInput[]
    OR?: coownershipWhereInput[]
    NOT?: coownershipWhereInput | coownershipWhereInput[]
    propertyId?: IntFilter<"coownership"> | number
    clientId?: IntFilter<"coownership"> | number
    share?: DecimalFilter<"coownership"> | Decimal | DecimalJsLike | number | string
    role?: StringFilter<"coownership"> | string
    createdAt?: DateTimeFilter<"coownership"> | Date | string
    property?: XOR<PropertyScalarRelationFilter, propertyWhereInput>
    client?: XOR<ClientScalarRelationFilter, clientWhereInput>
  }, "id" | "propertyId_clientId">

  export type coownershipOrderByWithAggregationInput = {
    id?: SortOrder
    propertyId?: SortOrder
    clientId?: SortOrder
    share?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    _count?: coownershipCountOrderByAggregateInput
    _avg?: coownershipAvgOrderByAggregateInput
    _max?: coownershipMaxOrderByAggregateInput
    _min?: coownershipMinOrderByAggregateInput
    _sum?: coownershipSumOrderByAggregateInput
  }

  export type coownershipScalarWhereWithAggregatesInput = {
    AND?: coownershipScalarWhereWithAggregatesInput | coownershipScalarWhereWithAggregatesInput[]
    OR?: coownershipScalarWhereWithAggregatesInput[]
    NOT?: coownershipScalarWhereWithAggregatesInput | coownershipScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"coownership"> | number
    propertyId?: IntWithAggregatesFilter<"coownership"> | number
    clientId?: IntWithAggregatesFilter<"coownership"> | number
    share?: DecimalWithAggregatesFilter<"coownership"> | Decimal | DecimalJsLike | number | string
    role?: StringWithAggregatesFilter<"coownership"> | string
    createdAt?: DateTimeWithAggregatesFilter<"coownership"> | Date | string
  }

  export type dealWhereInput = {
    AND?: dealWhereInput | dealWhereInput[]
    OR?: dealWhereInput[]
    NOT?: dealWhereInput | dealWhereInput[]
    id?: IntFilter<"deal"> | number
    type?: StringFilter<"deal"> | string
    status?: StringFilter<"deal"> | string
    basePrice?: DecimalFilter<"deal"> | Decimal | DecimalJsLike | number | string
    discount?: DecimalFilter<"deal"> | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFilter<"deal"> | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFilter<"deal"> | Decimal | DecimalJsLike | number | string
    expectedClose?: DateTimeNullableFilter<"deal"> | Date | string | null
    closedAt?: DateTimeNullableFilter<"deal"> | Date | string | null
    createdAt?: DateTimeFilter<"deal"> | Date | string
    propertyId?: IntNullableFilter<"deal"> | number | null
    clientId?: IntFilter<"deal"> | number
    client?: XOR<ClientScalarRelationFilter, clientWhereInput>
    property?: XOR<PropertyNullableScalarRelationFilter, propertyWhereInput> | null
    invoices?: InvoiceListRelationFilter
    payments?: PaymentListRelationFilter
    schedules?: PaymentscheduleListRelationFilter
    expenses?: ExpenseListRelationFilter
  }

  export type dealOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    basePrice?: SortOrder
    discount?: SortOrder
    taxRate?: SortOrder
    commissionRate?: SortOrder
    expectedClose?: SortOrderInput | SortOrder
    closedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    propertyId?: SortOrderInput | SortOrder
    clientId?: SortOrder
    client?: clientOrderByWithRelationInput
    property?: propertyOrderByWithRelationInput
    invoices?: invoiceOrderByRelationAggregateInput
    payments?: paymentOrderByRelationAggregateInput
    schedules?: paymentscheduleOrderByRelationAggregateInput
    expenses?: expenseOrderByRelationAggregateInput
    _relevance?: dealOrderByRelevanceInput
  }

  export type dealWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: dealWhereInput | dealWhereInput[]
    OR?: dealWhereInput[]
    NOT?: dealWhereInput | dealWhereInput[]
    type?: StringFilter<"deal"> | string
    status?: StringFilter<"deal"> | string
    basePrice?: DecimalFilter<"deal"> | Decimal | DecimalJsLike | number | string
    discount?: DecimalFilter<"deal"> | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFilter<"deal"> | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFilter<"deal"> | Decimal | DecimalJsLike | number | string
    expectedClose?: DateTimeNullableFilter<"deal"> | Date | string | null
    closedAt?: DateTimeNullableFilter<"deal"> | Date | string | null
    createdAt?: DateTimeFilter<"deal"> | Date | string
    propertyId?: IntNullableFilter<"deal"> | number | null
    clientId?: IntFilter<"deal"> | number
    client?: XOR<ClientScalarRelationFilter, clientWhereInput>
    property?: XOR<PropertyNullableScalarRelationFilter, propertyWhereInput> | null
    invoices?: InvoiceListRelationFilter
    payments?: PaymentListRelationFilter
    schedules?: PaymentscheduleListRelationFilter
    expenses?: ExpenseListRelationFilter
  }, "id">

  export type dealOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    basePrice?: SortOrder
    discount?: SortOrder
    taxRate?: SortOrder
    commissionRate?: SortOrder
    expectedClose?: SortOrderInput | SortOrder
    closedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    propertyId?: SortOrderInput | SortOrder
    clientId?: SortOrder
    _count?: dealCountOrderByAggregateInput
    _avg?: dealAvgOrderByAggregateInput
    _max?: dealMaxOrderByAggregateInput
    _min?: dealMinOrderByAggregateInput
    _sum?: dealSumOrderByAggregateInput
  }

  export type dealScalarWhereWithAggregatesInput = {
    AND?: dealScalarWhereWithAggregatesInput | dealScalarWhereWithAggregatesInput[]
    OR?: dealScalarWhereWithAggregatesInput[]
    NOT?: dealScalarWhereWithAggregatesInput | dealScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"deal"> | number
    type?: StringWithAggregatesFilter<"deal"> | string
    status?: StringWithAggregatesFilter<"deal"> | string
    basePrice?: DecimalWithAggregatesFilter<"deal"> | Decimal | DecimalJsLike | number | string
    discount?: DecimalWithAggregatesFilter<"deal"> | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalWithAggregatesFilter<"deal"> | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalWithAggregatesFilter<"deal"> | Decimal | DecimalJsLike | number | string
    expectedClose?: DateTimeNullableWithAggregatesFilter<"deal"> | Date | string | null
    closedAt?: DateTimeNullableWithAggregatesFilter<"deal"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"deal"> | Date | string
    propertyId?: IntNullableWithAggregatesFilter<"deal"> | number | null
    clientId?: IntWithAggregatesFilter<"deal"> | number
  }

  export type expenseWhereInput = {
    AND?: expenseWhereInput | expenseWhereInput[]
    OR?: expenseWhereInput[]
    NOT?: expenseWhereInput | expenseWhereInput[]
    id?: IntFilter<"expense"> | number
    date?: DateTimeFilter<"expense"> | Date | string
    category?: StringFilter<"expense"> | string
    description?: StringNullableFilter<"expense"> | string | null
    amount?: DecimalFilter<"expense"> | Decimal | DecimalJsLike | number | string
    payee?: StringNullableFilter<"expense"> | string | null
    dealId?: IntNullableFilter<"expense"> | number | null
    propertyId?: IntNullableFilter<"expense"> | number | null
    deal?: XOR<DealNullableScalarRelationFilter, dealWhereInput> | null
    property?: XOR<PropertyNullableScalarRelationFilter, propertyWhereInput> | null
  }

  export type expenseOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    category?: SortOrder
    description?: SortOrderInput | SortOrder
    amount?: SortOrder
    payee?: SortOrderInput | SortOrder
    dealId?: SortOrderInput | SortOrder
    propertyId?: SortOrderInput | SortOrder
    deal?: dealOrderByWithRelationInput
    property?: propertyOrderByWithRelationInput
    _relevance?: expenseOrderByRelevanceInput
  }

  export type expenseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: expenseWhereInput | expenseWhereInput[]
    OR?: expenseWhereInput[]
    NOT?: expenseWhereInput | expenseWhereInput[]
    date?: DateTimeFilter<"expense"> | Date | string
    category?: StringFilter<"expense"> | string
    description?: StringNullableFilter<"expense"> | string | null
    amount?: DecimalFilter<"expense"> | Decimal | DecimalJsLike | number | string
    payee?: StringNullableFilter<"expense"> | string | null
    dealId?: IntNullableFilter<"expense"> | number | null
    propertyId?: IntNullableFilter<"expense"> | number | null
    deal?: XOR<DealNullableScalarRelationFilter, dealWhereInput> | null
    property?: XOR<PropertyNullableScalarRelationFilter, propertyWhereInput> | null
  }, "id">

  export type expenseOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    category?: SortOrder
    description?: SortOrderInput | SortOrder
    amount?: SortOrder
    payee?: SortOrderInput | SortOrder
    dealId?: SortOrderInput | SortOrder
    propertyId?: SortOrderInput | SortOrder
    _count?: expenseCountOrderByAggregateInput
    _avg?: expenseAvgOrderByAggregateInput
    _max?: expenseMaxOrderByAggregateInput
    _min?: expenseMinOrderByAggregateInput
    _sum?: expenseSumOrderByAggregateInput
  }

  export type expenseScalarWhereWithAggregatesInput = {
    AND?: expenseScalarWhereWithAggregatesInput | expenseScalarWhereWithAggregatesInput[]
    OR?: expenseScalarWhereWithAggregatesInput[]
    NOT?: expenseScalarWhereWithAggregatesInput | expenseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"expense"> | number
    date?: DateTimeWithAggregatesFilter<"expense"> | Date | string
    category?: StringWithAggregatesFilter<"expense"> | string
    description?: StringNullableWithAggregatesFilter<"expense"> | string | null
    amount?: DecimalWithAggregatesFilter<"expense"> | Decimal | DecimalJsLike | number | string
    payee?: StringNullableWithAggregatesFilter<"expense"> | string | null
    dealId?: IntNullableWithAggregatesFilter<"expense"> | number | null
    propertyId?: IntNullableWithAggregatesFilter<"expense"> | number | null
  }

  export type inquiryWhereInput = {
    AND?: inquiryWhereInput | inquiryWhereInput[]
    OR?: inquiryWhereInput[]
    NOT?: inquiryWhereInput | inquiryWhereInput[]
    id?: IntFilter<"inquiry"> | number
    propertyId?: IntFilter<"inquiry"> | number
    fullName?: StringFilter<"inquiry"> | string
    phone?: StringNullableFilter<"inquiry"> | string | null
    email?: StringNullableFilter<"inquiry"> | string | null
    message?: StringNullableFilter<"inquiry"> | string | null
    type?: Enuminquiry_typeFilter<"inquiry"> | $Enums.inquiry_type
    status?: Enuminquiry_statusFilter<"inquiry"> | $Enums.inquiry_status
    createdAt?: DateTimeFilter<"inquiry"> | Date | string
    property?: XOR<PropertyScalarRelationFilter, propertyWhereInput>
  }

  export type inquiryOrderByWithRelationInput = {
    id?: SortOrder
    propertyId?: SortOrder
    fullName?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    message?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    property?: propertyOrderByWithRelationInput
    _relevance?: inquiryOrderByRelevanceInput
  }

  export type inquiryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: inquiryWhereInput | inquiryWhereInput[]
    OR?: inquiryWhereInput[]
    NOT?: inquiryWhereInput | inquiryWhereInput[]
    propertyId?: IntFilter<"inquiry"> | number
    fullName?: StringFilter<"inquiry"> | string
    phone?: StringNullableFilter<"inquiry"> | string | null
    email?: StringNullableFilter<"inquiry"> | string | null
    message?: StringNullableFilter<"inquiry"> | string | null
    type?: Enuminquiry_typeFilter<"inquiry"> | $Enums.inquiry_type
    status?: Enuminquiry_statusFilter<"inquiry"> | $Enums.inquiry_status
    createdAt?: DateTimeFilter<"inquiry"> | Date | string
    property?: XOR<PropertyScalarRelationFilter, propertyWhereInput>
  }, "id">

  export type inquiryOrderByWithAggregationInput = {
    id?: SortOrder
    propertyId?: SortOrder
    fullName?: SortOrder
    phone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    message?: SortOrderInput | SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: inquiryCountOrderByAggregateInput
    _avg?: inquiryAvgOrderByAggregateInput
    _max?: inquiryMaxOrderByAggregateInput
    _min?: inquiryMinOrderByAggregateInput
    _sum?: inquirySumOrderByAggregateInput
  }

  export type inquiryScalarWhereWithAggregatesInput = {
    AND?: inquiryScalarWhereWithAggregatesInput | inquiryScalarWhereWithAggregatesInput[]
    OR?: inquiryScalarWhereWithAggregatesInput[]
    NOT?: inquiryScalarWhereWithAggregatesInput | inquiryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"inquiry"> | number
    propertyId?: IntWithAggregatesFilter<"inquiry"> | number
    fullName?: StringWithAggregatesFilter<"inquiry"> | string
    phone?: StringNullableWithAggregatesFilter<"inquiry"> | string | null
    email?: StringNullableWithAggregatesFilter<"inquiry"> | string | null
    message?: StringNullableWithAggregatesFilter<"inquiry"> | string | null
    type?: Enuminquiry_typeWithAggregatesFilter<"inquiry"> | $Enums.inquiry_type
    status?: Enuminquiry_statusWithAggregatesFilter<"inquiry"> | $Enums.inquiry_status
    createdAt?: DateTimeWithAggregatesFilter<"inquiry"> | Date | string
  }

  export type invoiceWhereInput = {
    AND?: invoiceWhereInput | invoiceWhereInput[]
    OR?: invoiceWhereInput[]
    NOT?: invoiceWhereInput | invoiceWhereInput[]
    id?: IntFilter<"invoice"> | number
    number?: StringFilter<"invoice"> | string
    issueDate?: DateTimeFilter<"invoice"> | Date | string
    dueDate?: DateTimeNullableFilter<"invoice"> | Date | string | null
    amount?: DecimalFilter<"invoice"> | Decimal | DecimalJsLike | number | string
    status?: StringFilter<"invoice"> | string
    dealId?: IntFilter<"invoice"> | number
    deal?: XOR<DealScalarRelationFilter, dealWhereInput>
    payments?: PaymentListRelationFilter
  }

  export type invoiceOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    issueDate?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    amount?: SortOrder
    status?: SortOrder
    dealId?: SortOrder
    deal?: dealOrderByWithRelationInput
    payments?: paymentOrderByRelationAggregateInput
    _relevance?: invoiceOrderByRelevanceInput
  }

  export type invoiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    number?: string
    AND?: invoiceWhereInput | invoiceWhereInput[]
    OR?: invoiceWhereInput[]
    NOT?: invoiceWhereInput | invoiceWhereInput[]
    issueDate?: DateTimeFilter<"invoice"> | Date | string
    dueDate?: DateTimeNullableFilter<"invoice"> | Date | string | null
    amount?: DecimalFilter<"invoice"> | Decimal | DecimalJsLike | number | string
    status?: StringFilter<"invoice"> | string
    dealId?: IntFilter<"invoice"> | number
    deal?: XOR<DealScalarRelationFilter, dealWhereInput>
    payments?: PaymentListRelationFilter
  }, "id" | "number">

  export type invoiceOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    issueDate?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    amount?: SortOrder
    status?: SortOrder
    dealId?: SortOrder
    _count?: invoiceCountOrderByAggregateInput
    _avg?: invoiceAvgOrderByAggregateInput
    _max?: invoiceMaxOrderByAggregateInput
    _min?: invoiceMinOrderByAggregateInput
    _sum?: invoiceSumOrderByAggregateInput
  }

  export type invoiceScalarWhereWithAggregatesInput = {
    AND?: invoiceScalarWhereWithAggregatesInput | invoiceScalarWhereWithAggregatesInput[]
    OR?: invoiceScalarWhereWithAggregatesInput[]
    NOT?: invoiceScalarWhereWithAggregatesInput | invoiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"invoice"> | number
    number?: StringWithAggregatesFilter<"invoice"> | string
    issueDate?: DateTimeWithAggregatesFilter<"invoice"> | Date | string
    dueDate?: DateTimeNullableWithAggregatesFilter<"invoice"> | Date | string | null
    amount?: DecimalWithAggregatesFilter<"invoice"> | Decimal | DecimalJsLike | number | string
    status?: StringWithAggregatesFilter<"invoice"> | string
    dealId?: IntWithAggregatesFilter<"invoice"> | number
  }

  export type pagecontentWhereInput = {
    AND?: pagecontentWhereInput | pagecontentWhereInput[]
    OR?: pagecontentWhereInput[]
    NOT?: pagecontentWhereInput | pagecontentWhereInput[]
    id?: IntFilter<"pagecontent"> | number
    page?: StringFilter<"pagecontent"> | string
    section?: StringFilter<"pagecontent"> | string
    key?: StringFilter<"pagecontent"> | string
    value?: JsonFilter<"pagecontent">
    createdAt?: DateTimeFilter<"pagecontent"> | Date | string
    updatedAt?: DateTimeFilter<"pagecontent"> | Date | string
  }

  export type pagecontentOrderByWithRelationInput = {
    id?: SortOrder
    page?: SortOrder
    section?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _relevance?: pagecontentOrderByRelevanceInput
  }

  export type pagecontentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    page_section_key?: pagecontentPageSectionKeyCompoundUniqueInput
    AND?: pagecontentWhereInput | pagecontentWhereInput[]
    OR?: pagecontentWhereInput[]
    NOT?: pagecontentWhereInput | pagecontentWhereInput[]
    page?: StringFilter<"pagecontent"> | string
    section?: StringFilter<"pagecontent"> | string
    key?: StringFilter<"pagecontent"> | string
    value?: JsonFilter<"pagecontent">
    createdAt?: DateTimeFilter<"pagecontent"> | Date | string
    updatedAt?: DateTimeFilter<"pagecontent"> | Date | string
  }, "id" | "page_section_key">

  export type pagecontentOrderByWithAggregationInput = {
    id?: SortOrder
    page?: SortOrder
    section?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: pagecontentCountOrderByAggregateInput
    _avg?: pagecontentAvgOrderByAggregateInput
    _max?: pagecontentMaxOrderByAggregateInput
    _min?: pagecontentMinOrderByAggregateInput
    _sum?: pagecontentSumOrderByAggregateInput
  }

  export type pagecontentScalarWhereWithAggregatesInput = {
    AND?: pagecontentScalarWhereWithAggregatesInput | pagecontentScalarWhereWithAggregatesInput[]
    OR?: pagecontentScalarWhereWithAggregatesInput[]
    NOT?: pagecontentScalarWhereWithAggregatesInput | pagecontentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"pagecontent"> | number
    page?: StringWithAggregatesFilter<"pagecontent"> | string
    section?: StringWithAggregatesFilter<"pagecontent"> | string
    key?: StringWithAggregatesFilter<"pagecontent"> | string
    value?: JsonWithAggregatesFilter<"pagecontent">
    createdAt?: DateTimeWithAggregatesFilter<"pagecontent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"pagecontent"> | Date | string
  }

  export type paymentWhereInput = {
    AND?: paymentWhereInput | paymentWhereInput[]
    OR?: paymentWhereInput[]
    NOT?: paymentWhereInput | paymentWhereInput[]
    id?: IntFilter<"payment"> | number
    date?: DateTimeFilter<"payment"> | Date | string
    amount?: DecimalFilter<"payment"> | Decimal | DecimalJsLike | number | string
    method?: StringFilter<"payment"> | string
    reference?: StringNullableFilter<"payment"> | string | null
    dealId?: IntFilter<"payment"> | number
    invoiceId?: IntNullableFilter<"payment"> | number | null
    deal?: XOR<DealScalarRelationFilter, dealWhereInput>
    invoice?: XOR<InvoiceNullableScalarRelationFilter, invoiceWhereInput> | null
    schedules?: PaymentscheduleListRelationFilter
  }

  export type paymentOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    method?: SortOrder
    reference?: SortOrderInput | SortOrder
    dealId?: SortOrder
    invoiceId?: SortOrderInput | SortOrder
    deal?: dealOrderByWithRelationInput
    invoice?: invoiceOrderByWithRelationInput
    schedules?: paymentscheduleOrderByRelationAggregateInput
    _relevance?: paymentOrderByRelevanceInput
  }

  export type paymentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: paymentWhereInput | paymentWhereInput[]
    OR?: paymentWhereInput[]
    NOT?: paymentWhereInput | paymentWhereInput[]
    date?: DateTimeFilter<"payment"> | Date | string
    amount?: DecimalFilter<"payment"> | Decimal | DecimalJsLike | number | string
    method?: StringFilter<"payment"> | string
    reference?: StringNullableFilter<"payment"> | string | null
    dealId?: IntFilter<"payment"> | number
    invoiceId?: IntNullableFilter<"payment"> | number | null
    deal?: XOR<DealScalarRelationFilter, dealWhereInput>
    invoice?: XOR<InvoiceNullableScalarRelationFilter, invoiceWhereInput> | null
    schedules?: PaymentscheduleListRelationFilter
  }, "id">

  export type paymentOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    method?: SortOrder
    reference?: SortOrderInput | SortOrder
    dealId?: SortOrder
    invoiceId?: SortOrderInput | SortOrder
    _count?: paymentCountOrderByAggregateInput
    _avg?: paymentAvgOrderByAggregateInput
    _max?: paymentMaxOrderByAggregateInput
    _min?: paymentMinOrderByAggregateInput
    _sum?: paymentSumOrderByAggregateInput
  }

  export type paymentScalarWhereWithAggregatesInput = {
    AND?: paymentScalarWhereWithAggregatesInput | paymentScalarWhereWithAggregatesInput[]
    OR?: paymentScalarWhereWithAggregatesInput[]
    NOT?: paymentScalarWhereWithAggregatesInput | paymentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"payment"> | number
    date?: DateTimeWithAggregatesFilter<"payment"> | Date | string
    amount?: DecimalWithAggregatesFilter<"payment"> | Decimal | DecimalJsLike | number | string
    method?: StringWithAggregatesFilter<"payment"> | string
    reference?: StringNullableWithAggregatesFilter<"payment"> | string | null
    dealId?: IntWithAggregatesFilter<"payment"> | number
    invoiceId?: IntNullableWithAggregatesFilter<"payment"> | number | null
  }

  export type paymentscheduleWhereInput = {
    AND?: paymentscheduleWhereInput | paymentscheduleWhereInput[]
    OR?: paymentscheduleWhereInput[]
    NOT?: paymentscheduleWhereInput | paymentscheduleWhereInput[]
    id?: IntFilter<"paymentschedule"> | number
    dealId?: IntFilter<"paymentschedule"> | number
    label?: StringFilter<"paymentschedule"> | string
    dueDate?: DateTimeFilter<"paymentschedule"> | Date | string
    amount?: DecimalFilter<"paymentschedule"> | Decimal | DecimalJsLike | number | string
    status?: StringFilter<"paymentschedule"> | string
    paymentId?: IntNullableFilter<"paymentschedule"> | number | null
    createdAt?: DateTimeFilter<"paymentschedule"> | Date | string
    deal?: XOR<DealScalarRelationFilter, dealWhereInput>
    payment?: XOR<PaymentNullableScalarRelationFilter, paymentWhereInput> | null
  }

  export type paymentscheduleOrderByWithRelationInput = {
    id?: SortOrder
    dealId?: SortOrder
    label?: SortOrder
    dueDate?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    deal?: dealOrderByWithRelationInput
    payment?: paymentOrderByWithRelationInput
    _relevance?: paymentscheduleOrderByRelevanceInput
  }

  export type paymentscheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: paymentscheduleWhereInput | paymentscheduleWhereInput[]
    OR?: paymentscheduleWhereInput[]
    NOT?: paymentscheduleWhereInput | paymentscheduleWhereInput[]
    dealId?: IntFilter<"paymentschedule"> | number
    label?: StringFilter<"paymentschedule"> | string
    dueDate?: DateTimeFilter<"paymentschedule"> | Date | string
    amount?: DecimalFilter<"paymentschedule"> | Decimal | DecimalJsLike | number | string
    status?: StringFilter<"paymentschedule"> | string
    paymentId?: IntNullableFilter<"paymentschedule"> | number | null
    createdAt?: DateTimeFilter<"paymentschedule"> | Date | string
    deal?: XOR<DealScalarRelationFilter, dealWhereInput>
    payment?: XOR<PaymentNullableScalarRelationFilter, paymentWhereInput> | null
  }, "id">

  export type paymentscheduleOrderByWithAggregationInput = {
    id?: SortOrder
    dealId?: SortOrder
    label?: SortOrder
    dueDate?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: paymentscheduleCountOrderByAggregateInput
    _avg?: paymentscheduleAvgOrderByAggregateInput
    _max?: paymentscheduleMaxOrderByAggregateInput
    _min?: paymentscheduleMinOrderByAggregateInput
    _sum?: paymentscheduleSumOrderByAggregateInput
  }

  export type paymentscheduleScalarWhereWithAggregatesInput = {
    AND?: paymentscheduleScalarWhereWithAggregatesInput | paymentscheduleScalarWhereWithAggregatesInput[]
    OR?: paymentscheduleScalarWhereWithAggregatesInput[]
    NOT?: paymentscheduleScalarWhereWithAggregatesInput | paymentscheduleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"paymentschedule"> | number
    dealId?: IntWithAggregatesFilter<"paymentschedule"> | number
    label?: StringWithAggregatesFilter<"paymentschedule"> | string
    dueDate?: DateTimeWithAggregatesFilter<"paymentschedule"> | Date | string
    amount?: DecimalWithAggregatesFilter<"paymentschedule"> | Decimal | DecimalJsLike | number | string
    status?: StringWithAggregatesFilter<"paymentschedule"> | string
    paymentId?: IntNullableWithAggregatesFilter<"paymentschedule"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"paymentschedule"> | Date | string
  }

  export type projectWhereInput = {
    AND?: projectWhereInput | projectWhereInput[]
    OR?: projectWhereInput[]
    NOT?: projectWhereInput | projectWhereInput[]
    id?: IntFilter<"project"> | number
    title?: StringFilter<"project"> | string
    slug?: StringFilter<"project"> | string
    description?: StringNullableFilter<"project"> | string | null
    coverImage?: StringNullableFilter<"project"> | string | null
    status?: StringNullableFilter<"project"> | string | null
    location?: StringNullableFilter<"project"> | string | null
    category?: StringNullableFilter<"project"> | string | null
    surface?: DecimalNullableFilter<"project"> | Decimal | DecimalJsLike | number | string | null
    units?: IntNullableFilter<"project"> | number | null
    startedAt?: DateTimeNullableFilter<"project"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"project"> | Date | string | null
    createdAt?: DateTimeFilter<"project"> | Date | string
    updatedAt?: DateTimeFilter<"project"> | Date | string
    medias?: ProjectmediaListRelationFilter
  }

  export type projectOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    coverImage?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    surface?: SortOrderInput | SortOrder
    units?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    medias?: projectmediaOrderByRelationAggregateInput
    _relevance?: projectOrderByRelevanceInput
  }

  export type projectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: projectWhereInput | projectWhereInput[]
    OR?: projectWhereInput[]
    NOT?: projectWhereInput | projectWhereInput[]
    title?: StringFilter<"project"> | string
    description?: StringNullableFilter<"project"> | string | null
    coverImage?: StringNullableFilter<"project"> | string | null
    status?: StringNullableFilter<"project"> | string | null
    location?: StringNullableFilter<"project"> | string | null
    category?: StringNullableFilter<"project"> | string | null
    surface?: DecimalNullableFilter<"project"> | Decimal | DecimalJsLike | number | string | null
    units?: IntNullableFilter<"project"> | number | null
    startedAt?: DateTimeNullableFilter<"project"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"project"> | Date | string | null
    createdAt?: DateTimeFilter<"project"> | Date | string
    updatedAt?: DateTimeFilter<"project"> | Date | string
    medias?: ProjectmediaListRelationFilter
  }, "id" | "slug">

  export type projectOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    coverImage?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    surface?: SortOrderInput | SortOrder
    units?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: projectCountOrderByAggregateInput
    _avg?: projectAvgOrderByAggregateInput
    _max?: projectMaxOrderByAggregateInput
    _min?: projectMinOrderByAggregateInput
    _sum?: projectSumOrderByAggregateInput
  }

  export type projectScalarWhereWithAggregatesInput = {
    AND?: projectScalarWhereWithAggregatesInput | projectScalarWhereWithAggregatesInput[]
    OR?: projectScalarWhereWithAggregatesInput[]
    NOT?: projectScalarWhereWithAggregatesInput | projectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"project"> | number
    title?: StringWithAggregatesFilter<"project"> | string
    slug?: StringWithAggregatesFilter<"project"> | string
    description?: StringNullableWithAggregatesFilter<"project"> | string | null
    coverImage?: StringNullableWithAggregatesFilter<"project"> | string | null
    status?: StringNullableWithAggregatesFilter<"project"> | string | null
    location?: StringNullableWithAggregatesFilter<"project"> | string | null
    category?: StringNullableWithAggregatesFilter<"project"> | string | null
    surface?: DecimalNullableWithAggregatesFilter<"project"> | Decimal | DecimalJsLike | number | string | null
    units?: IntNullableWithAggregatesFilter<"project"> | number | null
    startedAt?: DateTimeNullableWithAggregatesFilter<"project"> | Date | string | null
    deliveredAt?: DateTimeNullableWithAggregatesFilter<"project"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"project"> | Date | string
  }

  export type projectmediaWhereInput = {
    AND?: projectmediaWhereInput | projectmediaWhereInput[]
    OR?: projectmediaWhereInput[]
    NOT?: projectmediaWhereInput | projectmediaWhereInput[]
    id?: IntFilter<"projectmedia"> | number
    projectId?: IntFilter<"projectmedia"> | number
    kind?: StringFilter<"projectmedia"> | string
    url?: StringFilter<"projectmedia"> | string
    alt?: StringNullableFilter<"projectmedia"> | string | null
    order?: IntFilter<"projectmedia"> | number
    createdAt?: DateTimeFilter<"projectmedia"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, projectWhereInput>
  }

  export type projectmediaOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    kind?: SortOrder
    url?: SortOrder
    alt?: SortOrderInput | SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    project?: projectOrderByWithRelationInput
    _relevance?: projectmediaOrderByRelevanceInput
  }

  export type projectmediaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: projectmediaWhereInput | projectmediaWhereInput[]
    OR?: projectmediaWhereInput[]
    NOT?: projectmediaWhereInput | projectmediaWhereInput[]
    projectId?: IntFilter<"projectmedia"> | number
    kind?: StringFilter<"projectmedia"> | string
    url?: StringFilter<"projectmedia"> | string
    alt?: StringNullableFilter<"projectmedia"> | string | null
    order?: IntFilter<"projectmedia"> | number
    createdAt?: DateTimeFilter<"projectmedia"> | Date | string
    project?: XOR<ProjectScalarRelationFilter, projectWhereInput>
  }, "id">

  export type projectmediaOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    kind?: SortOrder
    url?: SortOrder
    alt?: SortOrderInput | SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    _count?: projectmediaCountOrderByAggregateInput
    _avg?: projectmediaAvgOrderByAggregateInput
    _max?: projectmediaMaxOrderByAggregateInput
    _min?: projectmediaMinOrderByAggregateInput
    _sum?: projectmediaSumOrderByAggregateInput
  }

  export type projectmediaScalarWhereWithAggregatesInput = {
    AND?: projectmediaScalarWhereWithAggregatesInput | projectmediaScalarWhereWithAggregatesInput[]
    OR?: projectmediaScalarWhereWithAggregatesInput[]
    NOT?: projectmediaScalarWhereWithAggregatesInput | projectmediaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"projectmedia"> | number
    projectId?: IntWithAggregatesFilter<"projectmedia"> | number
    kind?: StringWithAggregatesFilter<"projectmedia"> | string
    url?: StringWithAggregatesFilter<"projectmedia"> | string
    alt?: StringNullableWithAggregatesFilter<"projectmedia"> | string | null
    order?: IntWithAggregatesFilter<"projectmedia"> | number
    createdAt?: DateTimeWithAggregatesFilter<"projectmedia"> | Date | string
  }

  export type propertyWhereInput = {
    AND?: propertyWhereInput | propertyWhereInput[]
    OR?: propertyWhereInput[]
    NOT?: propertyWhereInput | propertyWhereInput[]
    id?: IntFilter<"property"> | number
    title?: StringFilter<"property"> | string
    slug?: StringFilter<"property"> | string
    description?: StringNullableFilter<"property"> | string | null
    price?: DecimalNullableFilter<"property"> | Decimal | DecimalJsLike | number | string | null
    location?: StringNullableFilter<"property"> | string | null
    category?: StringNullableFilter<"property"> | string | null
    bedrooms?: IntNullableFilter<"property"> | number | null
    bathrooms?: IntNullableFilter<"property"> | number | null
    area_m2?: DecimalNullableFilter<"property"> | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: IntNullableFilter<"property"> | number | null
    type?: StringNullableFilter<"property"> | string | null
    yearOfConstruction?: IntNullableFilter<"property"> | number | null
    capacity?: IntNullableFilter<"property"> | number | null
    status?: StringNullableFilter<"property"> | string | null
    mainImage?: StringNullableFilter<"property"> | string | null
    createdAt?: DateTimeFilter<"property"> | Date | string
    updatedAt?: DateTimeFilter<"property"> | Date | string
    images?: PropertyimageListRelationFilter
    deals?: DealListRelationFilter
    expenses?: ExpenseListRelationFilter
    inquiries?: InquiryListRelationFilter
    contactLeads?: ContactleadListRelationFilter
    coOwnerships?: CoownershipListRelationFilter
  }

  export type propertyOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    bedrooms?: SortOrderInput | SortOrder
    bathrooms?: SortOrderInput | SortOrder
    area_m2?: SortOrderInput | SortOrder
    surfaceHabitable?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    yearOfConstruction?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    mainImage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    images?: propertyimageOrderByRelationAggregateInput
    deals?: dealOrderByRelationAggregateInput
    expenses?: expenseOrderByRelationAggregateInput
    inquiries?: inquiryOrderByRelationAggregateInput
    contactLeads?: contactleadOrderByRelationAggregateInput
    coOwnerships?: coownershipOrderByRelationAggregateInput
    _relevance?: propertyOrderByRelevanceInput
  }

  export type propertyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: propertyWhereInput | propertyWhereInput[]
    OR?: propertyWhereInput[]
    NOT?: propertyWhereInput | propertyWhereInput[]
    title?: StringFilter<"property"> | string
    description?: StringNullableFilter<"property"> | string | null
    price?: DecimalNullableFilter<"property"> | Decimal | DecimalJsLike | number | string | null
    location?: StringNullableFilter<"property"> | string | null
    category?: StringNullableFilter<"property"> | string | null
    bedrooms?: IntNullableFilter<"property"> | number | null
    bathrooms?: IntNullableFilter<"property"> | number | null
    area_m2?: DecimalNullableFilter<"property"> | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: IntNullableFilter<"property"> | number | null
    type?: StringNullableFilter<"property"> | string | null
    yearOfConstruction?: IntNullableFilter<"property"> | number | null
    capacity?: IntNullableFilter<"property"> | number | null
    status?: StringNullableFilter<"property"> | string | null
    mainImage?: StringNullableFilter<"property"> | string | null
    createdAt?: DateTimeFilter<"property"> | Date | string
    updatedAt?: DateTimeFilter<"property"> | Date | string
    images?: PropertyimageListRelationFilter
    deals?: DealListRelationFilter
    expenses?: ExpenseListRelationFilter
    inquiries?: InquiryListRelationFilter
    contactLeads?: ContactleadListRelationFilter
    coOwnerships?: CoownershipListRelationFilter
  }, "id" | "slug">

  export type propertyOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    bedrooms?: SortOrderInput | SortOrder
    bathrooms?: SortOrderInput | SortOrder
    area_m2?: SortOrderInput | SortOrder
    surfaceHabitable?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    yearOfConstruction?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    mainImage?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: propertyCountOrderByAggregateInput
    _avg?: propertyAvgOrderByAggregateInput
    _max?: propertyMaxOrderByAggregateInput
    _min?: propertyMinOrderByAggregateInput
    _sum?: propertySumOrderByAggregateInput
  }

  export type propertyScalarWhereWithAggregatesInput = {
    AND?: propertyScalarWhereWithAggregatesInput | propertyScalarWhereWithAggregatesInput[]
    OR?: propertyScalarWhereWithAggregatesInput[]
    NOT?: propertyScalarWhereWithAggregatesInput | propertyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"property"> | number
    title?: StringWithAggregatesFilter<"property"> | string
    slug?: StringWithAggregatesFilter<"property"> | string
    description?: StringNullableWithAggregatesFilter<"property"> | string | null
    price?: DecimalNullableWithAggregatesFilter<"property"> | Decimal | DecimalJsLike | number | string | null
    location?: StringNullableWithAggregatesFilter<"property"> | string | null
    category?: StringNullableWithAggregatesFilter<"property"> | string | null
    bedrooms?: IntNullableWithAggregatesFilter<"property"> | number | null
    bathrooms?: IntNullableWithAggregatesFilter<"property"> | number | null
    area_m2?: DecimalNullableWithAggregatesFilter<"property"> | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: IntNullableWithAggregatesFilter<"property"> | number | null
    type?: StringNullableWithAggregatesFilter<"property"> | string | null
    yearOfConstruction?: IntNullableWithAggregatesFilter<"property"> | number | null
    capacity?: IntNullableWithAggregatesFilter<"property"> | number | null
    status?: StringNullableWithAggregatesFilter<"property"> | string | null
    mainImage?: StringNullableWithAggregatesFilter<"property"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"property"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"property"> | Date | string
  }

  export type propertyimageWhereInput = {
    AND?: propertyimageWhereInput | propertyimageWhereInput[]
    OR?: propertyimageWhereInput[]
    NOT?: propertyimageWhereInput | propertyimageWhereInput[]
    id?: IntFilter<"propertyimage"> | number
    propertyId?: IntFilter<"propertyimage"> | number
    url?: StringFilter<"propertyimage"> | string
    alt?: StringNullableFilter<"propertyimage"> | string | null
    order?: IntFilter<"propertyimage"> | number
    createdAt?: DateTimeFilter<"propertyimage"> | Date | string
    property?: XOR<PropertyScalarRelationFilter, propertyWhereInput>
  }

  export type propertyimageOrderByWithRelationInput = {
    id?: SortOrder
    propertyId?: SortOrder
    url?: SortOrder
    alt?: SortOrderInput | SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    property?: propertyOrderByWithRelationInput
    _relevance?: propertyimageOrderByRelevanceInput
  }

  export type propertyimageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: propertyimageWhereInput | propertyimageWhereInput[]
    OR?: propertyimageWhereInput[]
    NOT?: propertyimageWhereInput | propertyimageWhereInput[]
    propertyId?: IntFilter<"propertyimage"> | number
    url?: StringFilter<"propertyimage"> | string
    alt?: StringNullableFilter<"propertyimage"> | string | null
    order?: IntFilter<"propertyimage"> | number
    createdAt?: DateTimeFilter<"propertyimage"> | Date | string
    property?: XOR<PropertyScalarRelationFilter, propertyWhereInput>
  }, "id">

  export type propertyimageOrderByWithAggregationInput = {
    id?: SortOrder
    propertyId?: SortOrder
    url?: SortOrder
    alt?: SortOrderInput | SortOrder
    order?: SortOrder
    createdAt?: SortOrder
    _count?: propertyimageCountOrderByAggregateInput
    _avg?: propertyimageAvgOrderByAggregateInput
    _max?: propertyimageMaxOrderByAggregateInput
    _min?: propertyimageMinOrderByAggregateInput
    _sum?: propertyimageSumOrderByAggregateInput
  }

  export type propertyimageScalarWhereWithAggregatesInput = {
    AND?: propertyimageScalarWhereWithAggregatesInput | propertyimageScalarWhereWithAggregatesInput[]
    OR?: propertyimageScalarWhereWithAggregatesInput[]
    NOT?: propertyimageScalarWhereWithAggregatesInput | propertyimageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"propertyimage"> | number
    propertyId?: IntWithAggregatesFilter<"propertyimage"> | number
    url?: StringWithAggregatesFilter<"propertyimage"> | string
    alt?: StringNullableWithAggregatesFilter<"propertyimage"> | string | null
    order?: IntWithAggregatesFilter<"propertyimage"> | number
    createdAt?: DateTimeWithAggregatesFilter<"propertyimage"> | Date | string
  }

  export type serviceWhereInput = {
    AND?: serviceWhereInput | serviceWhereInput[]
    OR?: serviceWhereInput[]
    NOT?: serviceWhereInput | serviceWhereInput[]
    id?: IntFilter<"service"> | number
    name?: StringFilter<"service"> | string
    title?: StringNullableFilter<"service"> | string | null
    description?: StringNullableFilter<"service"> | string | null
    content?: StringNullableFilter<"service"> | string | null
    icon?: StringNullableFilter<"service"> | string | null
    slug?: StringNullableFilter<"service"> | string | null
  }

  export type serviceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    slug?: SortOrderInput | SortOrder
    _relevance?: serviceOrderByRelevanceInput
  }

  export type serviceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: serviceWhereInput | serviceWhereInput[]
    OR?: serviceWhereInput[]
    NOT?: serviceWhereInput | serviceWhereInput[]
    name?: StringFilter<"service"> | string
    title?: StringNullableFilter<"service"> | string | null
    description?: StringNullableFilter<"service"> | string | null
    content?: StringNullableFilter<"service"> | string | null
    icon?: StringNullableFilter<"service"> | string | null
    slug?: StringNullableFilter<"service"> | string | null
  }, "id">

  export type serviceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    content?: SortOrderInput | SortOrder
    icon?: SortOrderInput | SortOrder
    slug?: SortOrderInput | SortOrder
    _count?: serviceCountOrderByAggregateInput
    _avg?: serviceAvgOrderByAggregateInput
    _max?: serviceMaxOrderByAggregateInput
    _min?: serviceMinOrderByAggregateInput
    _sum?: serviceSumOrderByAggregateInput
  }

  export type serviceScalarWhereWithAggregatesInput = {
    AND?: serviceScalarWhereWithAggregatesInput | serviceScalarWhereWithAggregatesInput[]
    OR?: serviceScalarWhereWithAggregatesInput[]
    NOT?: serviceScalarWhereWithAggregatesInput | serviceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"service"> | number
    name?: StringWithAggregatesFilter<"service"> | string
    title?: StringNullableWithAggregatesFilter<"service"> | string | null
    description?: StringNullableWithAggregatesFilter<"service"> | string | null
    content?: StringNullableWithAggregatesFilter<"service"> | string | null
    icon?: StringNullableWithAggregatesFilter<"service"> | string | null
    slug?: StringNullableWithAggregatesFilter<"service"> | string | null
  }

  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: IntFilter<"user"> | number
    email?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    name?: StringNullableFilter<"user"> | string | null
    isStaff?: BoolFilter<"user"> | boolean
    role?: StringFilter<"user"> | string
    createdAt?: DateTimeFilter<"user"> | Date | string
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    isStaff?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    _relevance?: userOrderByRelevanceInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    password?: StringFilter<"user"> | string
    name?: StringNullableFilter<"user"> | string | null
    isStaff?: BoolFilter<"user"> | boolean
    role?: StringFilter<"user"> | string
    createdAt?: DateTimeFilter<"user"> | Date | string
  }, "id" | "email">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    isStaff?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user"> | number
    email?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
    name?: StringNullableWithAggregatesFilter<"user"> | string | null
    isStaff?: BoolWithAggregatesFilter<"user"> | boolean
    role?: StringWithAggregatesFilter<"user"> | string
    createdAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
  }

  export type companyinfoWhereInput = {
    AND?: companyinfoWhereInput | companyinfoWhereInput[]
    OR?: companyinfoWhereInput[]
    NOT?: companyinfoWhereInput | companyinfoWhereInput[]
    id?: IntFilter<"companyinfo"> | number
    key?: StringFilter<"companyinfo"> | string
    value?: StringFilter<"companyinfo"> | string
    category?: StringFilter<"companyinfo"> | string
    label?: StringNullableFilter<"companyinfo"> | string | null
    order?: IntFilter<"companyinfo"> | number
    isActive?: BoolFilter<"companyinfo"> | boolean
    createdAt?: DateTimeFilter<"companyinfo"> | Date | string
    updatedAt?: DateTimeFilter<"companyinfo"> | Date | string
  }

  export type companyinfoOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    category?: SortOrder
    label?: SortOrderInput | SortOrder
    order?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _relevance?: companyinfoOrderByRelevanceInput
  }

  export type companyinfoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    key?: string
    AND?: companyinfoWhereInput | companyinfoWhereInput[]
    OR?: companyinfoWhereInput[]
    NOT?: companyinfoWhereInput | companyinfoWhereInput[]
    value?: StringFilter<"companyinfo"> | string
    category?: StringFilter<"companyinfo"> | string
    label?: StringNullableFilter<"companyinfo"> | string | null
    order?: IntFilter<"companyinfo"> | number
    isActive?: BoolFilter<"companyinfo"> | boolean
    createdAt?: DateTimeFilter<"companyinfo"> | Date | string
    updatedAt?: DateTimeFilter<"companyinfo"> | Date | string
  }, "id" | "key">

  export type companyinfoOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    category?: SortOrder
    label?: SortOrderInput | SortOrder
    order?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: companyinfoCountOrderByAggregateInput
    _avg?: companyinfoAvgOrderByAggregateInput
    _max?: companyinfoMaxOrderByAggregateInput
    _min?: companyinfoMinOrderByAggregateInput
    _sum?: companyinfoSumOrderByAggregateInput
  }

  export type companyinfoScalarWhereWithAggregatesInput = {
    AND?: companyinfoScalarWhereWithAggregatesInput | companyinfoScalarWhereWithAggregatesInput[]
    OR?: companyinfoScalarWhereWithAggregatesInput[]
    NOT?: companyinfoScalarWhereWithAggregatesInput | companyinfoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"companyinfo"> | number
    key?: StringWithAggregatesFilter<"companyinfo"> | string
    value?: StringWithAggregatesFilter<"companyinfo"> | string
    category?: StringWithAggregatesFilter<"companyinfo"> | string
    label?: StringNullableWithAggregatesFilter<"companyinfo"> | string | null
    order?: IntWithAggregatesFilter<"companyinfo"> | number
    isActive?: BoolWithAggregatesFilter<"companyinfo"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"companyinfo"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"companyinfo"> | Date | string
  }

  export type auditlogCreateInput = {
    userId?: number | null
    action: string
    entity: string
    entityId?: number | null
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type auditlogUncheckedCreateInput = {
    id?: number
    userId?: number | null
    action: string
    entity: string
    entityId?: number | null
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type auditlogUpdateInput = {
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableIntFieldUpdateOperationsInput | number | null
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type auditlogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableIntFieldUpdateOperationsInput | number | null
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type auditlogCreateManyInput = {
    id?: number
    userId?: number | null
    action: string
    entity: string
    entityId?: number | null
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type auditlogUpdateManyMutationInput = {
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableIntFieldUpdateOperationsInput | number | null
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type auditlogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableIntFieldUpdateOperationsInput | number | null
    before?: NullableJsonNullValueInput | InputJsonValue
    after?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type clientCreateInput = {
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    idNumber?: string | null
    notes?: string | null
    deals?: dealCreateNestedManyWithoutClientInput
    coOwnerships?: coownershipCreateNestedManyWithoutClientInput
  }

  export type clientUncheckedCreateInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    idNumber?: string | null
    notes?: string | null
    deals?: dealUncheckedCreateNestedManyWithoutClientInput
    coOwnerships?: coownershipUncheckedCreateNestedManyWithoutClientInput
  }

  export type clientUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deals?: dealUpdateManyWithoutClientNestedInput
    coOwnerships?: coownershipUpdateManyWithoutClientNestedInput
  }

  export type clientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deals?: dealUncheckedUpdateManyWithoutClientNestedInput
    coOwnerships?: coownershipUncheckedUpdateManyWithoutClientNestedInput
  }

  export type clientCreateManyInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    idNumber?: string | null
    notes?: string | null
  }

  export type clientUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type clientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type contactleadCreateInput = {
    name: string
    email?: string | null
    phone?: string | null
    message: string
    source?: string
    createdAt?: Date | string
    property?: propertyCreateNestedOneWithoutContactLeadsInput
  }

  export type contactleadUncheckedCreateInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    message: string
    source?: string
    createdAt?: Date | string
    propertyId?: number | null
  }

  export type contactleadUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    property?: propertyUpdateOneWithoutContactLeadsNestedInput
  }

  export type contactleadUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    propertyId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type contactleadCreateManyInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    message: string
    source?: string
    createdAt?: Date | string
    propertyId?: number | null
  }

  export type contactleadUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type contactleadUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    propertyId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type coownershipCreateInput = {
    share?: Decimal | DecimalJsLike | number | string
    role?: string
    createdAt?: Date | string
    property: propertyCreateNestedOneWithoutCoOwnershipsInput
    client: clientCreateNestedOneWithoutCoOwnershipsInput
  }

  export type coownershipUncheckedCreateInput = {
    id?: number
    propertyId: number
    clientId: number
    share?: Decimal | DecimalJsLike | number | string
    role?: string
    createdAt?: Date | string
  }

  export type coownershipUpdateInput = {
    share?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    property?: propertyUpdateOneRequiredWithoutCoOwnershipsNestedInput
    client?: clientUpdateOneRequiredWithoutCoOwnershipsNestedInput
  }

  export type coownershipUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    propertyId?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    share?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type coownershipCreateManyInput = {
    id?: number
    propertyId: number
    clientId: number
    share?: Decimal | DecimalJsLike | number | string
    role?: string
    createdAt?: Date | string
  }

  export type coownershipUpdateManyMutationInput = {
    share?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type coownershipUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    propertyId?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    share?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type dealCreateInput = {
    type?: string
    status?: string
    basePrice?: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxRate?: Decimal | DecimalJsLike | number | string
    commissionRate?: Decimal | DecimalJsLike | number | string
    expectedClose?: Date | string | null
    closedAt?: Date | string | null
    createdAt?: Date | string
    client: clientCreateNestedOneWithoutDealsInput
    property?: propertyCreateNestedOneWithoutDealsInput
    invoices?: invoiceCreateNestedManyWithoutDealInput
    payments?: paymentCreateNestedManyWithoutDealInput
    schedules?: paymentscheduleCreateNestedManyWithoutDealInput
    expenses?: expenseCreateNestedManyWithoutDealInput
  }

  export type dealUncheckedCreateInput = {
    id?: number
    type?: string
    status?: string
    basePrice?: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxRate?: Decimal | DecimalJsLike | number | string
    commissionRate?: Decimal | DecimalJsLike | number | string
    expectedClose?: Date | string | null
    closedAt?: Date | string | null
    createdAt?: Date | string
    propertyId?: number | null
    clientId: number
    invoices?: invoiceUncheckedCreateNestedManyWithoutDealInput
    payments?: paymentUncheckedCreateNestedManyWithoutDealInput
    schedules?: paymentscheduleUncheckedCreateNestedManyWithoutDealInput
    expenses?: expenseUncheckedCreateNestedManyWithoutDealInput
  }

  export type dealUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expectedClose?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: clientUpdateOneRequiredWithoutDealsNestedInput
    property?: propertyUpdateOneWithoutDealsNestedInput
    invoices?: invoiceUpdateManyWithoutDealNestedInput
    payments?: paymentUpdateManyWithoutDealNestedInput
    schedules?: paymentscheduleUpdateManyWithoutDealNestedInput
    expenses?: expenseUpdateManyWithoutDealNestedInput
  }

  export type dealUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expectedClose?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    propertyId?: NullableIntFieldUpdateOperationsInput | number | null
    clientId?: IntFieldUpdateOperationsInput | number
    invoices?: invoiceUncheckedUpdateManyWithoutDealNestedInput
    payments?: paymentUncheckedUpdateManyWithoutDealNestedInput
    schedules?: paymentscheduleUncheckedUpdateManyWithoutDealNestedInput
    expenses?: expenseUncheckedUpdateManyWithoutDealNestedInput
  }

  export type dealCreateManyInput = {
    id?: number
    type?: string
    status?: string
    basePrice?: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxRate?: Decimal | DecimalJsLike | number | string
    commissionRate?: Decimal | DecimalJsLike | number | string
    expectedClose?: Date | string | null
    closedAt?: Date | string | null
    createdAt?: Date | string
    propertyId?: number | null
    clientId: number
  }

  export type dealUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expectedClose?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type dealUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expectedClose?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    propertyId?: NullableIntFieldUpdateOperationsInput | number | null
    clientId?: IntFieldUpdateOperationsInput | number
  }

  export type expenseCreateInput = {
    date?: Date | string
    category: string
    description?: string | null
    amount: Decimal | DecimalJsLike | number | string
    payee?: string | null
    deal?: dealCreateNestedOneWithoutExpensesInput
    property?: propertyCreateNestedOneWithoutExpensesInput
  }

  export type expenseUncheckedCreateInput = {
    id?: number
    date?: Date | string
    category: string
    description?: string | null
    amount: Decimal | DecimalJsLike | number | string
    payee?: string | null
    dealId?: number | null
    propertyId?: number | null
  }

  export type expenseUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payee?: NullableStringFieldUpdateOperationsInput | string | null
    deal?: dealUpdateOneWithoutExpensesNestedInput
    property?: propertyUpdateOneWithoutExpensesNestedInput
  }

  export type expenseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payee?: NullableStringFieldUpdateOperationsInput | string | null
    dealId?: NullableIntFieldUpdateOperationsInput | number | null
    propertyId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type expenseCreateManyInput = {
    id?: number
    date?: Date | string
    category: string
    description?: string | null
    amount: Decimal | DecimalJsLike | number | string
    payee?: string | null
    dealId?: number | null
    propertyId?: number | null
  }

  export type expenseUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payee?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type expenseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payee?: NullableStringFieldUpdateOperationsInput | string | null
    dealId?: NullableIntFieldUpdateOperationsInput | number | null
    propertyId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type inquiryCreateInput = {
    fullName: string
    phone?: string | null
    email?: string | null
    message?: string | null
    type?: $Enums.inquiry_type
    status?: $Enums.inquiry_status
    createdAt?: Date | string
    property: propertyCreateNestedOneWithoutInquiriesInput
  }

  export type inquiryUncheckedCreateInput = {
    id?: number
    propertyId: number
    fullName: string
    phone?: string | null
    email?: string | null
    message?: string | null
    type?: $Enums.inquiry_type
    status?: $Enums.inquiry_status
    createdAt?: Date | string
  }

  export type inquiryUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enuminquiry_typeFieldUpdateOperationsInput | $Enums.inquiry_type
    status?: Enuminquiry_statusFieldUpdateOperationsInput | $Enums.inquiry_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    property?: propertyUpdateOneRequiredWithoutInquiriesNestedInput
  }

  export type inquiryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    propertyId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enuminquiry_typeFieldUpdateOperationsInput | $Enums.inquiry_type
    status?: Enuminquiry_statusFieldUpdateOperationsInput | $Enums.inquiry_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type inquiryCreateManyInput = {
    id?: number
    propertyId: number
    fullName: string
    phone?: string | null
    email?: string | null
    message?: string | null
    type?: $Enums.inquiry_type
    status?: $Enums.inquiry_status
    createdAt?: Date | string
  }

  export type inquiryUpdateManyMutationInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enuminquiry_typeFieldUpdateOperationsInput | $Enums.inquiry_type
    status?: Enuminquiry_statusFieldUpdateOperationsInput | $Enums.inquiry_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type inquiryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    propertyId?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enuminquiry_typeFieldUpdateOperationsInput | $Enums.inquiry_type
    status?: Enuminquiry_statusFieldUpdateOperationsInput | $Enums.inquiry_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type invoiceCreateInput = {
    number: string
    issueDate?: Date | string
    dueDate?: Date | string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string
    deal: dealCreateNestedOneWithoutInvoicesInput
    payments?: paymentCreateNestedManyWithoutInvoiceInput
  }

  export type invoiceUncheckedCreateInput = {
    id?: number
    number: string
    issueDate?: Date | string
    dueDate?: Date | string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string
    dealId: number
    payments?: paymentUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type invoiceUpdateInput = {
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    deal?: dealUpdateOneRequiredWithoutInvoicesNestedInput
    payments?: paymentUpdateManyWithoutInvoiceNestedInput
  }

  export type invoiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    dealId?: IntFieldUpdateOperationsInput | number
    payments?: paymentUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type invoiceCreateManyInput = {
    id?: number
    number: string
    issueDate?: Date | string
    dueDate?: Date | string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string
    dealId: number
  }

  export type invoiceUpdateManyMutationInput = {
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type invoiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    dealId?: IntFieldUpdateOperationsInput | number
  }

  export type pagecontentCreateInput = {
    page: string
    section: string
    key: string
    value: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type pagecontentUncheckedCreateInput = {
    id?: number
    page: string
    section: string
    key: string
    value: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type pagecontentUpdateInput = {
    page?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type pagecontentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    page?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type pagecontentCreateManyInput = {
    id?: number
    page: string
    section: string
    key: string
    value: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type pagecontentUpdateManyMutationInput = {
    page?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type pagecontentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    page?: StringFieldUpdateOperationsInput | string
    section?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentCreateInput = {
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    method?: string
    reference?: string | null
    deal: dealCreateNestedOneWithoutPaymentsInput
    invoice?: invoiceCreateNestedOneWithoutPaymentsInput
    schedules?: paymentscheduleCreateNestedManyWithoutPaymentInput
  }

  export type paymentUncheckedCreateInput = {
    id?: number
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    method?: string
    reference?: string | null
    dealId: number
    invoiceId?: number | null
    schedules?: paymentscheduleUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type paymentUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    deal?: dealUpdateOneRequiredWithoutPaymentsNestedInput
    invoice?: invoiceUpdateOneWithoutPaymentsNestedInput
    schedules?: paymentscheduleUpdateManyWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    dealId?: IntFieldUpdateOperationsInput | number
    invoiceId?: NullableIntFieldUpdateOperationsInput | number | null
    schedules?: paymentscheduleUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type paymentCreateManyInput = {
    id?: number
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    method?: string
    reference?: string | null
    dealId: number
    invoiceId?: number | null
  }

  export type paymentUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type paymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    dealId?: IntFieldUpdateOperationsInput | number
    invoiceId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type paymentscheduleCreateInput = {
    label: string
    dueDate: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status?: string
    createdAt?: Date | string
    deal: dealCreateNestedOneWithoutSchedulesInput
    payment?: paymentCreateNestedOneWithoutSchedulesInput
  }

  export type paymentscheduleUncheckedCreateInput = {
    id?: number
    dealId: number
    label: string
    dueDate: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status?: string
    paymentId?: number | null
    createdAt?: Date | string
  }

  export type paymentscheduleUpdateInput = {
    label?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deal?: dealUpdateOneRequiredWithoutSchedulesNestedInput
    payment?: paymentUpdateOneWithoutSchedulesNestedInput
  }

  export type paymentscheduleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dealId?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentscheduleCreateManyInput = {
    id?: number
    dealId: number
    label: string
    dueDate: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status?: string
    paymentId?: number | null
    createdAt?: Date | string
  }

  export type paymentscheduleUpdateManyMutationInput = {
    label?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentscheduleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dealId?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type projectCreateInput = {
    title: string
    slug: string
    description?: string | null
    coverImage?: string | null
    status?: string | null
    location?: string | null
    category?: string | null
    surface?: Decimal | DecimalJsLike | number | string | null
    units?: number | null
    startedAt?: Date | string | null
    deliveredAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medias?: projectmediaCreateNestedManyWithoutProjectInput
  }

  export type projectUncheckedCreateInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    coverImage?: string | null
    status?: string | null
    location?: string | null
    category?: string | null
    surface?: Decimal | DecimalJsLike | number | string | null
    units?: number | null
    startedAt?: Date | string | null
    deliveredAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medias?: projectmediaUncheckedCreateNestedManyWithoutProjectInput
  }

  export type projectUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    surface?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    units?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medias?: projectmediaUpdateManyWithoutProjectNestedInput
  }

  export type projectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    surface?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    units?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medias?: projectmediaUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type projectCreateManyInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    coverImage?: string | null
    status?: string | null
    location?: string | null
    category?: string | null
    surface?: Decimal | DecimalJsLike | number | string | null
    units?: number | null
    startedAt?: Date | string | null
    deliveredAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type projectUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    surface?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    units?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type projectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    surface?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    units?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type projectmediaCreateInput = {
    kind?: string
    url: string
    alt?: string | null
    order?: number
    createdAt?: Date | string
    project: projectCreateNestedOneWithoutMediasInput
  }

  export type projectmediaUncheckedCreateInput = {
    id?: number
    projectId: number
    kind?: string
    url: string
    alt?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type projectmediaUpdateInput = {
    kind?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: projectUpdateOneRequiredWithoutMediasNestedInput
  }

  export type projectmediaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    kind?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type projectmediaCreateManyInput = {
    id?: number
    projectId: number
    kind?: string
    url: string
    alt?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type projectmediaUpdateManyMutationInput = {
    kind?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type projectmediaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    projectId?: IntFieldUpdateOperationsInput | number
    kind?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type propertyCreateInput = {
    title: string
    slug: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    location?: string | null
    category?: string | null
    bedrooms?: number | null
    bathrooms?: number | null
    area_m2?: Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: number | null
    type?: string | null
    yearOfConstruction?: number | null
    capacity?: number | null
    status?: string | null
    mainImage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: propertyimageCreateNestedManyWithoutPropertyInput
    deals?: dealCreateNestedManyWithoutPropertyInput
    expenses?: expenseCreateNestedManyWithoutPropertyInput
    inquiries?: inquiryCreateNestedManyWithoutPropertyInput
    contactLeads?: contactleadCreateNestedManyWithoutPropertyInput
    coOwnerships?: coownershipCreateNestedManyWithoutPropertyInput
  }

  export type propertyUncheckedCreateInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    location?: string | null
    category?: string | null
    bedrooms?: number | null
    bathrooms?: number | null
    area_m2?: Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: number | null
    type?: string | null
    yearOfConstruction?: number | null
    capacity?: number | null
    status?: string | null
    mainImage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: propertyimageUncheckedCreateNestedManyWithoutPropertyInput
    deals?: dealUncheckedCreateNestedManyWithoutPropertyInput
    expenses?: expenseUncheckedCreateNestedManyWithoutPropertyInput
    inquiries?: inquiryUncheckedCreateNestedManyWithoutPropertyInput
    contactLeads?: contactleadUncheckedCreateNestedManyWithoutPropertyInput
    coOwnerships?: coownershipUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type propertyUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    bathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    area_m2?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfConstruction?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: propertyimageUpdateManyWithoutPropertyNestedInput
    deals?: dealUpdateManyWithoutPropertyNestedInput
    expenses?: expenseUpdateManyWithoutPropertyNestedInput
    inquiries?: inquiryUpdateManyWithoutPropertyNestedInput
    contactLeads?: contactleadUpdateManyWithoutPropertyNestedInput
    coOwnerships?: coownershipUpdateManyWithoutPropertyNestedInput
  }

  export type propertyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    bathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    area_m2?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfConstruction?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: propertyimageUncheckedUpdateManyWithoutPropertyNestedInput
    deals?: dealUncheckedUpdateManyWithoutPropertyNestedInput
    expenses?: expenseUncheckedUpdateManyWithoutPropertyNestedInput
    inquiries?: inquiryUncheckedUpdateManyWithoutPropertyNestedInput
    contactLeads?: contactleadUncheckedUpdateManyWithoutPropertyNestedInput
    coOwnerships?: coownershipUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type propertyCreateManyInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    location?: string | null
    category?: string | null
    bedrooms?: number | null
    bathrooms?: number | null
    area_m2?: Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: number | null
    type?: string | null
    yearOfConstruction?: number | null
    capacity?: number | null
    status?: string | null
    mainImage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type propertyUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    bathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    area_m2?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfConstruction?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type propertyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    bathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    area_m2?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfConstruction?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type propertyimageCreateInput = {
    url: string
    alt?: string | null
    order?: number
    createdAt?: Date | string
    property: propertyCreateNestedOneWithoutImagesInput
  }

  export type propertyimageUncheckedCreateInput = {
    id?: number
    propertyId: number
    url: string
    alt?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type propertyimageUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    property?: propertyUpdateOneRequiredWithoutImagesNestedInput
  }

  export type propertyimageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    propertyId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type propertyimageCreateManyInput = {
    id?: number
    propertyId: number
    url: string
    alt?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type propertyimageUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type propertyimageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    propertyId?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type serviceCreateInput = {
    name: string
    title?: string | null
    description?: string | null
    content?: string | null
    icon?: string | null
    slug?: string | null
  }

  export type serviceUncheckedCreateInput = {
    id?: number
    name: string
    title?: string | null
    description?: string | null
    content?: string | null
    icon?: string | null
    slug?: string | null
  }

  export type serviceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type serviceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type serviceCreateManyInput = {
    id?: number
    name: string
    title?: string | null
    description?: string | null
    content?: string | null
    icon?: string | null
    slug?: string | null
  }

  export type serviceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type serviceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    slug?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userCreateInput = {
    email: string
    password: string
    name?: string | null
    isStaff?: boolean
    role?: string
    createdAt?: Date | string
  }

  export type userUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    isStaff?: boolean
    role?: string
    createdAt?: Date | string
  }

  export type userUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isStaff?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isStaff?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userCreateManyInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    isStaff?: boolean
    role?: string
    createdAt?: Date | string
  }

  export type userUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isStaff?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    isStaff?: BoolFieldUpdateOperationsInput | boolean
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type companyinfoCreateInput = {
    key: string
    value: string
    category?: string
    label?: string | null
    order?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type companyinfoUncheckedCreateInput = {
    id?: number
    key: string
    value: string
    category?: string
    label?: string | null
    order?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type companyinfoUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type companyinfoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type companyinfoCreateManyInput = {
    id?: number
    key: string
    value: string
    category?: string
    label?: string | null
    order?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type companyinfoUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type companyinfoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type auditlogOrderByRelevanceInput = {
    fields: auditlogOrderByRelevanceFieldEnum | auditlogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type auditlogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    before?: SortOrder
    after?: SortOrder
    createdAt?: SortOrder
  }

  export type auditlogAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    entityId?: SortOrder
  }

  export type auditlogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    createdAt?: SortOrder
  }

  export type auditlogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    createdAt?: SortOrder
  }

  export type auditlogSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    entityId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DealListRelationFilter = {
    every?: dealWhereInput
    some?: dealWhereInput
    none?: dealWhereInput
  }

  export type CoownershipListRelationFilter = {
    every?: coownershipWhereInput
    some?: coownershipWhereInput
    none?: coownershipWhereInput
  }

  export type dealOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type coownershipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type clientOrderByRelevanceInput = {
    fields: clientOrderByRelevanceFieldEnum | clientOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type clientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    idNumber?: SortOrder
    notes?: SortOrder
  }

  export type clientAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type clientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    idNumber?: SortOrder
    notes?: SortOrder
  }

  export type clientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    idNumber?: SortOrder
    notes?: SortOrder
  }

  export type clientSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type PropertyNullableScalarRelationFilter = {
    is?: propertyWhereInput | null
    isNot?: propertyWhereInput | null
  }

  export type contactleadOrderByRelevanceInput = {
    fields: contactleadOrderByRelevanceFieldEnum | contactleadOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type contactleadCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    message?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
    propertyId?: SortOrder
  }

  export type contactleadAvgOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
  }

  export type contactleadMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    message?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
    propertyId?: SortOrder
  }

  export type contactleadMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    message?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
    propertyId?: SortOrder
  }

  export type contactleadSumOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type PropertyScalarRelationFilter = {
    is?: propertyWhereInput
    isNot?: propertyWhereInput
  }

  export type ClientScalarRelationFilter = {
    is?: clientWhereInput
    isNot?: clientWhereInput
  }

  export type coownershipOrderByRelevanceInput = {
    fields: coownershipOrderByRelevanceFieldEnum | coownershipOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type coownershipPropertyIdClientIdCompoundUniqueInput = {
    propertyId: number
    clientId: number
  }

  export type coownershipCountOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
    clientId?: SortOrder
    share?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type coownershipAvgOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
    clientId?: SortOrder
    share?: SortOrder
  }

  export type coownershipMaxOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
    clientId?: SortOrder
    share?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type coownershipMinOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
    clientId?: SortOrder
    share?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type coownershipSumOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
    clientId?: SortOrder
    share?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type InvoiceListRelationFilter = {
    every?: invoiceWhereInput
    some?: invoiceWhereInput
    none?: invoiceWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: paymentWhereInput
    some?: paymentWhereInput
    none?: paymentWhereInput
  }

  export type PaymentscheduleListRelationFilter = {
    every?: paymentscheduleWhereInput
    some?: paymentscheduleWhereInput
    none?: paymentscheduleWhereInput
  }

  export type ExpenseListRelationFilter = {
    every?: expenseWhereInput
    some?: expenseWhereInput
    none?: expenseWhereInput
  }

  export type invoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type paymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type paymentscheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type expenseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type dealOrderByRelevanceInput = {
    fields: dealOrderByRelevanceFieldEnum | dealOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type dealCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    basePrice?: SortOrder
    discount?: SortOrder
    taxRate?: SortOrder
    commissionRate?: SortOrder
    expectedClose?: SortOrder
    closedAt?: SortOrder
    createdAt?: SortOrder
    propertyId?: SortOrder
    clientId?: SortOrder
  }

  export type dealAvgOrderByAggregateInput = {
    id?: SortOrder
    basePrice?: SortOrder
    discount?: SortOrder
    taxRate?: SortOrder
    commissionRate?: SortOrder
    propertyId?: SortOrder
    clientId?: SortOrder
  }

  export type dealMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    basePrice?: SortOrder
    discount?: SortOrder
    taxRate?: SortOrder
    commissionRate?: SortOrder
    expectedClose?: SortOrder
    closedAt?: SortOrder
    createdAt?: SortOrder
    propertyId?: SortOrder
    clientId?: SortOrder
  }

  export type dealMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    status?: SortOrder
    basePrice?: SortOrder
    discount?: SortOrder
    taxRate?: SortOrder
    commissionRate?: SortOrder
    expectedClose?: SortOrder
    closedAt?: SortOrder
    createdAt?: SortOrder
    propertyId?: SortOrder
    clientId?: SortOrder
  }

  export type dealSumOrderByAggregateInput = {
    id?: SortOrder
    basePrice?: SortOrder
    discount?: SortOrder
    taxRate?: SortOrder
    commissionRate?: SortOrder
    propertyId?: SortOrder
    clientId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DealNullableScalarRelationFilter = {
    is?: dealWhereInput | null
    isNot?: dealWhereInput | null
  }

  export type expenseOrderByRelevanceInput = {
    fields: expenseOrderByRelevanceFieldEnum | expenseOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type expenseCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    category?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    payee?: SortOrder
    dealId?: SortOrder
    propertyId?: SortOrder
  }

  export type expenseAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    dealId?: SortOrder
    propertyId?: SortOrder
  }

  export type expenseMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    category?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    payee?: SortOrder
    dealId?: SortOrder
    propertyId?: SortOrder
  }

  export type expenseMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    category?: SortOrder
    description?: SortOrder
    amount?: SortOrder
    payee?: SortOrder
    dealId?: SortOrder
    propertyId?: SortOrder
  }

  export type expenseSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    dealId?: SortOrder
    propertyId?: SortOrder
  }

  export type Enuminquiry_typeFilter<$PrismaModel = never> = {
    equals?: $Enums.inquiry_type | Enuminquiry_typeFieldRefInput<$PrismaModel>
    in?: $Enums.inquiry_type[]
    notIn?: $Enums.inquiry_type[]
    not?: NestedEnuminquiry_typeFilter<$PrismaModel> | $Enums.inquiry_type
  }

  export type Enuminquiry_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.inquiry_status | Enuminquiry_statusFieldRefInput<$PrismaModel>
    in?: $Enums.inquiry_status[]
    notIn?: $Enums.inquiry_status[]
    not?: NestedEnuminquiry_statusFilter<$PrismaModel> | $Enums.inquiry_status
  }

  export type inquiryOrderByRelevanceInput = {
    fields: inquiryOrderByRelevanceFieldEnum | inquiryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type inquiryCountOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    message?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type inquiryAvgOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
  }

  export type inquiryMaxOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    message?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type inquiryMinOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
    fullName?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    message?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type inquirySumOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
  }

  export type Enuminquiry_typeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.inquiry_type | Enuminquiry_typeFieldRefInput<$PrismaModel>
    in?: $Enums.inquiry_type[]
    notIn?: $Enums.inquiry_type[]
    not?: NestedEnuminquiry_typeWithAggregatesFilter<$PrismaModel> | $Enums.inquiry_type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnuminquiry_typeFilter<$PrismaModel>
    _max?: NestedEnuminquiry_typeFilter<$PrismaModel>
  }

  export type Enuminquiry_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.inquiry_status | Enuminquiry_statusFieldRefInput<$PrismaModel>
    in?: $Enums.inquiry_status[]
    notIn?: $Enums.inquiry_status[]
    not?: NestedEnuminquiry_statusWithAggregatesFilter<$PrismaModel> | $Enums.inquiry_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnuminquiry_statusFilter<$PrismaModel>
    _max?: NestedEnuminquiry_statusFilter<$PrismaModel>
  }

  export type DealScalarRelationFilter = {
    is?: dealWhereInput
    isNot?: dealWhereInput
  }

  export type invoiceOrderByRelevanceInput = {
    fields: invoiceOrderByRelevanceFieldEnum | invoiceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type invoiceCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    issueDate?: SortOrder
    dueDate?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    dealId?: SortOrder
  }

  export type invoiceAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    dealId?: SortOrder
  }

  export type invoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    issueDate?: SortOrder
    dueDate?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    dealId?: SortOrder
  }

  export type invoiceMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    issueDate?: SortOrder
    dueDate?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    dealId?: SortOrder
  }

  export type invoiceSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    dealId?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type pagecontentOrderByRelevanceInput = {
    fields: pagecontentOrderByRelevanceFieldEnum | pagecontentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type pagecontentPageSectionKeyCompoundUniqueInput = {
    page: string
    section: string
    key: string
  }

  export type pagecontentCountOrderByAggregateInput = {
    id?: SortOrder
    page?: SortOrder
    section?: SortOrder
    key?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type pagecontentAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type pagecontentMaxOrderByAggregateInput = {
    id?: SortOrder
    page?: SortOrder
    section?: SortOrder
    key?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type pagecontentMinOrderByAggregateInput = {
    id?: SortOrder
    page?: SortOrder
    section?: SortOrder
    key?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type pagecontentSumOrderByAggregateInput = {
    id?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type InvoiceNullableScalarRelationFilter = {
    is?: invoiceWhereInput | null
    isNot?: invoiceWhereInput | null
  }

  export type paymentOrderByRelevanceInput = {
    fields: paymentOrderByRelevanceFieldEnum | paymentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type paymentCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    method?: SortOrder
    reference?: SortOrder
    dealId?: SortOrder
    invoiceId?: SortOrder
  }

  export type paymentAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    dealId?: SortOrder
    invoiceId?: SortOrder
  }

  export type paymentMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    method?: SortOrder
    reference?: SortOrder
    dealId?: SortOrder
    invoiceId?: SortOrder
  }

  export type paymentMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    amount?: SortOrder
    method?: SortOrder
    reference?: SortOrder
    dealId?: SortOrder
    invoiceId?: SortOrder
  }

  export type paymentSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    dealId?: SortOrder
    invoiceId?: SortOrder
  }

  export type PaymentNullableScalarRelationFilter = {
    is?: paymentWhereInput | null
    isNot?: paymentWhereInput | null
  }

  export type paymentscheduleOrderByRelevanceInput = {
    fields: paymentscheduleOrderByRelevanceFieldEnum | paymentscheduleOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type paymentscheduleCountOrderByAggregateInput = {
    id?: SortOrder
    dealId?: SortOrder
    label?: SortOrder
    dueDate?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentId?: SortOrder
    createdAt?: SortOrder
  }

  export type paymentscheduleAvgOrderByAggregateInput = {
    id?: SortOrder
    dealId?: SortOrder
    amount?: SortOrder
    paymentId?: SortOrder
  }

  export type paymentscheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    dealId?: SortOrder
    label?: SortOrder
    dueDate?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentId?: SortOrder
    createdAt?: SortOrder
  }

  export type paymentscheduleMinOrderByAggregateInput = {
    id?: SortOrder
    dealId?: SortOrder
    label?: SortOrder
    dueDate?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    paymentId?: SortOrder
    createdAt?: SortOrder
  }

  export type paymentscheduleSumOrderByAggregateInput = {
    id?: SortOrder
    dealId?: SortOrder
    amount?: SortOrder
    paymentId?: SortOrder
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type ProjectmediaListRelationFilter = {
    every?: projectmediaWhereInput
    some?: projectmediaWhereInput
    none?: projectmediaWhereInput
  }

  export type projectmediaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type projectOrderByRelevanceInput = {
    fields: projectOrderByRelevanceFieldEnum | projectOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type projectCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    coverImage?: SortOrder
    status?: SortOrder
    location?: SortOrder
    category?: SortOrder
    surface?: SortOrder
    units?: SortOrder
    startedAt?: SortOrder
    deliveredAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type projectAvgOrderByAggregateInput = {
    id?: SortOrder
    surface?: SortOrder
    units?: SortOrder
  }

  export type projectMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    coverImage?: SortOrder
    status?: SortOrder
    location?: SortOrder
    category?: SortOrder
    surface?: SortOrder
    units?: SortOrder
    startedAt?: SortOrder
    deliveredAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type projectMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    coverImage?: SortOrder
    status?: SortOrder
    location?: SortOrder
    category?: SortOrder
    surface?: SortOrder
    units?: SortOrder
    startedAt?: SortOrder
    deliveredAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type projectSumOrderByAggregateInput = {
    id?: SortOrder
    surface?: SortOrder
    units?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type ProjectScalarRelationFilter = {
    is?: projectWhereInput
    isNot?: projectWhereInput
  }

  export type projectmediaOrderByRelevanceInput = {
    fields: projectmediaOrderByRelevanceFieldEnum | projectmediaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type projectmediaCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    kind?: SortOrder
    url?: SortOrder
    alt?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type projectmediaAvgOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    order?: SortOrder
  }

  export type projectmediaMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    kind?: SortOrder
    url?: SortOrder
    alt?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type projectmediaMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    kind?: SortOrder
    url?: SortOrder
    alt?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type projectmediaSumOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    order?: SortOrder
  }

  export type PropertyimageListRelationFilter = {
    every?: propertyimageWhereInput
    some?: propertyimageWhereInput
    none?: propertyimageWhereInput
  }

  export type InquiryListRelationFilter = {
    every?: inquiryWhereInput
    some?: inquiryWhereInput
    none?: inquiryWhereInput
  }

  export type ContactleadListRelationFilter = {
    every?: contactleadWhereInput
    some?: contactleadWhereInput
    none?: contactleadWhereInput
  }

  export type propertyimageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type inquiryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type contactleadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type propertyOrderByRelevanceInput = {
    fields: propertyOrderByRelevanceFieldEnum | propertyOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type propertyCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    price?: SortOrder
    location?: SortOrder
    category?: SortOrder
    bedrooms?: SortOrder
    bathrooms?: SortOrder
    area_m2?: SortOrder
    surfaceHabitable?: SortOrder
    type?: SortOrder
    yearOfConstruction?: SortOrder
    capacity?: SortOrder
    status?: SortOrder
    mainImage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type propertyAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    bedrooms?: SortOrder
    bathrooms?: SortOrder
    area_m2?: SortOrder
    surfaceHabitable?: SortOrder
    yearOfConstruction?: SortOrder
    capacity?: SortOrder
  }

  export type propertyMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    price?: SortOrder
    location?: SortOrder
    category?: SortOrder
    bedrooms?: SortOrder
    bathrooms?: SortOrder
    area_m2?: SortOrder
    surfaceHabitable?: SortOrder
    type?: SortOrder
    yearOfConstruction?: SortOrder
    capacity?: SortOrder
    status?: SortOrder
    mainImage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type propertyMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    price?: SortOrder
    location?: SortOrder
    category?: SortOrder
    bedrooms?: SortOrder
    bathrooms?: SortOrder
    area_m2?: SortOrder
    surfaceHabitable?: SortOrder
    type?: SortOrder
    yearOfConstruction?: SortOrder
    capacity?: SortOrder
    status?: SortOrder
    mainImage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type propertySumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    bedrooms?: SortOrder
    bathrooms?: SortOrder
    area_m2?: SortOrder
    surfaceHabitable?: SortOrder
    yearOfConstruction?: SortOrder
    capacity?: SortOrder
  }

  export type propertyimageOrderByRelevanceInput = {
    fields: propertyimageOrderByRelevanceFieldEnum | propertyimageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type propertyimageCountOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
    url?: SortOrder
    alt?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type propertyimageAvgOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
    order?: SortOrder
  }

  export type propertyimageMaxOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
    url?: SortOrder
    alt?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type propertyimageMinOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
    url?: SortOrder
    alt?: SortOrder
    order?: SortOrder
    createdAt?: SortOrder
  }

  export type propertyimageSumOrderByAggregateInput = {
    id?: SortOrder
    propertyId?: SortOrder
    order?: SortOrder
  }

  export type serviceOrderByRelevanceInput = {
    fields: serviceOrderByRelevanceFieldEnum | serviceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type serviceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    icon?: SortOrder
    slug?: SortOrder
  }

  export type serviceAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type serviceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    icon?: SortOrder
    slug?: SortOrder
  }

  export type serviceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    title?: SortOrder
    description?: SortOrder
    content?: SortOrder
    icon?: SortOrder
    slug?: SortOrder
  }

  export type serviceSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type userOrderByRelevanceInput = {
    fields: userOrderByRelevanceFieldEnum | userOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    isStaff?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    isStaff?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    isStaff?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type companyinfoOrderByRelevanceInput = {
    fields: companyinfoOrderByRelevanceFieldEnum | companyinfoOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type companyinfoCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    category?: SortOrder
    label?: SortOrder
    order?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type companyinfoAvgOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
  }

  export type companyinfoMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    category?: SortOrder
    label?: SortOrder
    order?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type companyinfoMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    category?: SortOrder
    label?: SortOrder
    order?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type companyinfoSumOrderByAggregateInput = {
    id?: SortOrder
    order?: SortOrder
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type dealCreateNestedManyWithoutClientInput = {
    create?: XOR<dealCreateWithoutClientInput, dealUncheckedCreateWithoutClientInput> | dealCreateWithoutClientInput[] | dealUncheckedCreateWithoutClientInput[]
    connectOrCreate?: dealCreateOrConnectWithoutClientInput | dealCreateOrConnectWithoutClientInput[]
    createMany?: dealCreateManyClientInputEnvelope
    connect?: dealWhereUniqueInput | dealWhereUniqueInput[]
  }

  export type coownershipCreateNestedManyWithoutClientInput = {
    create?: XOR<coownershipCreateWithoutClientInput, coownershipUncheckedCreateWithoutClientInput> | coownershipCreateWithoutClientInput[] | coownershipUncheckedCreateWithoutClientInput[]
    connectOrCreate?: coownershipCreateOrConnectWithoutClientInput | coownershipCreateOrConnectWithoutClientInput[]
    createMany?: coownershipCreateManyClientInputEnvelope
    connect?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
  }

  export type dealUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<dealCreateWithoutClientInput, dealUncheckedCreateWithoutClientInput> | dealCreateWithoutClientInput[] | dealUncheckedCreateWithoutClientInput[]
    connectOrCreate?: dealCreateOrConnectWithoutClientInput | dealCreateOrConnectWithoutClientInput[]
    createMany?: dealCreateManyClientInputEnvelope
    connect?: dealWhereUniqueInput | dealWhereUniqueInput[]
  }

  export type coownershipUncheckedCreateNestedManyWithoutClientInput = {
    create?: XOR<coownershipCreateWithoutClientInput, coownershipUncheckedCreateWithoutClientInput> | coownershipCreateWithoutClientInput[] | coownershipUncheckedCreateWithoutClientInput[]
    connectOrCreate?: coownershipCreateOrConnectWithoutClientInput | coownershipCreateOrConnectWithoutClientInput[]
    createMany?: coownershipCreateManyClientInputEnvelope
    connect?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type dealUpdateManyWithoutClientNestedInput = {
    create?: XOR<dealCreateWithoutClientInput, dealUncheckedCreateWithoutClientInput> | dealCreateWithoutClientInput[] | dealUncheckedCreateWithoutClientInput[]
    connectOrCreate?: dealCreateOrConnectWithoutClientInput | dealCreateOrConnectWithoutClientInput[]
    upsert?: dealUpsertWithWhereUniqueWithoutClientInput | dealUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: dealCreateManyClientInputEnvelope
    set?: dealWhereUniqueInput | dealWhereUniqueInput[]
    disconnect?: dealWhereUniqueInput | dealWhereUniqueInput[]
    delete?: dealWhereUniqueInput | dealWhereUniqueInput[]
    connect?: dealWhereUniqueInput | dealWhereUniqueInput[]
    update?: dealUpdateWithWhereUniqueWithoutClientInput | dealUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: dealUpdateManyWithWhereWithoutClientInput | dealUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: dealScalarWhereInput | dealScalarWhereInput[]
  }

  export type coownershipUpdateManyWithoutClientNestedInput = {
    create?: XOR<coownershipCreateWithoutClientInput, coownershipUncheckedCreateWithoutClientInput> | coownershipCreateWithoutClientInput[] | coownershipUncheckedCreateWithoutClientInput[]
    connectOrCreate?: coownershipCreateOrConnectWithoutClientInput | coownershipCreateOrConnectWithoutClientInput[]
    upsert?: coownershipUpsertWithWhereUniqueWithoutClientInput | coownershipUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: coownershipCreateManyClientInputEnvelope
    set?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
    disconnect?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
    delete?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
    connect?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
    update?: coownershipUpdateWithWhereUniqueWithoutClientInput | coownershipUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: coownershipUpdateManyWithWhereWithoutClientInput | coownershipUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: coownershipScalarWhereInput | coownershipScalarWhereInput[]
  }

  export type dealUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<dealCreateWithoutClientInput, dealUncheckedCreateWithoutClientInput> | dealCreateWithoutClientInput[] | dealUncheckedCreateWithoutClientInput[]
    connectOrCreate?: dealCreateOrConnectWithoutClientInput | dealCreateOrConnectWithoutClientInput[]
    upsert?: dealUpsertWithWhereUniqueWithoutClientInput | dealUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: dealCreateManyClientInputEnvelope
    set?: dealWhereUniqueInput | dealWhereUniqueInput[]
    disconnect?: dealWhereUniqueInput | dealWhereUniqueInput[]
    delete?: dealWhereUniqueInput | dealWhereUniqueInput[]
    connect?: dealWhereUniqueInput | dealWhereUniqueInput[]
    update?: dealUpdateWithWhereUniqueWithoutClientInput | dealUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: dealUpdateManyWithWhereWithoutClientInput | dealUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: dealScalarWhereInput | dealScalarWhereInput[]
  }

  export type coownershipUncheckedUpdateManyWithoutClientNestedInput = {
    create?: XOR<coownershipCreateWithoutClientInput, coownershipUncheckedCreateWithoutClientInput> | coownershipCreateWithoutClientInput[] | coownershipUncheckedCreateWithoutClientInput[]
    connectOrCreate?: coownershipCreateOrConnectWithoutClientInput | coownershipCreateOrConnectWithoutClientInput[]
    upsert?: coownershipUpsertWithWhereUniqueWithoutClientInput | coownershipUpsertWithWhereUniqueWithoutClientInput[]
    createMany?: coownershipCreateManyClientInputEnvelope
    set?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
    disconnect?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
    delete?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
    connect?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
    update?: coownershipUpdateWithWhereUniqueWithoutClientInput | coownershipUpdateWithWhereUniqueWithoutClientInput[]
    updateMany?: coownershipUpdateManyWithWhereWithoutClientInput | coownershipUpdateManyWithWhereWithoutClientInput[]
    deleteMany?: coownershipScalarWhereInput | coownershipScalarWhereInput[]
  }

  export type propertyCreateNestedOneWithoutContactLeadsInput = {
    create?: XOR<propertyCreateWithoutContactLeadsInput, propertyUncheckedCreateWithoutContactLeadsInput>
    connectOrCreate?: propertyCreateOrConnectWithoutContactLeadsInput
    connect?: propertyWhereUniqueInput
  }

  export type propertyUpdateOneWithoutContactLeadsNestedInput = {
    create?: XOR<propertyCreateWithoutContactLeadsInput, propertyUncheckedCreateWithoutContactLeadsInput>
    connectOrCreate?: propertyCreateOrConnectWithoutContactLeadsInput
    upsert?: propertyUpsertWithoutContactLeadsInput
    disconnect?: propertyWhereInput | boolean
    delete?: propertyWhereInput | boolean
    connect?: propertyWhereUniqueInput
    update?: XOR<XOR<propertyUpdateToOneWithWhereWithoutContactLeadsInput, propertyUpdateWithoutContactLeadsInput>, propertyUncheckedUpdateWithoutContactLeadsInput>
  }

  export type propertyCreateNestedOneWithoutCoOwnershipsInput = {
    create?: XOR<propertyCreateWithoutCoOwnershipsInput, propertyUncheckedCreateWithoutCoOwnershipsInput>
    connectOrCreate?: propertyCreateOrConnectWithoutCoOwnershipsInput
    connect?: propertyWhereUniqueInput
  }

  export type clientCreateNestedOneWithoutCoOwnershipsInput = {
    create?: XOR<clientCreateWithoutCoOwnershipsInput, clientUncheckedCreateWithoutCoOwnershipsInput>
    connectOrCreate?: clientCreateOrConnectWithoutCoOwnershipsInput
    connect?: clientWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type propertyUpdateOneRequiredWithoutCoOwnershipsNestedInput = {
    create?: XOR<propertyCreateWithoutCoOwnershipsInput, propertyUncheckedCreateWithoutCoOwnershipsInput>
    connectOrCreate?: propertyCreateOrConnectWithoutCoOwnershipsInput
    upsert?: propertyUpsertWithoutCoOwnershipsInput
    connect?: propertyWhereUniqueInput
    update?: XOR<XOR<propertyUpdateToOneWithWhereWithoutCoOwnershipsInput, propertyUpdateWithoutCoOwnershipsInput>, propertyUncheckedUpdateWithoutCoOwnershipsInput>
  }

  export type clientUpdateOneRequiredWithoutCoOwnershipsNestedInput = {
    create?: XOR<clientCreateWithoutCoOwnershipsInput, clientUncheckedCreateWithoutCoOwnershipsInput>
    connectOrCreate?: clientCreateOrConnectWithoutCoOwnershipsInput
    upsert?: clientUpsertWithoutCoOwnershipsInput
    connect?: clientWhereUniqueInput
    update?: XOR<XOR<clientUpdateToOneWithWhereWithoutCoOwnershipsInput, clientUpdateWithoutCoOwnershipsInput>, clientUncheckedUpdateWithoutCoOwnershipsInput>
  }

  export type clientCreateNestedOneWithoutDealsInput = {
    create?: XOR<clientCreateWithoutDealsInput, clientUncheckedCreateWithoutDealsInput>
    connectOrCreate?: clientCreateOrConnectWithoutDealsInput
    connect?: clientWhereUniqueInput
  }

  export type propertyCreateNestedOneWithoutDealsInput = {
    create?: XOR<propertyCreateWithoutDealsInput, propertyUncheckedCreateWithoutDealsInput>
    connectOrCreate?: propertyCreateOrConnectWithoutDealsInput
    connect?: propertyWhereUniqueInput
  }

  export type invoiceCreateNestedManyWithoutDealInput = {
    create?: XOR<invoiceCreateWithoutDealInput, invoiceUncheckedCreateWithoutDealInput> | invoiceCreateWithoutDealInput[] | invoiceUncheckedCreateWithoutDealInput[]
    connectOrCreate?: invoiceCreateOrConnectWithoutDealInput | invoiceCreateOrConnectWithoutDealInput[]
    createMany?: invoiceCreateManyDealInputEnvelope
    connect?: invoiceWhereUniqueInput | invoiceWhereUniqueInput[]
  }

  export type paymentCreateNestedManyWithoutDealInput = {
    create?: XOR<paymentCreateWithoutDealInput, paymentUncheckedCreateWithoutDealInput> | paymentCreateWithoutDealInput[] | paymentUncheckedCreateWithoutDealInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutDealInput | paymentCreateOrConnectWithoutDealInput[]
    createMany?: paymentCreateManyDealInputEnvelope
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
  }

  export type paymentscheduleCreateNestedManyWithoutDealInput = {
    create?: XOR<paymentscheduleCreateWithoutDealInput, paymentscheduleUncheckedCreateWithoutDealInput> | paymentscheduleCreateWithoutDealInput[] | paymentscheduleUncheckedCreateWithoutDealInput[]
    connectOrCreate?: paymentscheduleCreateOrConnectWithoutDealInput | paymentscheduleCreateOrConnectWithoutDealInput[]
    createMany?: paymentscheduleCreateManyDealInputEnvelope
    connect?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
  }

  export type expenseCreateNestedManyWithoutDealInput = {
    create?: XOR<expenseCreateWithoutDealInput, expenseUncheckedCreateWithoutDealInput> | expenseCreateWithoutDealInput[] | expenseUncheckedCreateWithoutDealInput[]
    connectOrCreate?: expenseCreateOrConnectWithoutDealInput | expenseCreateOrConnectWithoutDealInput[]
    createMany?: expenseCreateManyDealInputEnvelope
    connect?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
  }

  export type invoiceUncheckedCreateNestedManyWithoutDealInput = {
    create?: XOR<invoiceCreateWithoutDealInput, invoiceUncheckedCreateWithoutDealInput> | invoiceCreateWithoutDealInput[] | invoiceUncheckedCreateWithoutDealInput[]
    connectOrCreate?: invoiceCreateOrConnectWithoutDealInput | invoiceCreateOrConnectWithoutDealInput[]
    createMany?: invoiceCreateManyDealInputEnvelope
    connect?: invoiceWhereUniqueInput | invoiceWhereUniqueInput[]
  }

  export type paymentUncheckedCreateNestedManyWithoutDealInput = {
    create?: XOR<paymentCreateWithoutDealInput, paymentUncheckedCreateWithoutDealInput> | paymentCreateWithoutDealInput[] | paymentUncheckedCreateWithoutDealInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutDealInput | paymentCreateOrConnectWithoutDealInput[]
    createMany?: paymentCreateManyDealInputEnvelope
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
  }

  export type paymentscheduleUncheckedCreateNestedManyWithoutDealInput = {
    create?: XOR<paymentscheduleCreateWithoutDealInput, paymentscheduleUncheckedCreateWithoutDealInput> | paymentscheduleCreateWithoutDealInput[] | paymentscheduleUncheckedCreateWithoutDealInput[]
    connectOrCreate?: paymentscheduleCreateOrConnectWithoutDealInput | paymentscheduleCreateOrConnectWithoutDealInput[]
    createMany?: paymentscheduleCreateManyDealInputEnvelope
    connect?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
  }

  export type expenseUncheckedCreateNestedManyWithoutDealInput = {
    create?: XOR<expenseCreateWithoutDealInput, expenseUncheckedCreateWithoutDealInput> | expenseCreateWithoutDealInput[] | expenseUncheckedCreateWithoutDealInput[]
    connectOrCreate?: expenseCreateOrConnectWithoutDealInput | expenseCreateOrConnectWithoutDealInput[]
    createMany?: expenseCreateManyDealInputEnvelope
    connect?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type clientUpdateOneRequiredWithoutDealsNestedInput = {
    create?: XOR<clientCreateWithoutDealsInput, clientUncheckedCreateWithoutDealsInput>
    connectOrCreate?: clientCreateOrConnectWithoutDealsInput
    upsert?: clientUpsertWithoutDealsInput
    connect?: clientWhereUniqueInput
    update?: XOR<XOR<clientUpdateToOneWithWhereWithoutDealsInput, clientUpdateWithoutDealsInput>, clientUncheckedUpdateWithoutDealsInput>
  }

  export type propertyUpdateOneWithoutDealsNestedInput = {
    create?: XOR<propertyCreateWithoutDealsInput, propertyUncheckedCreateWithoutDealsInput>
    connectOrCreate?: propertyCreateOrConnectWithoutDealsInput
    upsert?: propertyUpsertWithoutDealsInput
    disconnect?: propertyWhereInput | boolean
    delete?: propertyWhereInput | boolean
    connect?: propertyWhereUniqueInput
    update?: XOR<XOR<propertyUpdateToOneWithWhereWithoutDealsInput, propertyUpdateWithoutDealsInput>, propertyUncheckedUpdateWithoutDealsInput>
  }

  export type invoiceUpdateManyWithoutDealNestedInput = {
    create?: XOR<invoiceCreateWithoutDealInput, invoiceUncheckedCreateWithoutDealInput> | invoiceCreateWithoutDealInput[] | invoiceUncheckedCreateWithoutDealInput[]
    connectOrCreate?: invoiceCreateOrConnectWithoutDealInput | invoiceCreateOrConnectWithoutDealInput[]
    upsert?: invoiceUpsertWithWhereUniqueWithoutDealInput | invoiceUpsertWithWhereUniqueWithoutDealInput[]
    createMany?: invoiceCreateManyDealInputEnvelope
    set?: invoiceWhereUniqueInput | invoiceWhereUniqueInput[]
    disconnect?: invoiceWhereUniqueInput | invoiceWhereUniqueInput[]
    delete?: invoiceWhereUniqueInput | invoiceWhereUniqueInput[]
    connect?: invoiceWhereUniqueInput | invoiceWhereUniqueInput[]
    update?: invoiceUpdateWithWhereUniqueWithoutDealInput | invoiceUpdateWithWhereUniqueWithoutDealInput[]
    updateMany?: invoiceUpdateManyWithWhereWithoutDealInput | invoiceUpdateManyWithWhereWithoutDealInput[]
    deleteMany?: invoiceScalarWhereInput | invoiceScalarWhereInput[]
  }

  export type paymentUpdateManyWithoutDealNestedInput = {
    create?: XOR<paymentCreateWithoutDealInput, paymentUncheckedCreateWithoutDealInput> | paymentCreateWithoutDealInput[] | paymentUncheckedCreateWithoutDealInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutDealInput | paymentCreateOrConnectWithoutDealInput[]
    upsert?: paymentUpsertWithWhereUniqueWithoutDealInput | paymentUpsertWithWhereUniqueWithoutDealInput[]
    createMany?: paymentCreateManyDealInputEnvelope
    set?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    disconnect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    delete?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    update?: paymentUpdateWithWhereUniqueWithoutDealInput | paymentUpdateWithWhereUniqueWithoutDealInput[]
    updateMany?: paymentUpdateManyWithWhereWithoutDealInput | paymentUpdateManyWithWhereWithoutDealInput[]
    deleteMany?: paymentScalarWhereInput | paymentScalarWhereInput[]
  }

  export type paymentscheduleUpdateManyWithoutDealNestedInput = {
    create?: XOR<paymentscheduleCreateWithoutDealInput, paymentscheduleUncheckedCreateWithoutDealInput> | paymentscheduleCreateWithoutDealInput[] | paymentscheduleUncheckedCreateWithoutDealInput[]
    connectOrCreate?: paymentscheduleCreateOrConnectWithoutDealInput | paymentscheduleCreateOrConnectWithoutDealInput[]
    upsert?: paymentscheduleUpsertWithWhereUniqueWithoutDealInput | paymentscheduleUpsertWithWhereUniqueWithoutDealInput[]
    createMany?: paymentscheduleCreateManyDealInputEnvelope
    set?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
    disconnect?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
    delete?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
    connect?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
    update?: paymentscheduleUpdateWithWhereUniqueWithoutDealInput | paymentscheduleUpdateWithWhereUniqueWithoutDealInput[]
    updateMany?: paymentscheduleUpdateManyWithWhereWithoutDealInput | paymentscheduleUpdateManyWithWhereWithoutDealInput[]
    deleteMany?: paymentscheduleScalarWhereInput | paymentscheduleScalarWhereInput[]
  }

  export type expenseUpdateManyWithoutDealNestedInput = {
    create?: XOR<expenseCreateWithoutDealInput, expenseUncheckedCreateWithoutDealInput> | expenseCreateWithoutDealInput[] | expenseUncheckedCreateWithoutDealInput[]
    connectOrCreate?: expenseCreateOrConnectWithoutDealInput | expenseCreateOrConnectWithoutDealInput[]
    upsert?: expenseUpsertWithWhereUniqueWithoutDealInput | expenseUpsertWithWhereUniqueWithoutDealInput[]
    createMany?: expenseCreateManyDealInputEnvelope
    set?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    disconnect?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    delete?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    connect?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    update?: expenseUpdateWithWhereUniqueWithoutDealInput | expenseUpdateWithWhereUniqueWithoutDealInput[]
    updateMany?: expenseUpdateManyWithWhereWithoutDealInput | expenseUpdateManyWithWhereWithoutDealInput[]
    deleteMany?: expenseScalarWhereInput | expenseScalarWhereInput[]
  }

  export type invoiceUncheckedUpdateManyWithoutDealNestedInput = {
    create?: XOR<invoiceCreateWithoutDealInput, invoiceUncheckedCreateWithoutDealInput> | invoiceCreateWithoutDealInput[] | invoiceUncheckedCreateWithoutDealInput[]
    connectOrCreate?: invoiceCreateOrConnectWithoutDealInput | invoiceCreateOrConnectWithoutDealInput[]
    upsert?: invoiceUpsertWithWhereUniqueWithoutDealInput | invoiceUpsertWithWhereUniqueWithoutDealInput[]
    createMany?: invoiceCreateManyDealInputEnvelope
    set?: invoiceWhereUniqueInput | invoiceWhereUniqueInput[]
    disconnect?: invoiceWhereUniqueInput | invoiceWhereUniqueInput[]
    delete?: invoiceWhereUniqueInput | invoiceWhereUniqueInput[]
    connect?: invoiceWhereUniqueInput | invoiceWhereUniqueInput[]
    update?: invoiceUpdateWithWhereUniqueWithoutDealInput | invoiceUpdateWithWhereUniqueWithoutDealInput[]
    updateMany?: invoiceUpdateManyWithWhereWithoutDealInput | invoiceUpdateManyWithWhereWithoutDealInput[]
    deleteMany?: invoiceScalarWhereInput | invoiceScalarWhereInput[]
  }

  export type paymentUncheckedUpdateManyWithoutDealNestedInput = {
    create?: XOR<paymentCreateWithoutDealInput, paymentUncheckedCreateWithoutDealInput> | paymentCreateWithoutDealInput[] | paymentUncheckedCreateWithoutDealInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutDealInput | paymentCreateOrConnectWithoutDealInput[]
    upsert?: paymentUpsertWithWhereUniqueWithoutDealInput | paymentUpsertWithWhereUniqueWithoutDealInput[]
    createMany?: paymentCreateManyDealInputEnvelope
    set?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    disconnect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    delete?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    update?: paymentUpdateWithWhereUniqueWithoutDealInput | paymentUpdateWithWhereUniqueWithoutDealInput[]
    updateMany?: paymentUpdateManyWithWhereWithoutDealInput | paymentUpdateManyWithWhereWithoutDealInput[]
    deleteMany?: paymentScalarWhereInput | paymentScalarWhereInput[]
  }

  export type paymentscheduleUncheckedUpdateManyWithoutDealNestedInput = {
    create?: XOR<paymentscheduleCreateWithoutDealInput, paymentscheduleUncheckedCreateWithoutDealInput> | paymentscheduleCreateWithoutDealInput[] | paymentscheduleUncheckedCreateWithoutDealInput[]
    connectOrCreate?: paymentscheduleCreateOrConnectWithoutDealInput | paymentscheduleCreateOrConnectWithoutDealInput[]
    upsert?: paymentscheduleUpsertWithWhereUniqueWithoutDealInput | paymentscheduleUpsertWithWhereUniqueWithoutDealInput[]
    createMany?: paymentscheduleCreateManyDealInputEnvelope
    set?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
    disconnect?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
    delete?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
    connect?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
    update?: paymentscheduleUpdateWithWhereUniqueWithoutDealInput | paymentscheduleUpdateWithWhereUniqueWithoutDealInput[]
    updateMany?: paymentscheduleUpdateManyWithWhereWithoutDealInput | paymentscheduleUpdateManyWithWhereWithoutDealInput[]
    deleteMany?: paymentscheduleScalarWhereInput | paymentscheduleScalarWhereInput[]
  }

  export type expenseUncheckedUpdateManyWithoutDealNestedInput = {
    create?: XOR<expenseCreateWithoutDealInput, expenseUncheckedCreateWithoutDealInput> | expenseCreateWithoutDealInput[] | expenseUncheckedCreateWithoutDealInput[]
    connectOrCreate?: expenseCreateOrConnectWithoutDealInput | expenseCreateOrConnectWithoutDealInput[]
    upsert?: expenseUpsertWithWhereUniqueWithoutDealInput | expenseUpsertWithWhereUniqueWithoutDealInput[]
    createMany?: expenseCreateManyDealInputEnvelope
    set?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    disconnect?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    delete?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    connect?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    update?: expenseUpdateWithWhereUniqueWithoutDealInput | expenseUpdateWithWhereUniqueWithoutDealInput[]
    updateMany?: expenseUpdateManyWithWhereWithoutDealInput | expenseUpdateManyWithWhereWithoutDealInput[]
    deleteMany?: expenseScalarWhereInput | expenseScalarWhereInput[]
  }

  export type dealCreateNestedOneWithoutExpensesInput = {
    create?: XOR<dealCreateWithoutExpensesInput, dealUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: dealCreateOrConnectWithoutExpensesInput
    connect?: dealWhereUniqueInput
  }

  export type propertyCreateNestedOneWithoutExpensesInput = {
    create?: XOR<propertyCreateWithoutExpensesInput, propertyUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: propertyCreateOrConnectWithoutExpensesInput
    connect?: propertyWhereUniqueInput
  }

  export type dealUpdateOneWithoutExpensesNestedInput = {
    create?: XOR<dealCreateWithoutExpensesInput, dealUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: dealCreateOrConnectWithoutExpensesInput
    upsert?: dealUpsertWithoutExpensesInput
    disconnect?: dealWhereInput | boolean
    delete?: dealWhereInput | boolean
    connect?: dealWhereUniqueInput
    update?: XOR<XOR<dealUpdateToOneWithWhereWithoutExpensesInput, dealUpdateWithoutExpensesInput>, dealUncheckedUpdateWithoutExpensesInput>
  }

  export type propertyUpdateOneWithoutExpensesNestedInput = {
    create?: XOR<propertyCreateWithoutExpensesInput, propertyUncheckedCreateWithoutExpensesInput>
    connectOrCreate?: propertyCreateOrConnectWithoutExpensesInput
    upsert?: propertyUpsertWithoutExpensesInput
    disconnect?: propertyWhereInput | boolean
    delete?: propertyWhereInput | boolean
    connect?: propertyWhereUniqueInput
    update?: XOR<XOR<propertyUpdateToOneWithWhereWithoutExpensesInput, propertyUpdateWithoutExpensesInput>, propertyUncheckedUpdateWithoutExpensesInput>
  }

  export type propertyCreateNestedOneWithoutInquiriesInput = {
    create?: XOR<propertyCreateWithoutInquiriesInput, propertyUncheckedCreateWithoutInquiriesInput>
    connectOrCreate?: propertyCreateOrConnectWithoutInquiriesInput
    connect?: propertyWhereUniqueInput
  }

  export type Enuminquiry_typeFieldUpdateOperationsInput = {
    set?: $Enums.inquiry_type
  }

  export type Enuminquiry_statusFieldUpdateOperationsInput = {
    set?: $Enums.inquiry_status
  }

  export type propertyUpdateOneRequiredWithoutInquiriesNestedInput = {
    create?: XOR<propertyCreateWithoutInquiriesInput, propertyUncheckedCreateWithoutInquiriesInput>
    connectOrCreate?: propertyCreateOrConnectWithoutInquiriesInput
    upsert?: propertyUpsertWithoutInquiriesInput
    connect?: propertyWhereUniqueInput
    update?: XOR<XOR<propertyUpdateToOneWithWhereWithoutInquiriesInput, propertyUpdateWithoutInquiriesInput>, propertyUncheckedUpdateWithoutInquiriesInput>
  }

  export type dealCreateNestedOneWithoutInvoicesInput = {
    create?: XOR<dealCreateWithoutInvoicesInput, dealUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: dealCreateOrConnectWithoutInvoicesInput
    connect?: dealWhereUniqueInput
  }

  export type paymentCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<paymentCreateWithoutInvoiceInput, paymentUncheckedCreateWithoutInvoiceInput> | paymentCreateWithoutInvoiceInput[] | paymentUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutInvoiceInput | paymentCreateOrConnectWithoutInvoiceInput[]
    createMany?: paymentCreateManyInvoiceInputEnvelope
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
  }

  export type paymentUncheckedCreateNestedManyWithoutInvoiceInput = {
    create?: XOR<paymentCreateWithoutInvoiceInput, paymentUncheckedCreateWithoutInvoiceInput> | paymentCreateWithoutInvoiceInput[] | paymentUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutInvoiceInput | paymentCreateOrConnectWithoutInvoiceInput[]
    createMany?: paymentCreateManyInvoiceInputEnvelope
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
  }

  export type dealUpdateOneRequiredWithoutInvoicesNestedInput = {
    create?: XOR<dealCreateWithoutInvoicesInput, dealUncheckedCreateWithoutInvoicesInput>
    connectOrCreate?: dealCreateOrConnectWithoutInvoicesInput
    upsert?: dealUpsertWithoutInvoicesInput
    connect?: dealWhereUniqueInput
    update?: XOR<XOR<dealUpdateToOneWithWhereWithoutInvoicesInput, dealUpdateWithoutInvoicesInput>, dealUncheckedUpdateWithoutInvoicesInput>
  }

  export type paymentUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<paymentCreateWithoutInvoiceInput, paymentUncheckedCreateWithoutInvoiceInput> | paymentCreateWithoutInvoiceInput[] | paymentUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutInvoiceInput | paymentCreateOrConnectWithoutInvoiceInput[]
    upsert?: paymentUpsertWithWhereUniqueWithoutInvoiceInput | paymentUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: paymentCreateManyInvoiceInputEnvelope
    set?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    disconnect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    delete?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    update?: paymentUpdateWithWhereUniqueWithoutInvoiceInput | paymentUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: paymentUpdateManyWithWhereWithoutInvoiceInput | paymentUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: paymentScalarWhereInput | paymentScalarWhereInput[]
  }

  export type paymentUncheckedUpdateManyWithoutInvoiceNestedInput = {
    create?: XOR<paymentCreateWithoutInvoiceInput, paymentUncheckedCreateWithoutInvoiceInput> | paymentCreateWithoutInvoiceInput[] | paymentUncheckedCreateWithoutInvoiceInput[]
    connectOrCreate?: paymentCreateOrConnectWithoutInvoiceInput | paymentCreateOrConnectWithoutInvoiceInput[]
    upsert?: paymentUpsertWithWhereUniqueWithoutInvoiceInput | paymentUpsertWithWhereUniqueWithoutInvoiceInput[]
    createMany?: paymentCreateManyInvoiceInputEnvelope
    set?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    disconnect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    delete?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    connect?: paymentWhereUniqueInput | paymentWhereUniqueInput[]
    update?: paymentUpdateWithWhereUniqueWithoutInvoiceInput | paymentUpdateWithWhereUniqueWithoutInvoiceInput[]
    updateMany?: paymentUpdateManyWithWhereWithoutInvoiceInput | paymentUpdateManyWithWhereWithoutInvoiceInput[]
    deleteMany?: paymentScalarWhereInput | paymentScalarWhereInput[]
  }

  export type dealCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<dealCreateWithoutPaymentsInput, dealUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: dealCreateOrConnectWithoutPaymentsInput
    connect?: dealWhereUniqueInput
  }

  export type invoiceCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<invoiceCreateWithoutPaymentsInput, invoiceUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: invoiceCreateOrConnectWithoutPaymentsInput
    connect?: invoiceWhereUniqueInput
  }

  export type paymentscheduleCreateNestedManyWithoutPaymentInput = {
    create?: XOR<paymentscheduleCreateWithoutPaymentInput, paymentscheduleUncheckedCreateWithoutPaymentInput> | paymentscheduleCreateWithoutPaymentInput[] | paymentscheduleUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: paymentscheduleCreateOrConnectWithoutPaymentInput | paymentscheduleCreateOrConnectWithoutPaymentInput[]
    createMany?: paymentscheduleCreateManyPaymentInputEnvelope
    connect?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
  }

  export type paymentscheduleUncheckedCreateNestedManyWithoutPaymentInput = {
    create?: XOR<paymentscheduleCreateWithoutPaymentInput, paymentscheduleUncheckedCreateWithoutPaymentInput> | paymentscheduleCreateWithoutPaymentInput[] | paymentscheduleUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: paymentscheduleCreateOrConnectWithoutPaymentInput | paymentscheduleCreateOrConnectWithoutPaymentInput[]
    createMany?: paymentscheduleCreateManyPaymentInputEnvelope
    connect?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
  }

  export type dealUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<dealCreateWithoutPaymentsInput, dealUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: dealCreateOrConnectWithoutPaymentsInput
    upsert?: dealUpsertWithoutPaymentsInput
    connect?: dealWhereUniqueInput
    update?: XOR<XOR<dealUpdateToOneWithWhereWithoutPaymentsInput, dealUpdateWithoutPaymentsInput>, dealUncheckedUpdateWithoutPaymentsInput>
  }

  export type invoiceUpdateOneWithoutPaymentsNestedInput = {
    create?: XOR<invoiceCreateWithoutPaymentsInput, invoiceUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: invoiceCreateOrConnectWithoutPaymentsInput
    upsert?: invoiceUpsertWithoutPaymentsInput
    disconnect?: invoiceWhereInput | boolean
    delete?: invoiceWhereInput | boolean
    connect?: invoiceWhereUniqueInput
    update?: XOR<XOR<invoiceUpdateToOneWithWhereWithoutPaymentsInput, invoiceUpdateWithoutPaymentsInput>, invoiceUncheckedUpdateWithoutPaymentsInput>
  }

  export type paymentscheduleUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<paymentscheduleCreateWithoutPaymentInput, paymentscheduleUncheckedCreateWithoutPaymentInput> | paymentscheduleCreateWithoutPaymentInput[] | paymentscheduleUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: paymentscheduleCreateOrConnectWithoutPaymentInput | paymentscheduleCreateOrConnectWithoutPaymentInput[]
    upsert?: paymentscheduleUpsertWithWhereUniqueWithoutPaymentInput | paymentscheduleUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: paymentscheduleCreateManyPaymentInputEnvelope
    set?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
    disconnect?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
    delete?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
    connect?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
    update?: paymentscheduleUpdateWithWhereUniqueWithoutPaymentInput | paymentscheduleUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: paymentscheduleUpdateManyWithWhereWithoutPaymentInput | paymentscheduleUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: paymentscheduleScalarWhereInput | paymentscheduleScalarWhereInput[]
  }

  export type paymentscheduleUncheckedUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<paymentscheduleCreateWithoutPaymentInput, paymentscheduleUncheckedCreateWithoutPaymentInput> | paymentscheduleCreateWithoutPaymentInput[] | paymentscheduleUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: paymentscheduleCreateOrConnectWithoutPaymentInput | paymentscheduleCreateOrConnectWithoutPaymentInput[]
    upsert?: paymentscheduleUpsertWithWhereUniqueWithoutPaymentInput | paymentscheduleUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: paymentscheduleCreateManyPaymentInputEnvelope
    set?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
    disconnect?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
    delete?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
    connect?: paymentscheduleWhereUniqueInput | paymentscheduleWhereUniqueInput[]
    update?: paymentscheduleUpdateWithWhereUniqueWithoutPaymentInput | paymentscheduleUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: paymentscheduleUpdateManyWithWhereWithoutPaymentInput | paymentscheduleUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: paymentscheduleScalarWhereInput | paymentscheduleScalarWhereInput[]
  }

  export type dealCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<dealCreateWithoutSchedulesInput, dealUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: dealCreateOrConnectWithoutSchedulesInput
    connect?: dealWhereUniqueInput
  }

  export type paymentCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<paymentCreateWithoutSchedulesInput, paymentUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: paymentCreateOrConnectWithoutSchedulesInput
    connect?: paymentWhereUniqueInput
  }

  export type dealUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<dealCreateWithoutSchedulesInput, dealUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: dealCreateOrConnectWithoutSchedulesInput
    upsert?: dealUpsertWithoutSchedulesInput
    connect?: dealWhereUniqueInput
    update?: XOR<XOR<dealUpdateToOneWithWhereWithoutSchedulesInput, dealUpdateWithoutSchedulesInput>, dealUncheckedUpdateWithoutSchedulesInput>
  }

  export type paymentUpdateOneWithoutSchedulesNestedInput = {
    create?: XOR<paymentCreateWithoutSchedulesInput, paymentUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: paymentCreateOrConnectWithoutSchedulesInput
    upsert?: paymentUpsertWithoutSchedulesInput
    disconnect?: paymentWhereInput | boolean
    delete?: paymentWhereInput | boolean
    connect?: paymentWhereUniqueInput
    update?: XOR<XOR<paymentUpdateToOneWithWhereWithoutSchedulesInput, paymentUpdateWithoutSchedulesInput>, paymentUncheckedUpdateWithoutSchedulesInput>
  }

  export type projectmediaCreateNestedManyWithoutProjectInput = {
    create?: XOR<projectmediaCreateWithoutProjectInput, projectmediaUncheckedCreateWithoutProjectInput> | projectmediaCreateWithoutProjectInput[] | projectmediaUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: projectmediaCreateOrConnectWithoutProjectInput | projectmediaCreateOrConnectWithoutProjectInput[]
    createMany?: projectmediaCreateManyProjectInputEnvelope
    connect?: projectmediaWhereUniqueInput | projectmediaWhereUniqueInput[]
  }

  export type projectmediaUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<projectmediaCreateWithoutProjectInput, projectmediaUncheckedCreateWithoutProjectInput> | projectmediaCreateWithoutProjectInput[] | projectmediaUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: projectmediaCreateOrConnectWithoutProjectInput | projectmediaCreateOrConnectWithoutProjectInput[]
    createMany?: projectmediaCreateManyProjectInputEnvelope
    connect?: projectmediaWhereUniqueInput | projectmediaWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type projectmediaUpdateManyWithoutProjectNestedInput = {
    create?: XOR<projectmediaCreateWithoutProjectInput, projectmediaUncheckedCreateWithoutProjectInput> | projectmediaCreateWithoutProjectInput[] | projectmediaUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: projectmediaCreateOrConnectWithoutProjectInput | projectmediaCreateOrConnectWithoutProjectInput[]
    upsert?: projectmediaUpsertWithWhereUniqueWithoutProjectInput | projectmediaUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: projectmediaCreateManyProjectInputEnvelope
    set?: projectmediaWhereUniqueInput | projectmediaWhereUniqueInput[]
    disconnect?: projectmediaWhereUniqueInput | projectmediaWhereUniqueInput[]
    delete?: projectmediaWhereUniqueInput | projectmediaWhereUniqueInput[]
    connect?: projectmediaWhereUniqueInput | projectmediaWhereUniqueInput[]
    update?: projectmediaUpdateWithWhereUniqueWithoutProjectInput | projectmediaUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: projectmediaUpdateManyWithWhereWithoutProjectInput | projectmediaUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: projectmediaScalarWhereInput | projectmediaScalarWhereInput[]
  }

  export type projectmediaUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<projectmediaCreateWithoutProjectInput, projectmediaUncheckedCreateWithoutProjectInput> | projectmediaCreateWithoutProjectInput[] | projectmediaUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: projectmediaCreateOrConnectWithoutProjectInput | projectmediaCreateOrConnectWithoutProjectInput[]
    upsert?: projectmediaUpsertWithWhereUniqueWithoutProjectInput | projectmediaUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: projectmediaCreateManyProjectInputEnvelope
    set?: projectmediaWhereUniqueInput | projectmediaWhereUniqueInput[]
    disconnect?: projectmediaWhereUniqueInput | projectmediaWhereUniqueInput[]
    delete?: projectmediaWhereUniqueInput | projectmediaWhereUniqueInput[]
    connect?: projectmediaWhereUniqueInput | projectmediaWhereUniqueInput[]
    update?: projectmediaUpdateWithWhereUniqueWithoutProjectInput | projectmediaUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: projectmediaUpdateManyWithWhereWithoutProjectInput | projectmediaUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: projectmediaScalarWhereInput | projectmediaScalarWhereInput[]
  }

  export type projectCreateNestedOneWithoutMediasInput = {
    create?: XOR<projectCreateWithoutMediasInput, projectUncheckedCreateWithoutMediasInput>
    connectOrCreate?: projectCreateOrConnectWithoutMediasInput
    connect?: projectWhereUniqueInput
  }

  export type projectUpdateOneRequiredWithoutMediasNestedInput = {
    create?: XOR<projectCreateWithoutMediasInput, projectUncheckedCreateWithoutMediasInput>
    connectOrCreate?: projectCreateOrConnectWithoutMediasInput
    upsert?: projectUpsertWithoutMediasInput
    connect?: projectWhereUniqueInput
    update?: XOR<XOR<projectUpdateToOneWithWhereWithoutMediasInput, projectUpdateWithoutMediasInput>, projectUncheckedUpdateWithoutMediasInput>
  }

  export type propertyimageCreateNestedManyWithoutPropertyInput = {
    create?: XOR<propertyimageCreateWithoutPropertyInput, propertyimageUncheckedCreateWithoutPropertyInput> | propertyimageCreateWithoutPropertyInput[] | propertyimageUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: propertyimageCreateOrConnectWithoutPropertyInput | propertyimageCreateOrConnectWithoutPropertyInput[]
    createMany?: propertyimageCreateManyPropertyInputEnvelope
    connect?: propertyimageWhereUniqueInput | propertyimageWhereUniqueInput[]
  }

  export type dealCreateNestedManyWithoutPropertyInput = {
    create?: XOR<dealCreateWithoutPropertyInput, dealUncheckedCreateWithoutPropertyInput> | dealCreateWithoutPropertyInput[] | dealUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: dealCreateOrConnectWithoutPropertyInput | dealCreateOrConnectWithoutPropertyInput[]
    createMany?: dealCreateManyPropertyInputEnvelope
    connect?: dealWhereUniqueInput | dealWhereUniqueInput[]
  }

  export type expenseCreateNestedManyWithoutPropertyInput = {
    create?: XOR<expenseCreateWithoutPropertyInput, expenseUncheckedCreateWithoutPropertyInput> | expenseCreateWithoutPropertyInput[] | expenseUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: expenseCreateOrConnectWithoutPropertyInput | expenseCreateOrConnectWithoutPropertyInput[]
    createMany?: expenseCreateManyPropertyInputEnvelope
    connect?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
  }

  export type inquiryCreateNestedManyWithoutPropertyInput = {
    create?: XOR<inquiryCreateWithoutPropertyInput, inquiryUncheckedCreateWithoutPropertyInput> | inquiryCreateWithoutPropertyInput[] | inquiryUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: inquiryCreateOrConnectWithoutPropertyInput | inquiryCreateOrConnectWithoutPropertyInput[]
    createMany?: inquiryCreateManyPropertyInputEnvelope
    connect?: inquiryWhereUniqueInput | inquiryWhereUniqueInput[]
  }

  export type contactleadCreateNestedManyWithoutPropertyInput = {
    create?: XOR<contactleadCreateWithoutPropertyInput, contactleadUncheckedCreateWithoutPropertyInput> | contactleadCreateWithoutPropertyInput[] | contactleadUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: contactleadCreateOrConnectWithoutPropertyInput | contactleadCreateOrConnectWithoutPropertyInput[]
    createMany?: contactleadCreateManyPropertyInputEnvelope
    connect?: contactleadWhereUniqueInput | contactleadWhereUniqueInput[]
  }

  export type coownershipCreateNestedManyWithoutPropertyInput = {
    create?: XOR<coownershipCreateWithoutPropertyInput, coownershipUncheckedCreateWithoutPropertyInput> | coownershipCreateWithoutPropertyInput[] | coownershipUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: coownershipCreateOrConnectWithoutPropertyInput | coownershipCreateOrConnectWithoutPropertyInput[]
    createMany?: coownershipCreateManyPropertyInputEnvelope
    connect?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
  }

  export type propertyimageUncheckedCreateNestedManyWithoutPropertyInput = {
    create?: XOR<propertyimageCreateWithoutPropertyInput, propertyimageUncheckedCreateWithoutPropertyInput> | propertyimageCreateWithoutPropertyInput[] | propertyimageUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: propertyimageCreateOrConnectWithoutPropertyInput | propertyimageCreateOrConnectWithoutPropertyInput[]
    createMany?: propertyimageCreateManyPropertyInputEnvelope
    connect?: propertyimageWhereUniqueInput | propertyimageWhereUniqueInput[]
  }

  export type dealUncheckedCreateNestedManyWithoutPropertyInput = {
    create?: XOR<dealCreateWithoutPropertyInput, dealUncheckedCreateWithoutPropertyInput> | dealCreateWithoutPropertyInput[] | dealUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: dealCreateOrConnectWithoutPropertyInput | dealCreateOrConnectWithoutPropertyInput[]
    createMany?: dealCreateManyPropertyInputEnvelope
    connect?: dealWhereUniqueInput | dealWhereUniqueInput[]
  }

  export type expenseUncheckedCreateNestedManyWithoutPropertyInput = {
    create?: XOR<expenseCreateWithoutPropertyInput, expenseUncheckedCreateWithoutPropertyInput> | expenseCreateWithoutPropertyInput[] | expenseUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: expenseCreateOrConnectWithoutPropertyInput | expenseCreateOrConnectWithoutPropertyInput[]
    createMany?: expenseCreateManyPropertyInputEnvelope
    connect?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
  }

  export type inquiryUncheckedCreateNestedManyWithoutPropertyInput = {
    create?: XOR<inquiryCreateWithoutPropertyInput, inquiryUncheckedCreateWithoutPropertyInput> | inquiryCreateWithoutPropertyInput[] | inquiryUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: inquiryCreateOrConnectWithoutPropertyInput | inquiryCreateOrConnectWithoutPropertyInput[]
    createMany?: inquiryCreateManyPropertyInputEnvelope
    connect?: inquiryWhereUniqueInput | inquiryWhereUniqueInput[]
  }

  export type contactleadUncheckedCreateNestedManyWithoutPropertyInput = {
    create?: XOR<contactleadCreateWithoutPropertyInput, contactleadUncheckedCreateWithoutPropertyInput> | contactleadCreateWithoutPropertyInput[] | contactleadUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: contactleadCreateOrConnectWithoutPropertyInput | contactleadCreateOrConnectWithoutPropertyInput[]
    createMany?: contactleadCreateManyPropertyInputEnvelope
    connect?: contactleadWhereUniqueInput | contactleadWhereUniqueInput[]
  }

  export type coownershipUncheckedCreateNestedManyWithoutPropertyInput = {
    create?: XOR<coownershipCreateWithoutPropertyInput, coownershipUncheckedCreateWithoutPropertyInput> | coownershipCreateWithoutPropertyInput[] | coownershipUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: coownershipCreateOrConnectWithoutPropertyInput | coownershipCreateOrConnectWithoutPropertyInput[]
    createMany?: coownershipCreateManyPropertyInputEnvelope
    connect?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
  }

  export type propertyimageUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<propertyimageCreateWithoutPropertyInput, propertyimageUncheckedCreateWithoutPropertyInput> | propertyimageCreateWithoutPropertyInput[] | propertyimageUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: propertyimageCreateOrConnectWithoutPropertyInput | propertyimageCreateOrConnectWithoutPropertyInput[]
    upsert?: propertyimageUpsertWithWhereUniqueWithoutPropertyInput | propertyimageUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: propertyimageCreateManyPropertyInputEnvelope
    set?: propertyimageWhereUniqueInput | propertyimageWhereUniqueInput[]
    disconnect?: propertyimageWhereUniqueInput | propertyimageWhereUniqueInput[]
    delete?: propertyimageWhereUniqueInput | propertyimageWhereUniqueInput[]
    connect?: propertyimageWhereUniqueInput | propertyimageWhereUniqueInput[]
    update?: propertyimageUpdateWithWhereUniqueWithoutPropertyInput | propertyimageUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: propertyimageUpdateManyWithWhereWithoutPropertyInput | propertyimageUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: propertyimageScalarWhereInput | propertyimageScalarWhereInput[]
  }

  export type dealUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<dealCreateWithoutPropertyInput, dealUncheckedCreateWithoutPropertyInput> | dealCreateWithoutPropertyInput[] | dealUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: dealCreateOrConnectWithoutPropertyInput | dealCreateOrConnectWithoutPropertyInput[]
    upsert?: dealUpsertWithWhereUniqueWithoutPropertyInput | dealUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: dealCreateManyPropertyInputEnvelope
    set?: dealWhereUniqueInput | dealWhereUniqueInput[]
    disconnect?: dealWhereUniqueInput | dealWhereUniqueInput[]
    delete?: dealWhereUniqueInput | dealWhereUniqueInput[]
    connect?: dealWhereUniqueInput | dealWhereUniqueInput[]
    update?: dealUpdateWithWhereUniqueWithoutPropertyInput | dealUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: dealUpdateManyWithWhereWithoutPropertyInput | dealUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: dealScalarWhereInput | dealScalarWhereInput[]
  }

  export type expenseUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<expenseCreateWithoutPropertyInput, expenseUncheckedCreateWithoutPropertyInput> | expenseCreateWithoutPropertyInput[] | expenseUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: expenseCreateOrConnectWithoutPropertyInput | expenseCreateOrConnectWithoutPropertyInput[]
    upsert?: expenseUpsertWithWhereUniqueWithoutPropertyInput | expenseUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: expenseCreateManyPropertyInputEnvelope
    set?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    disconnect?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    delete?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    connect?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    update?: expenseUpdateWithWhereUniqueWithoutPropertyInput | expenseUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: expenseUpdateManyWithWhereWithoutPropertyInput | expenseUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: expenseScalarWhereInput | expenseScalarWhereInput[]
  }

  export type inquiryUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<inquiryCreateWithoutPropertyInput, inquiryUncheckedCreateWithoutPropertyInput> | inquiryCreateWithoutPropertyInput[] | inquiryUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: inquiryCreateOrConnectWithoutPropertyInput | inquiryCreateOrConnectWithoutPropertyInput[]
    upsert?: inquiryUpsertWithWhereUniqueWithoutPropertyInput | inquiryUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: inquiryCreateManyPropertyInputEnvelope
    set?: inquiryWhereUniqueInput | inquiryWhereUniqueInput[]
    disconnect?: inquiryWhereUniqueInput | inquiryWhereUniqueInput[]
    delete?: inquiryWhereUniqueInput | inquiryWhereUniqueInput[]
    connect?: inquiryWhereUniqueInput | inquiryWhereUniqueInput[]
    update?: inquiryUpdateWithWhereUniqueWithoutPropertyInput | inquiryUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: inquiryUpdateManyWithWhereWithoutPropertyInput | inquiryUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: inquiryScalarWhereInput | inquiryScalarWhereInput[]
  }

  export type contactleadUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<contactleadCreateWithoutPropertyInput, contactleadUncheckedCreateWithoutPropertyInput> | contactleadCreateWithoutPropertyInput[] | contactleadUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: contactleadCreateOrConnectWithoutPropertyInput | contactleadCreateOrConnectWithoutPropertyInput[]
    upsert?: contactleadUpsertWithWhereUniqueWithoutPropertyInput | contactleadUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: contactleadCreateManyPropertyInputEnvelope
    set?: contactleadWhereUniqueInput | contactleadWhereUniqueInput[]
    disconnect?: contactleadWhereUniqueInput | contactleadWhereUniqueInput[]
    delete?: contactleadWhereUniqueInput | contactleadWhereUniqueInput[]
    connect?: contactleadWhereUniqueInput | contactleadWhereUniqueInput[]
    update?: contactleadUpdateWithWhereUniqueWithoutPropertyInput | contactleadUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: contactleadUpdateManyWithWhereWithoutPropertyInput | contactleadUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: contactleadScalarWhereInput | contactleadScalarWhereInput[]
  }

  export type coownershipUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<coownershipCreateWithoutPropertyInput, coownershipUncheckedCreateWithoutPropertyInput> | coownershipCreateWithoutPropertyInput[] | coownershipUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: coownershipCreateOrConnectWithoutPropertyInput | coownershipCreateOrConnectWithoutPropertyInput[]
    upsert?: coownershipUpsertWithWhereUniqueWithoutPropertyInput | coownershipUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: coownershipCreateManyPropertyInputEnvelope
    set?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
    disconnect?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
    delete?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
    connect?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
    update?: coownershipUpdateWithWhereUniqueWithoutPropertyInput | coownershipUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: coownershipUpdateManyWithWhereWithoutPropertyInput | coownershipUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: coownershipScalarWhereInput | coownershipScalarWhereInput[]
  }

  export type propertyimageUncheckedUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<propertyimageCreateWithoutPropertyInput, propertyimageUncheckedCreateWithoutPropertyInput> | propertyimageCreateWithoutPropertyInput[] | propertyimageUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: propertyimageCreateOrConnectWithoutPropertyInput | propertyimageCreateOrConnectWithoutPropertyInput[]
    upsert?: propertyimageUpsertWithWhereUniqueWithoutPropertyInput | propertyimageUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: propertyimageCreateManyPropertyInputEnvelope
    set?: propertyimageWhereUniqueInput | propertyimageWhereUniqueInput[]
    disconnect?: propertyimageWhereUniqueInput | propertyimageWhereUniqueInput[]
    delete?: propertyimageWhereUniqueInput | propertyimageWhereUniqueInput[]
    connect?: propertyimageWhereUniqueInput | propertyimageWhereUniqueInput[]
    update?: propertyimageUpdateWithWhereUniqueWithoutPropertyInput | propertyimageUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: propertyimageUpdateManyWithWhereWithoutPropertyInput | propertyimageUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: propertyimageScalarWhereInput | propertyimageScalarWhereInput[]
  }

  export type dealUncheckedUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<dealCreateWithoutPropertyInput, dealUncheckedCreateWithoutPropertyInput> | dealCreateWithoutPropertyInput[] | dealUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: dealCreateOrConnectWithoutPropertyInput | dealCreateOrConnectWithoutPropertyInput[]
    upsert?: dealUpsertWithWhereUniqueWithoutPropertyInput | dealUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: dealCreateManyPropertyInputEnvelope
    set?: dealWhereUniqueInput | dealWhereUniqueInput[]
    disconnect?: dealWhereUniqueInput | dealWhereUniqueInput[]
    delete?: dealWhereUniqueInput | dealWhereUniqueInput[]
    connect?: dealWhereUniqueInput | dealWhereUniqueInput[]
    update?: dealUpdateWithWhereUniqueWithoutPropertyInput | dealUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: dealUpdateManyWithWhereWithoutPropertyInput | dealUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: dealScalarWhereInput | dealScalarWhereInput[]
  }

  export type expenseUncheckedUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<expenseCreateWithoutPropertyInput, expenseUncheckedCreateWithoutPropertyInput> | expenseCreateWithoutPropertyInput[] | expenseUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: expenseCreateOrConnectWithoutPropertyInput | expenseCreateOrConnectWithoutPropertyInput[]
    upsert?: expenseUpsertWithWhereUniqueWithoutPropertyInput | expenseUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: expenseCreateManyPropertyInputEnvelope
    set?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    disconnect?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    delete?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    connect?: expenseWhereUniqueInput | expenseWhereUniqueInput[]
    update?: expenseUpdateWithWhereUniqueWithoutPropertyInput | expenseUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: expenseUpdateManyWithWhereWithoutPropertyInput | expenseUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: expenseScalarWhereInput | expenseScalarWhereInput[]
  }

  export type inquiryUncheckedUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<inquiryCreateWithoutPropertyInput, inquiryUncheckedCreateWithoutPropertyInput> | inquiryCreateWithoutPropertyInput[] | inquiryUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: inquiryCreateOrConnectWithoutPropertyInput | inquiryCreateOrConnectWithoutPropertyInput[]
    upsert?: inquiryUpsertWithWhereUniqueWithoutPropertyInput | inquiryUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: inquiryCreateManyPropertyInputEnvelope
    set?: inquiryWhereUniqueInput | inquiryWhereUniqueInput[]
    disconnect?: inquiryWhereUniqueInput | inquiryWhereUniqueInput[]
    delete?: inquiryWhereUniqueInput | inquiryWhereUniqueInput[]
    connect?: inquiryWhereUniqueInput | inquiryWhereUniqueInput[]
    update?: inquiryUpdateWithWhereUniqueWithoutPropertyInput | inquiryUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: inquiryUpdateManyWithWhereWithoutPropertyInput | inquiryUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: inquiryScalarWhereInput | inquiryScalarWhereInput[]
  }

  export type contactleadUncheckedUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<contactleadCreateWithoutPropertyInput, contactleadUncheckedCreateWithoutPropertyInput> | contactleadCreateWithoutPropertyInput[] | contactleadUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: contactleadCreateOrConnectWithoutPropertyInput | contactleadCreateOrConnectWithoutPropertyInput[]
    upsert?: contactleadUpsertWithWhereUniqueWithoutPropertyInput | contactleadUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: contactleadCreateManyPropertyInputEnvelope
    set?: contactleadWhereUniqueInput | contactleadWhereUniqueInput[]
    disconnect?: contactleadWhereUniqueInput | contactleadWhereUniqueInput[]
    delete?: contactleadWhereUniqueInput | contactleadWhereUniqueInput[]
    connect?: contactleadWhereUniqueInput | contactleadWhereUniqueInput[]
    update?: contactleadUpdateWithWhereUniqueWithoutPropertyInput | contactleadUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: contactleadUpdateManyWithWhereWithoutPropertyInput | contactleadUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: contactleadScalarWhereInput | contactleadScalarWhereInput[]
  }

  export type coownershipUncheckedUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<coownershipCreateWithoutPropertyInput, coownershipUncheckedCreateWithoutPropertyInput> | coownershipCreateWithoutPropertyInput[] | coownershipUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: coownershipCreateOrConnectWithoutPropertyInput | coownershipCreateOrConnectWithoutPropertyInput[]
    upsert?: coownershipUpsertWithWhereUniqueWithoutPropertyInput | coownershipUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: coownershipCreateManyPropertyInputEnvelope
    set?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
    disconnect?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
    delete?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
    connect?: coownershipWhereUniqueInput | coownershipWhereUniqueInput[]
    update?: coownershipUpdateWithWhereUniqueWithoutPropertyInput | coownershipUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: coownershipUpdateManyWithWhereWithoutPropertyInput | coownershipUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: coownershipScalarWhereInput | coownershipScalarWhereInput[]
  }

  export type propertyCreateNestedOneWithoutImagesInput = {
    create?: XOR<propertyCreateWithoutImagesInput, propertyUncheckedCreateWithoutImagesInput>
    connectOrCreate?: propertyCreateOrConnectWithoutImagesInput
    connect?: propertyWhereUniqueInput
  }

  export type propertyUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<propertyCreateWithoutImagesInput, propertyUncheckedCreateWithoutImagesInput>
    connectOrCreate?: propertyCreateOrConnectWithoutImagesInput
    upsert?: propertyUpsertWithoutImagesInput
    connect?: propertyWhereUniqueInput
    update?: XOR<XOR<propertyUpdateToOneWithWhereWithoutImagesInput, propertyUpdateWithoutImagesInput>, propertyUncheckedUpdateWithoutImagesInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnuminquiry_typeFilter<$PrismaModel = never> = {
    equals?: $Enums.inquiry_type | Enuminquiry_typeFieldRefInput<$PrismaModel>
    in?: $Enums.inquiry_type[]
    notIn?: $Enums.inquiry_type[]
    not?: NestedEnuminquiry_typeFilter<$PrismaModel> | $Enums.inquiry_type
  }

  export type NestedEnuminquiry_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.inquiry_status | Enuminquiry_statusFieldRefInput<$PrismaModel>
    in?: $Enums.inquiry_status[]
    notIn?: $Enums.inquiry_status[]
    not?: NestedEnuminquiry_statusFilter<$PrismaModel> | $Enums.inquiry_status
  }

  export type NestedEnuminquiry_typeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.inquiry_type | Enuminquiry_typeFieldRefInput<$PrismaModel>
    in?: $Enums.inquiry_type[]
    notIn?: $Enums.inquiry_type[]
    not?: NestedEnuminquiry_typeWithAggregatesFilter<$PrismaModel> | $Enums.inquiry_type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnuminquiry_typeFilter<$PrismaModel>
    _max?: NestedEnuminquiry_typeFilter<$PrismaModel>
  }

  export type NestedEnuminquiry_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.inquiry_status | Enuminquiry_statusFieldRefInput<$PrismaModel>
    in?: $Enums.inquiry_status[]
    notIn?: $Enums.inquiry_status[]
    not?: NestedEnuminquiry_statusWithAggregatesFilter<$PrismaModel> | $Enums.inquiry_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnuminquiry_statusFilter<$PrismaModel>
    _max?: NestedEnuminquiry_statusFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type dealCreateWithoutClientInput = {
    type?: string
    status?: string
    basePrice?: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxRate?: Decimal | DecimalJsLike | number | string
    commissionRate?: Decimal | DecimalJsLike | number | string
    expectedClose?: Date | string | null
    closedAt?: Date | string | null
    createdAt?: Date | string
    property?: propertyCreateNestedOneWithoutDealsInput
    invoices?: invoiceCreateNestedManyWithoutDealInput
    payments?: paymentCreateNestedManyWithoutDealInput
    schedules?: paymentscheduleCreateNestedManyWithoutDealInput
    expenses?: expenseCreateNestedManyWithoutDealInput
  }

  export type dealUncheckedCreateWithoutClientInput = {
    id?: number
    type?: string
    status?: string
    basePrice?: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxRate?: Decimal | DecimalJsLike | number | string
    commissionRate?: Decimal | DecimalJsLike | number | string
    expectedClose?: Date | string | null
    closedAt?: Date | string | null
    createdAt?: Date | string
    propertyId?: number | null
    invoices?: invoiceUncheckedCreateNestedManyWithoutDealInput
    payments?: paymentUncheckedCreateNestedManyWithoutDealInput
    schedules?: paymentscheduleUncheckedCreateNestedManyWithoutDealInput
    expenses?: expenseUncheckedCreateNestedManyWithoutDealInput
  }

  export type dealCreateOrConnectWithoutClientInput = {
    where: dealWhereUniqueInput
    create: XOR<dealCreateWithoutClientInput, dealUncheckedCreateWithoutClientInput>
  }

  export type dealCreateManyClientInputEnvelope = {
    data: dealCreateManyClientInput | dealCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type coownershipCreateWithoutClientInput = {
    share?: Decimal | DecimalJsLike | number | string
    role?: string
    createdAt?: Date | string
    property: propertyCreateNestedOneWithoutCoOwnershipsInput
  }

  export type coownershipUncheckedCreateWithoutClientInput = {
    id?: number
    propertyId: number
    share?: Decimal | DecimalJsLike | number | string
    role?: string
    createdAt?: Date | string
  }

  export type coownershipCreateOrConnectWithoutClientInput = {
    where: coownershipWhereUniqueInput
    create: XOR<coownershipCreateWithoutClientInput, coownershipUncheckedCreateWithoutClientInput>
  }

  export type coownershipCreateManyClientInputEnvelope = {
    data: coownershipCreateManyClientInput | coownershipCreateManyClientInput[]
    skipDuplicates?: boolean
  }

  export type dealUpsertWithWhereUniqueWithoutClientInput = {
    where: dealWhereUniqueInput
    update: XOR<dealUpdateWithoutClientInput, dealUncheckedUpdateWithoutClientInput>
    create: XOR<dealCreateWithoutClientInput, dealUncheckedCreateWithoutClientInput>
  }

  export type dealUpdateWithWhereUniqueWithoutClientInput = {
    where: dealWhereUniqueInput
    data: XOR<dealUpdateWithoutClientInput, dealUncheckedUpdateWithoutClientInput>
  }

  export type dealUpdateManyWithWhereWithoutClientInput = {
    where: dealScalarWhereInput
    data: XOR<dealUpdateManyMutationInput, dealUncheckedUpdateManyWithoutClientInput>
  }

  export type dealScalarWhereInput = {
    AND?: dealScalarWhereInput | dealScalarWhereInput[]
    OR?: dealScalarWhereInput[]
    NOT?: dealScalarWhereInput | dealScalarWhereInput[]
    id?: IntFilter<"deal"> | number
    type?: StringFilter<"deal"> | string
    status?: StringFilter<"deal"> | string
    basePrice?: DecimalFilter<"deal"> | Decimal | DecimalJsLike | number | string
    discount?: DecimalFilter<"deal"> | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFilter<"deal"> | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFilter<"deal"> | Decimal | DecimalJsLike | number | string
    expectedClose?: DateTimeNullableFilter<"deal"> | Date | string | null
    closedAt?: DateTimeNullableFilter<"deal"> | Date | string | null
    createdAt?: DateTimeFilter<"deal"> | Date | string
    propertyId?: IntNullableFilter<"deal"> | number | null
    clientId?: IntFilter<"deal"> | number
  }

  export type coownershipUpsertWithWhereUniqueWithoutClientInput = {
    where: coownershipWhereUniqueInput
    update: XOR<coownershipUpdateWithoutClientInput, coownershipUncheckedUpdateWithoutClientInput>
    create: XOR<coownershipCreateWithoutClientInput, coownershipUncheckedCreateWithoutClientInput>
  }

  export type coownershipUpdateWithWhereUniqueWithoutClientInput = {
    where: coownershipWhereUniqueInput
    data: XOR<coownershipUpdateWithoutClientInput, coownershipUncheckedUpdateWithoutClientInput>
  }

  export type coownershipUpdateManyWithWhereWithoutClientInput = {
    where: coownershipScalarWhereInput
    data: XOR<coownershipUpdateManyMutationInput, coownershipUncheckedUpdateManyWithoutClientInput>
  }

  export type coownershipScalarWhereInput = {
    AND?: coownershipScalarWhereInput | coownershipScalarWhereInput[]
    OR?: coownershipScalarWhereInput[]
    NOT?: coownershipScalarWhereInput | coownershipScalarWhereInput[]
    id?: IntFilter<"coownership"> | number
    propertyId?: IntFilter<"coownership"> | number
    clientId?: IntFilter<"coownership"> | number
    share?: DecimalFilter<"coownership"> | Decimal | DecimalJsLike | number | string
    role?: StringFilter<"coownership"> | string
    createdAt?: DateTimeFilter<"coownership"> | Date | string
  }

  export type propertyCreateWithoutContactLeadsInput = {
    title: string
    slug: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    location?: string | null
    category?: string | null
    bedrooms?: number | null
    bathrooms?: number | null
    area_m2?: Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: number | null
    type?: string | null
    yearOfConstruction?: number | null
    capacity?: number | null
    status?: string | null
    mainImage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: propertyimageCreateNestedManyWithoutPropertyInput
    deals?: dealCreateNestedManyWithoutPropertyInput
    expenses?: expenseCreateNestedManyWithoutPropertyInput
    inquiries?: inquiryCreateNestedManyWithoutPropertyInput
    coOwnerships?: coownershipCreateNestedManyWithoutPropertyInput
  }

  export type propertyUncheckedCreateWithoutContactLeadsInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    location?: string | null
    category?: string | null
    bedrooms?: number | null
    bathrooms?: number | null
    area_m2?: Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: number | null
    type?: string | null
    yearOfConstruction?: number | null
    capacity?: number | null
    status?: string | null
    mainImage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: propertyimageUncheckedCreateNestedManyWithoutPropertyInput
    deals?: dealUncheckedCreateNestedManyWithoutPropertyInput
    expenses?: expenseUncheckedCreateNestedManyWithoutPropertyInput
    inquiries?: inquiryUncheckedCreateNestedManyWithoutPropertyInput
    coOwnerships?: coownershipUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type propertyCreateOrConnectWithoutContactLeadsInput = {
    where: propertyWhereUniqueInput
    create: XOR<propertyCreateWithoutContactLeadsInput, propertyUncheckedCreateWithoutContactLeadsInput>
  }

  export type propertyUpsertWithoutContactLeadsInput = {
    update: XOR<propertyUpdateWithoutContactLeadsInput, propertyUncheckedUpdateWithoutContactLeadsInput>
    create: XOR<propertyCreateWithoutContactLeadsInput, propertyUncheckedCreateWithoutContactLeadsInput>
    where?: propertyWhereInput
  }

  export type propertyUpdateToOneWithWhereWithoutContactLeadsInput = {
    where?: propertyWhereInput
    data: XOR<propertyUpdateWithoutContactLeadsInput, propertyUncheckedUpdateWithoutContactLeadsInput>
  }

  export type propertyUpdateWithoutContactLeadsInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    bathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    area_m2?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfConstruction?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: propertyimageUpdateManyWithoutPropertyNestedInput
    deals?: dealUpdateManyWithoutPropertyNestedInput
    expenses?: expenseUpdateManyWithoutPropertyNestedInput
    inquiries?: inquiryUpdateManyWithoutPropertyNestedInput
    coOwnerships?: coownershipUpdateManyWithoutPropertyNestedInput
  }

  export type propertyUncheckedUpdateWithoutContactLeadsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    bathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    area_m2?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfConstruction?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: propertyimageUncheckedUpdateManyWithoutPropertyNestedInput
    deals?: dealUncheckedUpdateManyWithoutPropertyNestedInput
    expenses?: expenseUncheckedUpdateManyWithoutPropertyNestedInput
    inquiries?: inquiryUncheckedUpdateManyWithoutPropertyNestedInput
    coOwnerships?: coownershipUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type propertyCreateWithoutCoOwnershipsInput = {
    title: string
    slug: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    location?: string | null
    category?: string | null
    bedrooms?: number | null
    bathrooms?: number | null
    area_m2?: Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: number | null
    type?: string | null
    yearOfConstruction?: number | null
    capacity?: number | null
    status?: string | null
    mainImage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: propertyimageCreateNestedManyWithoutPropertyInput
    deals?: dealCreateNestedManyWithoutPropertyInput
    expenses?: expenseCreateNestedManyWithoutPropertyInput
    inquiries?: inquiryCreateNestedManyWithoutPropertyInput
    contactLeads?: contactleadCreateNestedManyWithoutPropertyInput
  }

  export type propertyUncheckedCreateWithoutCoOwnershipsInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    location?: string | null
    category?: string | null
    bedrooms?: number | null
    bathrooms?: number | null
    area_m2?: Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: number | null
    type?: string | null
    yearOfConstruction?: number | null
    capacity?: number | null
    status?: string | null
    mainImage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: propertyimageUncheckedCreateNestedManyWithoutPropertyInput
    deals?: dealUncheckedCreateNestedManyWithoutPropertyInput
    expenses?: expenseUncheckedCreateNestedManyWithoutPropertyInput
    inquiries?: inquiryUncheckedCreateNestedManyWithoutPropertyInput
    contactLeads?: contactleadUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type propertyCreateOrConnectWithoutCoOwnershipsInput = {
    where: propertyWhereUniqueInput
    create: XOR<propertyCreateWithoutCoOwnershipsInput, propertyUncheckedCreateWithoutCoOwnershipsInput>
  }

  export type clientCreateWithoutCoOwnershipsInput = {
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    idNumber?: string | null
    notes?: string | null
    deals?: dealCreateNestedManyWithoutClientInput
  }

  export type clientUncheckedCreateWithoutCoOwnershipsInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    idNumber?: string | null
    notes?: string | null
    deals?: dealUncheckedCreateNestedManyWithoutClientInput
  }

  export type clientCreateOrConnectWithoutCoOwnershipsInput = {
    where: clientWhereUniqueInput
    create: XOR<clientCreateWithoutCoOwnershipsInput, clientUncheckedCreateWithoutCoOwnershipsInput>
  }

  export type propertyUpsertWithoutCoOwnershipsInput = {
    update: XOR<propertyUpdateWithoutCoOwnershipsInput, propertyUncheckedUpdateWithoutCoOwnershipsInput>
    create: XOR<propertyCreateWithoutCoOwnershipsInput, propertyUncheckedCreateWithoutCoOwnershipsInput>
    where?: propertyWhereInput
  }

  export type propertyUpdateToOneWithWhereWithoutCoOwnershipsInput = {
    where?: propertyWhereInput
    data: XOR<propertyUpdateWithoutCoOwnershipsInput, propertyUncheckedUpdateWithoutCoOwnershipsInput>
  }

  export type propertyUpdateWithoutCoOwnershipsInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    bathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    area_m2?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfConstruction?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: propertyimageUpdateManyWithoutPropertyNestedInput
    deals?: dealUpdateManyWithoutPropertyNestedInput
    expenses?: expenseUpdateManyWithoutPropertyNestedInput
    inquiries?: inquiryUpdateManyWithoutPropertyNestedInput
    contactLeads?: contactleadUpdateManyWithoutPropertyNestedInput
  }

  export type propertyUncheckedUpdateWithoutCoOwnershipsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    bathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    area_m2?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfConstruction?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: propertyimageUncheckedUpdateManyWithoutPropertyNestedInput
    deals?: dealUncheckedUpdateManyWithoutPropertyNestedInput
    expenses?: expenseUncheckedUpdateManyWithoutPropertyNestedInput
    inquiries?: inquiryUncheckedUpdateManyWithoutPropertyNestedInput
    contactLeads?: contactleadUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type clientUpsertWithoutCoOwnershipsInput = {
    update: XOR<clientUpdateWithoutCoOwnershipsInput, clientUncheckedUpdateWithoutCoOwnershipsInput>
    create: XOR<clientCreateWithoutCoOwnershipsInput, clientUncheckedCreateWithoutCoOwnershipsInput>
    where?: clientWhereInput
  }

  export type clientUpdateToOneWithWhereWithoutCoOwnershipsInput = {
    where?: clientWhereInput
    data: XOR<clientUpdateWithoutCoOwnershipsInput, clientUncheckedUpdateWithoutCoOwnershipsInput>
  }

  export type clientUpdateWithoutCoOwnershipsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deals?: dealUpdateManyWithoutClientNestedInput
  }

  export type clientUncheckedUpdateWithoutCoOwnershipsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    deals?: dealUncheckedUpdateManyWithoutClientNestedInput
  }

  export type clientCreateWithoutDealsInput = {
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    idNumber?: string | null
    notes?: string | null
    coOwnerships?: coownershipCreateNestedManyWithoutClientInput
  }

  export type clientUncheckedCreateWithoutDealsInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    address?: string | null
    idNumber?: string | null
    notes?: string | null
    coOwnerships?: coownershipUncheckedCreateNestedManyWithoutClientInput
  }

  export type clientCreateOrConnectWithoutDealsInput = {
    where: clientWhereUniqueInput
    create: XOR<clientCreateWithoutDealsInput, clientUncheckedCreateWithoutDealsInput>
  }

  export type propertyCreateWithoutDealsInput = {
    title: string
    slug: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    location?: string | null
    category?: string | null
    bedrooms?: number | null
    bathrooms?: number | null
    area_m2?: Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: number | null
    type?: string | null
    yearOfConstruction?: number | null
    capacity?: number | null
    status?: string | null
    mainImage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: propertyimageCreateNestedManyWithoutPropertyInput
    expenses?: expenseCreateNestedManyWithoutPropertyInput
    inquiries?: inquiryCreateNestedManyWithoutPropertyInput
    contactLeads?: contactleadCreateNestedManyWithoutPropertyInput
    coOwnerships?: coownershipCreateNestedManyWithoutPropertyInput
  }

  export type propertyUncheckedCreateWithoutDealsInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    location?: string | null
    category?: string | null
    bedrooms?: number | null
    bathrooms?: number | null
    area_m2?: Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: number | null
    type?: string | null
    yearOfConstruction?: number | null
    capacity?: number | null
    status?: string | null
    mainImage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: propertyimageUncheckedCreateNestedManyWithoutPropertyInput
    expenses?: expenseUncheckedCreateNestedManyWithoutPropertyInput
    inquiries?: inquiryUncheckedCreateNestedManyWithoutPropertyInput
    contactLeads?: contactleadUncheckedCreateNestedManyWithoutPropertyInput
    coOwnerships?: coownershipUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type propertyCreateOrConnectWithoutDealsInput = {
    where: propertyWhereUniqueInput
    create: XOR<propertyCreateWithoutDealsInput, propertyUncheckedCreateWithoutDealsInput>
  }

  export type invoiceCreateWithoutDealInput = {
    number: string
    issueDate?: Date | string
    dueDate?: Date | string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string
    payments?: paymentCreateNestedManyWithoutInvoiceInput
  }

  export type invoiceUncheckedCreateWithoutDealInput = {
    id?: number
    number: string
    issueDate?: Date | string
    dueDate?: Date | string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string
    payments?: paymentUncheckedCreateNestedManyWithoutInvoiceInput
  }

  export type invoiceCreateOrConnectWithoutDealInput = {
    where: invoiceWhereUniqueInput
    create: XOR<invoiceCreateWithoutDealInput, invoiceUncheckedCreateWithoutDealInput>
  }

  export type invoiceCreateManyDealInputEnvelope = {
    data: invoiceCreateManyDealInput | invoiceCreateManyDealInput[]
    skipDuplicates?: boolean
  }

  export type paymentCreateWithoutDealInput = {
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    method?: string
    reference?: string | null
    invoice?: invoiceCreateNestedOneWithoutPaymentsInput
    schedules?: paymentscheduleCreateNestedManyWithoutPaymentInput
  }

  export type paymentUncheckedCreateWithoutDealInput = {
    id?: number
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    method?: string
    reference?: string | null
    invoiceId?: number | null
    schedules?: paymentscheduleUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type paymentCreateOrConnectWithoutDealInput = {
    where: paymentWhereUniqueInput
    create: XOR<paymentCreateWithoutDealInput, paymentUncheckedCreateWithoutDealInput>
  }

  export type paymentCreateManyDealInputEnvelope = {
    data: paymentCreateManyDealInput | paymentCreateManyDealInput[]
    skipDuplicates?: boolean
  }

  export type paymentscheduleCreateWithoutDealInput = {
    label: string
    dueDate: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status?: string
    createdAt?: Date | string
    payment?: paymentCreateNestedOneWithoutSchedulesInput
  }

  export type paymentscheduleUncheckedCreateWithoutDealInput = {
    id?: number
    label: string
    dueDate: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status?: string
    paymentId?: number | null
    createdAt?: Date | string
  }

  export type paymentscheduleCreateOrConnectWithoutDealInput = {
    where: paymentscheduleWhereUniqueInput
    create: XOR<paymentscheduleCreateWithoutDealInput, paymentscheduleUncheckedCreateWithoutDealInput>
  }

  export type paymentscheduleCreateManyDealInputEnvelope = {
    data: paymentscheduleCreateManyDealInput | paymentscheduleCreateManyDealInput[]
    skipDuplicates?: boolean
  }

  export type expenseCreateWithoutDealInput = {
    date?: Date | string
    category: string
    description?: string | null
    amount: Decimal | DecimalJsLike | number | string
    payee?: string | null
    property?: propertyCreateNestedOneWithoutExpensesInput
  }

  export type expenseUncheckedCreateWithoutDealInput = {
    id?: number
    date?: Date | string
    category: string
    description?: string | null
    amount: Decimal | DecimalJsLike | number | string
    payee?: string | null
    propertyId?: number | null
  }

  export type expenseCreateOrConnectWithoutDealInput = {
    where: expenseWhereUniqueInput
    create: XOR<expenseCreateWithoutDealInput, expenseUncheckedCreateWithoutDealInput>
  }

  export type expenseCreateManyDealInputEnvelope = {
    data: expenseCreateManyDealInput | expenseCreateManyDealInput[]
    skipDuplicates?: boolean
  }

  export type clientUpsertWithoutDealsInput = {
    update: XOR<clientUpdateWithoutDealsInput, clientUncheckedUpdateWithoutDealsInput>
    create: XOR<clientCreateWithoutDealsInput, clientUncheckedCreateWithoutDealsInput>
    where?: clientWhereInput
  }

  export type clientUpdateToOneWithWhereWithoutDealsInput = {
    where?: clientWhereInput
    data: XOR<clientUpdateWithoutDealsInput, clientUncheckedUpdateWithoutDealsInput>
  }

  export type clientUpdateWithoutDealsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coOwnerships?: coownershipUpdateManyWithoutClientNestedInput
  }

  export type clientUncheckedUpdateWithoutDealsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    idNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coOwnerships?: coownershipUncheckedUpdateManyWithoutClientNestedInput
  }

  export type propertyUpsertWithoutDealsInput = {
    update: XOR<propertyUpdateWithoutDealsInput, propertyUncheckedUpdateWithoutDealsInput>
    create: XOR<propertyCreateWithoutDealsInput, propertyUncheckedCreateWithoutDealsInput>
    where?: propertyWhereInput
  }

  export type propertyUpdateToOneWithWhereWithoutDealsInput = {
    where?: propertyWhereInput
    data: XOR<propertyUpdateWithoutDealsInput, propertyUncheckedUpdateWithoutDealsInput>
  }

  export type propertyUpdateWithoutDealsInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    bathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    area_m2?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfConstruction?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: propertyimageUpdateManyWithoutPropertyNestedInput
    expenses?: expenseUpdateManyWithoutPropertyNestedInput
    inquiries?: inquiryUpdateManyWithoutPropertyNestedInput
    contactLeads?: contactleadUpdateManyWithoutPropertyNestedInput
    coOwnerships?: coownershipUpdateManyWithoutPropertyNestedInput
  }

  export type propertyUncheckedUpdateWithoutDealsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    bathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    area_m2?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfConstruction?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: propertyimageUncheckedUpdateManyWithoutPropertyNestedInput
    expenses?: expenseUncheckedUpdateManyWithoutPropertyNestedInput
    inquiries?: inquiryUncheckedUpdateManyWithoutPropertyNestedInput
    contactLeads?: contactleadUncheckedUpdateManyWithoutPropertyNestedInput
    coOwnerships?: coownershipUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type invoiceUpsertWithWhereUniqueWithoutDealInput = {
    where: invoiceWhereUniqueInput
    update: XOR<invoiceUpdateWithoutDealInput, invoiceUncheckedUpdateWithoutDealInput>
    create: XOR<invoiceCreateWithoutDealInput, invoiceUncheckedCreateWithoutDealInput>
  }

  export type invoiceUpdateWithWhereUniqueWithoutDealInput = {
    where: invoiceWhereUniqueInput
    data: XOR<invoiceUpdateWithoutDealInput, invoiceUncheckedUpdateWithoutDealInput>
  }

  export type invoiceUpdateManyWithWhereWithoutDealInput = {
    where: invoiceScalarWhereInput
    data: XOR<invoiceUpdateManyMutationInput, invoiceUncheckedUpdateManyWithoutDealInput>
  }

  export type invoiceScalarWhereInput = {
    AND?: invoiceScalarWhereInput | invoiceScalarWhereInput[]
    OR?: invoiceScalarWhereInput[]
    NOT?: invoiceScalarWhereInput | invoiceScalarWhereInput[]
    id?: IntFilter<"invoice"> | number
    number?: StringFilter<"invoice"> | string
    issueDate?: DateTimeFilter<"invoice"> | Date | string
    dueDate?: DateTimeNullableFilter<"invoice"> | Date | string | null
    amount?: DecimalFilter<"invoice"> | Decimal | DecimalJsLike | number | string
    status?: StringFilter<"invoice"> | string
    dealId?: IntFilter<"invoice"> | number
  }

  export type paymentUpsertWithWhereUniqueWithoutDealInput = {
    where: paymentWhereUniqueInput
    update: XOR<paymentUpdateWithoutDealInput, paymentUncheckedUpdateWithoutDealInput>
    create: XOR<paymentCreateWithoutDealInput, paymentUncheckedCreateWithoutDealInput>
  }

  export type paymentUpdateWithWhereUniqueWithoutDealInput = {
    where: paymentWhereUniqueInput
    data: XOR<paymentUpdateWithoutDealInput, paymentUncheckedUpdateWithoutDealInput>
  }

  export type paymentUpdateManyWithWhereWithoutDealInput = {
    where: paymentScalarWhereInput
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyWithoutDealInput>
  }

  export type paymentScalarWhereInput = {
    AND?: paymentScalarWhereInput | paymentScalarWhereInput[]
    OR?: paymentScalarWhereInput[]
    NOT?: paymentScalarWhereInput | paymentScalarWhereInput[]
    id?: IntFilter<"payment"> | number
    date?: DateTimeFilter<"payment"> | Date | string
    amount?: DecimalFilter<"payment"> | Decimal | DecimalJsLike | number | string
    method?: StringFilter<"payment"> | string
    reference?: StringNullableFilter<"payment"> | string | null
    dealId?: IntFilter<"payment"> | number
    invoiceId?: IntNullableFilter<"payment"> | number | null
  }

  export type paymentscheduleUpsertWithWhereUniqueWithoutDealInput = {
    where: paymentscheduleWhereUniqueInput
    update: XOR<paymentscheduleUpdateWithoutDealInput, paymentscheduleUncheckedUpdateWithoutDealInput>
    create: XOR<paymentscheduleCreateWithoutDealInput, paymentscheduleUncheckedCreateWithoutDealInput>
  }

  export type paymentscheduleUpdateWithWhereUniqueWithoutDealInput = {
    where: paymentscheduleWhereUniqueInput
    data: XOR<paymentscheduleUpdateWithoutDealInput, paymentscheduleUncheckedUpdateWithoutDealInput>
  }

  export type paymentscheduleUpdateManyWithWhereWithoutDealInput = {
    where: paymentscheduleScalarWhereInput
    data: XOR<paymentscheduleUpdateManyMutationInput, paymentscheduleUncheckedUpdateManyWithoutDealInput>
  }

  export type paymentscheduleScalarWhereInput = {
    AND?: paymentscheduleScalarWhereInput | paymentscheduleScalarWhereInput[]
    OR?: paymentscheduleScalarWhereInput[]
    NOT?: paymentscheduleScalarWhereInput | paymentscheduleScalarWhereInput[]
    id?: IntFilter<"paymentschedule"> | number
    dealId?: IntFilter<"paymentschedule"> | number
    label?: StringFilter<"paymentschedule"> | string
    dueDate?: DateTimeFilter<"paymentschedule"> | Date | string
    amount?: DecimalFilter<"paymentschedule"> | Decimal | DecimalJsLike | number | string
    status?: StringFilter<"paymentschedule"> | string
    paymentId?: IntNullableFilter<"paymentschedule"> | number | null
    createdAt?: DateTimeFilter<"paymentschedule"> | Date | string
  }

  export type expenseUpsertWithWhereUniqueWithoutDealInput = {
    where: expenseWhereUniqueInput
    update: XOR<expenseUpdateWithoutDealInput, expenseUncheckedUpdateWithoutDealInput>
    create: XOR<expenseCreateWithoutDealInput, expenseUncheckedCreateWithoutDealInput>
  }

  export type expenseUpdateWithWhereUniqueWithoutDealInput = {
    where: expenseWhereUniqueInput
    data: XOR<expenseUpdateWithoutDealInput, expenseUncheckedUpdateWithoutDealInput>
  }

  export type expenseUpdateManyWithWhereWithoutDealInput = {
    where: expenseScalarWhereInput
    data: XOR<expenseUpdateManyMutationInput, expenseUncheckedUpdateManyWithoutDealInput>
  }

  export type expenseScalarWhereInput = {
    AND?: expenseScalarWhereInput | expenseScalarWhereInput[]
    OR?: expenseScalarWhereInput[]
    NOT?: expenseScalarWhereInput | expenseScalarWhereInput[]
    id?: IntFilter<"expense"> | number
    date?: DateTimeFilter<"expense"> | Date | string
    category?: StringFilter<"expense"> | string
    description?: StringNullableFilter<"expense"> | string | null
    amount?: DecimalFilter<"expense"> | Decimal | DecimalJsLike | number | string
    payee?: StringNullableFilter<"expense"> | string | null
    dealId?: IntNullableFilter<"expense"> | number | null
    propertyId?: IntNullableFilter<"expense"> | number | null
  }

  export type dealCreateWithoutExpensesInput = {
    type?: string
    status?: string
    basePrice?: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxRate?: Decimal | DecimalJsLike | number | string
    commissionRate?: Decimal | DecimalJsLike | number | string
    expectedClose?: Date | string | null
    closedAt?: Date | string | null
    createdAt?: Date | string
    client: clientCreateNestedOneWithoutDealsInput
    property?: propertyCreateNestedOneWithoutDealsInput
    invoices?: invoiceCreateNestedManyWithoutDealInput
    payments?: paymentCreateNestedManyWithoutDealInput
    schedules?: paymentscheduleCreateNestedManyWithoutDealInput
  }

  export type dealUncheckedCreateWithoutExpensesInput = {
    id?: number
    type?: string
    status?: string
    basePrice?: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxRate?: Decimal | DecimalJsLike | number | string
    commissionRate?: Decimal | DecimalJsLike | number | string
    expectedClose?: Date | string | null
    closedAt?: Date | string | null
    createdAt?: Date | string
    propertyId?: number | null
    clientId: number
    invoices?: invoiceUncheckedCreateNestedManyWithoutDealInput
    payments?: paymentUncheckedCreateNestedManyWithoutDealInput
    schedules?: paymentscheduleUncheckedCreateNestedManyWithoutDealInput
  }

  export type dealCreateOrConnectWithoutExpensesInput = {
    where: dealWhereUniqueInput
    create: XOR<dealCreateWithoutExpensesInput, dealUncheckedCreateWithoutExpensesInput>
  }

  export type propertyCreateWithoutExpensesInput = {
    title: string
    slug: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    location?: string | null
    category?: string | null
    bedrooms?: number | null
    bathrooms?: number | null
    area_m2?: Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: number | null
    type?: string | null
    yearOfConstruction?: number | null
    capacity?: number | null
    status?: string | null
    mainImage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: propertyimageCreateNestedManyWithoutPropertyInput
    deals?: dealCreateNestedManyWithoutPropertyInput
    inquiries?: inquiryCreateNestedManyWithoutPropertyInput
    contactLeads?: contactleadCreateNestedManyWithoutPropertyInput
    coOwnerships?: coownershipCreateNestedManyWithoutPropertyInput
  }

  export type propertyUncheckedCreateWithoutExpensesInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    location?: string | null
    category?: string | null
    bedrooms?: number | null
    bathrooms?: number | null
    area_m2?: Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: number | null
    type?: string | null
    yearOfConstruction?: number | null
    capacity?: number | null
    status?: string | null
    mainImage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: propertyimageUncheckedCreateNestedManyWithoutPropertyInput
    deals?: dealUncheckedCreateNestedManyWithoutPropertyInput
    inquiries?: inquiryUncheckedCreateNestedManyWithoutPropertyInput
    contactLeads?: contactleadUncheckedCreateNestedManyWithoutPropertyInput
    coOwnerships?: coownershipUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type propertyCreateOrConnectWithoutExpensesInput = {
    where: propertyWhereUniqueInput
    create: XOR<propertyCreateWithoutExpensesInput, propertyUncheckedCreateWithoutExpensesInput>
  }

  export type dealUpsertWithoutExpensesInput = {
    update: XOR<dealUpdateWithoutExpensesInput, dealUncheckedUpdateWithoutExpensesInput>
    create: XOR<dealCreateWithoutExpensesInput, dealUncheckedCreateWithoutExpensesInput>
    where?: dealWhereInput
  }

  export type dealUpdateToOneWithWhereWithoutExpensesInput = {
    where?: dealWhereInput
    data: XOR<dealUpdateWithoutExpensesInput, dealUncheckedUpdateWithoutExpensesInput>
  }

  export type dealUpdateWithoutExpensesInput = {
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expectedClose?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: clientUpdateOneRequiredWithoutDealsNestedInput
    property?: propertyUpdateOneWithoutDealsNestedInput
    invoices?: invoiceUpdateManyWithoutDealNestedInput
    payments?: paymentUpdateManyWithoutDealNestedInput
    schedules?: paymentscheduleUpdateManyWithoutDealNestedInput
  }

  export type dealUncheckedUpdateWithoutExpensesInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expectedClose?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    propertyId?: NullableIntFieldUpdateOperationsInput | number | null
    clientId?: IntFieldUpdateOperationsInput | number
    invoices?: invoiceUncheckedUpdateManyWithoutDealNestedInput
    payments?: paymentUncheckedUpdateManyWithoutDealNestedInput
    schedules?: paymentscheduleUncheckedUpdateManyWithoutDealNestedInput
  }

  export type propertyUpsertWithoutExpensesInput = {
    update: XOR<propertyUpdateWithoutExpensesInput, propertyUncheckedUpdateWithoutExpensesInput>
    create: XOR<propertyCreateWithoutExpensesInput, propertyUncheckedCreateWithoutExpensesInput>
    where?: propertyWhereInput
  }

  export type propertyUpdateToOneWithWhereWithoutExpensesInput = {
    where?: propertyWhereInput
    data: XOR<propertyUpdateWithoutExpensesInput, propertyUncheckedUpdateWithoutExpensesInput>
  }

  export type propertyUpdateWithoutExpensesInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    bathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    area_m2?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfConstruction?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: propertyimageUpdateManyWithoutPropertyNestedInput
    deals?: dealUpdateManyWithoutPropertyNestedInput
    inquiries?: inquiryUpdateManyWithoutPropertyNestedInput
    contactLeads?: contactleadUpdateManyWithoutPropertyNestedInput
    coOwnerships?: coownershipUpdateManyWithoutPropertyNestedInput
  }

  export type propertyUncheckedUpdateWithoutExpensesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    bathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    area_m2?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfConstruction?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: propertyimageUncheckedUpdateManyWithoutPropertyNestedInput
    deals?: dealUncheckedUpdateManyWithoutPropertyNestedInput
    inquiries?: inquiryUncheckedUpdateManyWithoutPropertyNestedInput
    contactLeads?: contactleadUncheckedUpdateManyWithoutPropertyNestedInput
    coOwnerships?: coownershipUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type propertyCreateWithoutInquiriesInput = {
    title: string
    slug: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    location?: string | null
    category?: string | null
    bedrooms?: number | null
    bathrooms?: number | null
    area_m2?: Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: number | null
    type?: string | null
    yearOfConstruction?: number | null
    capacity?: number | null
    status?: string | null
    mainImage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: propertyimageCreateNestedManyWithoutPropertyInput
    deals?: dealCreateNestedManyWithoutPropertyInput
    expenses?: expenseCreateNestedManyWithoutPropertyInput
    contactLeads?: contactleadCreateNestedManyWithoutPropertyInput
    coOwnerships?: coownershipCreateNestedManyWithoutPropertyInput
  }

  export type propertyUncheckedCreateWithoutInquiriesInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    location?: string | null
    category?: string | null
    bedrooms?: number | null
    bathrooms?: number | null
    area_m2?: Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: number | null
    type?: string | null
    yearOfConstruction?: number | null
    capacity?: number | null
    status?: string | null
    mainImage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    images?: propertyimageUncheckedCreateNestedManyWithoutPropertyInput
    deals?: dealUncheckedCreateNestedManyWithoutPropertyInput
    expenses?: expenseUncheckedCreateNestedManyWithoutPropertyInput
    contactLeads?: contactleadUncheckedCreateNestedManyWithoutPropertyInput
    coOwnerships?: coownershipUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type propertyCreateOrConnectWithoutInquiriesInput = {
    where: propertyWhereUniqueInput
    create: XOR<propertyCreateWithoutInquiriesInput, propertyUncheckedCreateWithoutInquiriesInput>
  }

  export type propertyUpsertWithoutInquiriesInput = {
    update: XOR<propertyUpdateWithoutInquiriesInput, propertyUncheckedUpdateWithoutInquiriesInput>
    create: XOR<propertyCreateWithoutInquiriesInput, propertyUncheckedCreateWithoutInquiriesInput>
    where?: propertyWhereInput
  }

  export type propertyUpdateToOneWithWhereWithoutInquiriesInput = {
    where?: propertyWhereInput
    data: XOR<propertyUpdateWithoutInquiriesInput, propertyUncheckedUpdateWithoutInquiriesInput>
  }

  export type propertyUpdateWithoutInquiriesInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    bathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    area_m2?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfConstruction?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: propertyimageUpdateManyWithoutPropertyNestedInput
    deals?: dealUpdateManyWithoutPropertyNestedInput
    expenses?: expenseUpdateManyWithoutPropertyNestedInput
    contactLeads?: contactleadUpdateManyWithoutPropertyNestedInput
    coOwnerships?: coownershipUpdateManyWithoutPropertyNestedInput
  }

  export type propertyUncheckedUpdateWithoutInquiriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    bathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    area_m2?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfConstruction?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    images?: propertyimageUncheckedUpdateManyWithoutPropertyNestedInput
    deals?: dealUncheckedUpdateManyWithoutPropertyNestedInput
    expenses?: expenseUncheckedUpdateManyWithoutPropertyNestedInput
    contactLeads?: contactleadUncheckedUpdateManyWithoutPropertyNestedInput
    coOwnerships?: coownershipUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type dealCreateWithoutInvoicesInput = {
    type?: string
    status?: string
    basePrice?: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxRate?: Decimal | DecimalJsLike | number | string
    commissionRate?: Decimal | DecimalJsLike | number | string
    expectedClose?: Date | string | null
    closedAt?: Date | string | null
    createdAt?: Date | string
    client: clientCreateNestedOneWithoutDealsInput
    property?: propertyCreateNestedOneWithoutDealsInput
    payments?: paymentCreateNestedManyWithoutDealInput
    schedules?: paymentscheduleCreateNestedManyWithoutDealInput
    expenses?: expenseCreateNestedManyWithoutDealInput
  }

  export type dealUncheckedCreateWithoutInvoicesInput = {
    id?: number
    type?: string
    status?: string
    basePrice?: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxRate?: Decimal | DecimalJsLike | number | string
    commissionRate?: Decimal | DecimalJsLike | number | string
    expectedClose?: Date | string | null
    closedAt?: Date | string | null
    createdAt?: Date | string
    propertyId?: number | null
    clientId: number
    payments?: paymentUncheckedCreateNestedManyWithoutDealInput
    schedules?: paymentscheduleUncheckedCreateNestedManyWithoutDealInput
    expenses?: expenseUncheckedCreateNestedManyWithoutDealInput
  }

  export type dealCreateOrConnectWithoutInvoicesInput = {
    where: dealWhereUniqueInput
    create: XOR<dealCreateWithoutInvoicesInput, dealUncheckedCreateWithoutInvoicesInput>
  }

  export type paymentCreateWithoutInvoiceInput = {
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    method?: string
    reference?: string | null
    deal: dealCreateNestedOneWithoutPaymentsInput
    schedules?: paymentscheduleCreateNestedManyWithoutPaymentInput
  }

  export type paymentUncheckedCreateWithoutInvoiceInput = {
    id?: number
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    method?: string
    reference?: string | null
    dealId: number
    schedules?: paymentscheduleUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type paymentCreateOrConnectWithoutInvoiceInput = {
    where: paymentWhereUniqueInput
    create: XOR<paymentCreateWithoutInvoiceInput, paymentUncheckedCreateWithoutInvoiceInput>
  }

  export type paymentCreateManyInvoiceInputEnvelope = {
    data: paymentCreateManyInvoiceInput | paymentCreateManyInvoiceInput[]
    skipDuplicates?: boolean
  }

  export type dealUpsertWithoutInvoicesInput = {
    update: XOR<dealUpdateWithoutInvoicesInput, dealUncheckedUpdateWithoutInvoicesInput>
    create: XOR<dealCreateWithoutInvoicesInput, dealUncheckedCreateWithoutInvoicesInput>
    where?: dealWhereInput
  }

  export type dealUpdateToOneWithWhereWithoutInvoicesInput = {
    where?: dealWhereInput
    data: XOR<dealUpdateWithoutInvoicesInput, dealUncheckedUpdateWithoutInvoicesInput>
  }

  export type dealUpdateWithoutInvoicesInput = {
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expectedClose?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: clientUpdateOneRequiredWithoutDealsNestedInput
    property?: propertyUpdateOneWithoutDealsNestedInput
    payments?: paymentUpdateManyWithoutDealNestedInput
    schedules?: paymentscheduleUpdateManyWithoutDealNestedInput
    expenses?: expenseUpdateManyWithoutDealNestedInput
  }

  export type dealUncheckedUpdateWithoutInvoicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expectedClose?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    propertyId?: NullableIntFieldUpdateOperationsInput | number | null
    clientId?: IntFieldUpdateOperationsInput | number
    payments?: paymentUncheckedUpdateManyWithoutDealNestedInput
    schedules?: paymentscheduleUncheckedUpdateManyWithoutDealNestedInput
    expenses?: expenseUncheckedUpdateManyWithoutDealNestedInput
  }

  export type paymentUpsertWithWhereUniqueWithoutInvoiceInput = {
    where: paymentWhereUniqueInput
    update: XOR<paymentUpdateWithoutInvoiceInput, paymentUncheckedUpdateWithoutInvoiceInput>
    create: XOR<paymentCreateWithoutInvoiceInput, paymentUncheckedCreateWithoutInvoiceInput>
  }

  export type paymentUpdateWithWhereUniqueWithoutInvoiceInput = {
    where: paymentWhereUniqueInput
    data: XOR<paymentUpdateWithoutInvoiceInput, paymentUncheckedUpdateWithoutInvoiceInput>
  }

  export type paymentUpdateManyWithWhereWithoutInvoiceInput = {
    where: paymentScalarWhereInput
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyWithoutInvoiceInput>
  }

  export type dealCreateWithoutPaymentsInput = {
    type?: string
    status?: string
    basePrice?: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxRate?: Decimal | DecimalJsLike | number | string
    commissionRate?: Decimal | DecimalJsLike | number | string
    expectedClose?: Date | string | null
    closedAt?: Date | string | null
    createdAt?: Date | string
    client: clientCreateNestedOneWithoutDealsInput
    property?: propertyCreateNestedOneWithoutDealsInput
    invoices?: invoiceCreateNestedManyWithoutDealInput
    schedules?: paymentscheduleCreateNestedManyWithoutDealInput
    expenses?: expenseCreateNestedManyWithoutDealInput
  }

  export type dealUncheckedCreateWithoutPaymentsInput = {
    id?: number
    type?: string
    status?: string
    basePrice?: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxRate?: Decimal | DecimalJsLike | number | string
    commissionRate?: Decimal | DecimalJsLike | number | string
    expectedClose?: Date | string | null
    closedAt?: Date | string | null
    createdAt?: Date | string
    propertyId?: number | null
    clientId: number
    invoices?: invoiceUncheckedCreateNestedManyWithoutDealInput
    schedules?: paymentscheduleUncheckedCreateNestedManyWithoutDealInput
    expenses?: expenseUncheckedCreateNestedManyWithoutDealInput
  }

  export type dealCreateOrConnectWithoutPaymentsInput = {
    where: dealWhereUniqueInput
    create: XOR<dealCreateWithoutPaymentsInput, dealUncheckedCreateWithoutPaymentsInput>
  }

  export type invoiceCreateWithoutPaymentsInput = {
    number: string
    issueDate?: Date | string
    dueDate?: Date | string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string
    deal: dealCreateNestedOneWithoutInvoicesInput
  }

  export type invoiceUncheckedCreateWithoutPaymentsInput = {
    id?: number
    number: string
    issueDate?: Date | string
    dueDate?: Date | string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string
    dealId: number
  }

  export type invoiceCreateOrConnectWithoutPaymentsInput = {
    where: invoiceWhereUniqueInput
    create: XOR<invoiceCreateWithoutPaymentsInput, invoiceUncheckedCreateWithoutPaymentsInput>
  }

  export type paymentscheduleCreateWithoutPaymentInput = {
    label: string
    dueDate: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status?: string
    createdAt?: Date | string
    deal: dealCreateNestedOneWithoutSchedulesInput
  }

  export type paymentscheduleUncheckedCreateWithoutPaymentInput = {
    id?: number
    dealId: number
    label: string
    dueDate: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status?: string
    createdAt?: Date | string
  }

  export type paymentscheduleCreateOrConnectWithoutPaymentInput = {
    where: paymentscheduleWhereUniqueInput
    create: XOR<paymentscheduleCreateWithoutPaymentInput, paymentscheduleUncheckedCreateWithoutPaymentInput>
  }

  export type paymentscheduleCreateManyPaymentInputEnvelope = {
    data: paymentscheduleCreateManyPaymentInput | paymentscheduleCreateManyPaymentInput[]
    skipDuplicates?: boolean
  }

  export type dealUpsertWithoutPaymentsInput = {
    update: XOR<dealUpdateWithoutPaymentsInput, dealUncheckedUpdateWithoutPaymentsInput>
    create: XOR<dealCreateWithoutPaymentsInput, dealUncheckedCreateWithoutPaymentsInput>
    where?: dealWhereInput
  }

  export type dealUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: dealWhereInput
    data: XOR<dealUpdateWithoutPaymentsInput, dealUncheckedUpdateWithoutPaymentsInput>
  }

  export type dealUpdateWithoutPaymentsInput = {
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expectedClose?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: clientUpdateOneRequiredWithoutDealsNestedInput
    property?: propertyUpdateOneWithoutDealsNestedInput
    invoices?: invoiceUpdateManyWithoutDealNestedInput
    schedules?: paymentscheduleUpdateManyWithoutDealNestedInput
    expenses?: expenseUpdateManyWithoutDealNestedInput
  }

  export type dealUncheckedUpdateWithoutPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expectedClose?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    propertyId?: NullableIntFieldUpdateOperationsInput | number | null
    clientId?: IntFieldUpdateOperationsInput | number
    invoices?: invoiceUncheckedUpdateManyWithoutDealNestedInput
    schedules?: paymentscheduleUncheckedUpdateManyWithoutDealNestedInput
    expenses?: expenseUncheckedUpdateManyWithoutDealNestedInput
  }

  export type invoiceUpsertWithoutPaymentsInput = {
    update: XOR<invoiceUpdateWithoutPaymentsInput, invoiceUncheckedUpdateWithoutPaymentsInput>
    create: XOR<invoiceCreateWithoutPaymentsInput, invoiceUncheckedCreateWithoutPaymentsInput>
    where?: invoiceWhereInput
  }

  export type invoiceUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: invoiceWhereInput
    data: XOR<invoiceUpdateWithoutPaymentsInput, invoiceUncheckedUpdateWithoutPaymentsInput>
  }

  export type invoiceUpdateWithoutPaymentsInput = {
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    deal?: dealUpdateOneRequiredWithoutInvoicesNestedInput
  }

  export type invoiceUncheckedUpdateWithoutPaymentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    dealId?: IntFieldUpdateOperationsInput | number
  }

  export type paymentscheduleUpsertWithWhereUniqueWithoutPaymentInput = {
    where: paymentscheduleWhereUniqueInput
    update: XOR<paymentscheduleUpdateWithoutPaymentInput, paymentscheduleUncheckedUpdateWithoutPaymentInput>
    create: XOR<paymentscheduleCreateWithoutPaymentInput, paymentscheduleUncheckedCreateWithoutPaymentInput>
  }

  export type paymentscheduleUpdateWithWhereUniqueWithoutPaymentInput = {
    where: paymentscheduleWhereUniqueInput
    data: XOR<paymentscheduleUpdateWithoutPaymentInput, paymentscheduleUncheckedUpdateWithoutPaymentInput>
  }

  export type paymentscheduleUpdateManyWithWhereWithoutPaymentInput = {
    where: paymentscheduleScalarWhereInput
    data: XOR<paymentscheduleUpdateManyMutationInput, paymentscheduleUncheckedUpdateManyWithoutPaymentInput>
  }

  export type dealCreateWithoutSchedulesInput = {
    type?: string
    status?: string
    basePrice?: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxRate?: Decimal | DecimalJsLike | number | string
    commissionRate?: Decimal | DecimalJsLike | number | string
    expectedClose?: Date | string | null
    closedAt?: Date | string | null
    createdAt?: Date | string
    client: clientCreateNestedOneWithoutDealsInput
    property?: propertyCreateNestedOneWithoutDealsInput
    invoices?: invoiceCreateNestedManyWithoutDealInput
    payments?: paymentCreateNestedManyWithoutDealInput
    expenses?: expenseCreateNestedManyWithoutDealInput
  }

  export type dealUncheckedCreateWithoutSchedulesInput = {
    id?: number
    type?: string
    status?: string
    basePrice?: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxRate?: Decimal | DecimalJsLike | number | string
    commissionRate?: Decimal | DecimalJsLike | number | string
    expectedClose?: Date | string | null
    closedAt?: Date | string | null
    createdAt?: Date | string
    propertyId?: number | null
    clientId: number
    invoices?: invoiceUncheckedCreateNestedManyWithoutDealInput
    payments?: paymentUncheckedCreateNestedManyWithoutDealInput
    expenses?: expenseUncheckedCreateNestedManyWithoutDealInput
  }

  export type dealCreateOrConnectWithoutSchedulesInput = {
    where: dealWhereUniqueInput
    create: XOR<dealCreateWithoutSchedulesInput, dealUncheckedCreateWithoutSchedulesInput>
  }

  export type paymentCreateWithoutSchedulesInput = {
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    method?: string
    reference?: string | null
    deal: dealCreateNestedOneWithoutPaymentsInput
    invoice?: invoiceCreateNestedOneWithoutPaymentsInput
  }

  export type paymentUncheckedCreateWithoutSchedulesInput = {
    id?: number
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    method?: string
    reference?: string | null
    dealId: number
    invoiceId?: number | null
  }

  export type paymentCreateOrConnectWithoutSchedulesInput = {
    where: paymentWhereUniqueInput
    create: XOR<paymentCreateWithoutSchedulesInput, paymentUncheckedCreateWithoutSchedulesInput>
  }

  export type dealUpsertWithoutSchedulesInput = {
    update: XOR<dealUpdateWithoutSchedulesInput, dealUncheckedUpdateWithoutSchedulesInput>
    create: XOR<dealCreateWithoutSchedulesInput, dealUncheckedCreateWithoutSchedulesInput>
    where?: dealWhereInput
  }

  export type dealUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: dealWhereInput
    data: XOR<dealUpdateWithoutSchedulesInput, dealUncheckedUpdateWithoutSchedulesInput>
  }

  export type dealUpdateWithoutSchedulesInput = {
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expectedClose?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: clientUpdateOneRequiredWithoutDealsNestedInput
    property?: propertyUpdateOneWithoutDealsNestedInput
    invoices?: invoiceUpdateManyWithoutDealNestedInput
    payments?: paymentUpdateManyWithoutDealNestedInput
    expenses?: expenseUpdateManyWithoutDealNestedInput
  }

  export type dealUncheckedUpdateWithoutSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expectedClose?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    propertyId?: NullableIntFieldUpdateOperationsInput | number | null
    clientId?: IntFieldUpdateOperationsInput | number
    invoices?: invoiceUncheckedUpdateManyWithoutDealNestedInput
    payments?: paymentUncheckedUpdateManyWithoutDealNestedInput
    expenses?: expenseUncheckedUpdateManyWithoutDealNestedInput
  }

  export type paymentUpsertWithoutSchedulesInput = {
    update: XOR<paymentUpdateWithoutSchedulesInput, paymentUncheckedUpdateWithoutSchedulesInput>
    create: XOR<paymentCreateWithoutSchedulesInput, paymentUncheckedCreateWithoutSchedulesInput>
    where?: paymentWhereInput
  }

  export type paymentUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: paymentWhereInput
    data: XOR<paymentUpdateWithoutSchedulesInput, paymentUncheckedUpdateWithoutSchedulesInput>
  }

  export type paymentUpdateWithoutSchedulesInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    deal?: dealUpdateOneRequiredWithoutPaymentsNestedInput
    invoice?: invoiceUpdateOneWithoutPaymentsNestedInput
  }

  export type paymentUncheckedUpdateWithoutSchedulesInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    dealId?: IntFieldUpdateOperationsInput | number
    invoiceId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type projectmediaCreateWithoutProjectInput = {
    kind?: string
    url: string
    alt?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type projectmediaUncheckedCreateWithoutProjectInput = {
    id?: number
    kind?: string
    url: string
    alt?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type projectmediaCreateOrConnectWithoutProjectInput = {
    where: projectmediaWhereUniqueInput
    create: XOR<projectmediaCreateWithoutProjectInput, projectmediaUncheckedCreateWithoutProjectInput>
  }

  export type projectmediaCreateManyProjectInputEnvelope = {
    data: projectmediaCreateManyProjectInput | projectmediaCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type projectmediaUpsertWithWhereUniqueWithoutProjectInput = {
    where: projectmediaWhereUniqueInput
    update: XOR<projectmediaUpdateWithoutProjectInput, projectmediaUncheckedUpdateWithoutProjectInput>
    create: XOR<projectmediaCreateWithoutProjectInput, projectmediaUncheckedCreateWithoutProjectInput>
  }

  export type projectmediaUpdateWithWhereUniqueWithoutProjectInput = {
    where: projectmediaWhereUniqueInput
    data: XOR<projectmediaUpdateWithoutProjectInput, projectmediaUncheckedUpdateWithoutProjectInput>
  }

  export type projectmediaUpdateManyWithWhereWithoutProjectInput = {
    where: projectmediaScalarWhereInput
    data: XOR<projectmediaUpdateManyMutationInput, projectmediaUncheckedUpdateManyWithoutProjectInput>
  }

  export type projectmediaScalarWhereInput = {
    AND?: projectmediaScalarWhereInput | projectmediaScalarWhereInput[]
    OR?: projectmediaScalarWhereInput[]
    NOT?: projectmediaScalarWhereInput | projectmediaScalarWhereInput[]
    id?: IntFilter<"projectmedia"> | number
    projectId?: IntFilter<"projectmedia"> | number
    kind?: StringFilter<"projectmedia"> | string
    url?: StringFilter<"projectmedia"> | string
    alt?: StringNullableFilter<"projectmedia"> | string | null
    order?: IntFilter<"projectmedia"> | number
    createdAt?: DateTimeFilter<"projectmedia"> | Date | string
  }

  export type projectCreateWithoutMediasInput = {
    title: string
    slug: string
    description?: string | null
    coverImage?: string | null
    status?: string | null
    location?: string | null
    category?: string | null
    surface?: Decimal | DecimalJsLike | number | string | null
    units?: number | null
    startedAt?: Date | string | null
    deliveredAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type projectUncheckedCreateWithoutMediasInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    coverImage?: string | null
    status?: string | null
    location?: string | null
    category?: string | null
    surface?: Decimal | DecimalJsLike | number | string | null
    units?: number | null
    startedAt?: Date | string | null
    deliveredAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type projectCreateOrConnectWithoutMediasInput = {
    where: projectWhereUniqueInput
    create: XOR<projectCreateWithoutMediasInput, projectUncheckedCreateWithoutMediasInput>
  }

  export type projectUpsertWithoutMediasInput = {
    update: XOR<projectUpdateWithoutMediasInput, projectUncheckedUpdateWithoutMediasInput>
    create: XOR<projectCreateWithoutMediasInput, projectUncheckedCreateWithoutMediasInput>
    where?: projectWhereInput
  }

  export type projectUpdateToOneWithWhereWithoutMediasInput = {
    where?: projectWhereInput
    data: XOR<projectUpdateWithoutMediasInput, projectUncheckedUpdateWithoutMediasInput>
  }

  export type projectUpdateWithoutMediasInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    surface?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    units?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type projectUncheckedUpdateWithoutMediasInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    coverImage?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    surface?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    units?: NullableIntFieldUpdateOperationsInput | number | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type propertyimageCreateWithoutPropertyInput = {
    url: string
    alt?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type propertyimageUncheckedCreateWithoutPropertyInput = {
    id?: number
    url: string
    alt?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type propertyimageCreateOrConnectWithoutPropertyInput = {
    where: propertyimageWhereUniqueInput
    create: XOR<propertyimageCreateWithoutPropertyInput, propertyimageUncheckedCreateWithoutPropertyInput>
  }

  export type propertyimageCreateManyPropertyInputEnvelope = {
    data: propertyimageCreateManyPropertyInput | propertyimageCreateManyPropertyInput[]
    skipDuplicates?: boolean
  }

  export type dealCreateWithoutPropertyInput = {
    type?: string
    status?: string
    basePrice?: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxRate?: Decimal | DecimalJsLike | number | string
    commissionRate?: Decimal | DecimalJsLike | number | string
    expectedClose?: Date | string | null
    closedAt?: Date | string | null
    createdAt?: Date | string
    client: clientCreateNestedOneWithoutDealsInput
    invoices?: invoiceCreateNestedManyWithoutDealInput
    payments?: paymentCreateNestedManyWithoutDealInput
    schedules?: paymentscheduleCreateNestedManyWithoutDealInput
    expenses?: expenseCreateNestedManyWithoutDealInput
  }

  export type dealUncheckedCreateWithoutPropertyInput = {
    id?: number
    type?: string
    status?: string
    basePrice?: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxRate?: Decimal | DecimalJsLike | number | string
    commissionRate?: Decimal | DecimalJsLike | number | string
    expectedClose?: Date | string | null
    closedAt?: Date | string | null
    createdAt?: Date | string
    clientId: number
    invoices?: invoiceUncheckedCreateNestedManyWithoutDealInput
    payments?: paymentUncheckedCreateNestedManyWithoutDealInput
    schedules?: paymentscheduleUncheckedCreateNestedManyWithoutDealInput
    expenses?: expenseUncheckedCreateNestedManyWithoutDealInput
  }

  export type dealCreateOrConnectWithoutPropertyInput = {
    where: dealWhereUniqueInput
    create: XOR<dealCreateWithoutPropertyInput, dealUncheckedCreateWithoutPropertyInput>
  }

  export type dealCreateManyPropertyInputEnvelope = {
    data: dealCreateManyPropertyInput | dealCreateManyPropertyInput[]
    skipDuplicates?: boolean
  }

  export type expenseCreateWithoutPropertyInput = {
    date?: Date | string
    category: string
    description?: string | null
    amount: Decimal | DecimalJsLike | number | string
    payee?: string | null
    deal?: dealCreateNestedOneWithoutExpensesInput
  }

  export type expenseUncheckedCreateWithoutPropertyInput = {
    id?: number
    date?: Date | string
    category: string
    description?: string | null
    amount: Decimal | DecimalJsLike | number | string
    payee?: string | null
    dealId?: number | null
  }

  export type expenseCreateOrConnectWithoutPropertyInput = {
    where: expenseWhereUniqueInput
    create: XOR<expenseCreateWithoutPropertyInput, expenseUncheckedCreateWithoutPropertyInput>
  }

  export type expenseCreateManyPropertyInputEnvelope = {
    data: expenseCreateManyPropertyInput | expenseCreateManyPropertyInput[]
    skipDuplicates?: boolean
  }

  export type inquiryCreateWithoutPropertyInput = {
    fullName: string
    phone?: string | null
    email?: string | null
    message?: string | null
    type?: $Enums.inquiry_type
    status?: $Enums.inquiry_status
    createdAt?: Date | string
  }

  export type inquiryUncheckedCreateWithoutPropertyInput = {
    id?: number
    fullName: string
    phone?: string | null
    email?: string | null
    message?: string | null
    type?: $Enums.inquiry_type
    status?: $Enums.inquiry_status
    createdAt?: Date | string
  }

  export type inquiryCreateOrConnectWithoutPropertyInput = {
    where: inquiryWhereUniqueInput
    create: XOR<inquiryCreateWithoutPropertyInput, inquiryUncheckedCreateWithoutPropertyInput>
  }

  export type inquiryCreateManyPropertyInputEnvelope = {
    data: inquiryCreateManyPropertyInput | inquiryCreateManyPropertyInput[]
    skipDuplicates?: boolean
  }

  export type contactleadCreateWithoutPropertyInput = {
    name: string
    email?: string | null
    phone?: string | null
    message: string
    source?: string
    createdAt?: Date | string
  }

  export type contactleadUncheckedCreateWithoutPropertyInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    message: string
    source?: string
    createdAt?: Date | string
  }

  export type contactleadCreateOrConnectWithoutPropertyInput = {
    where: contactleadWhereUniqueInput
    create: XOR<contactleadCreateWithoutPropertyInput, contactleadUncheckedCreateWithoutPropertyInput>
  }

  export type contactleadCreateManyPropertyInputEnvelope = {
    data: contactleadCreateManyPropertyInput | contactleadCreateManyPropertyInput[]
    skipDuplicates?: boolean
  }

  export type coownershipCreateWithoutPropertyInput = {
    share?: Decimal | DecimalJsLike | number | string
    role?: string
    createdAt?: Date | string
    client: clientCreateNestedOneWithoutCoOwnershipsInput
  }

  export type coownershipUncheckedCreateWithoutPropertyInput = {
    id?: number
    clientId: number
    share?: Decimal | DecimalJsLike | number | string
    role?: string
    createdAt?: Date | string
  }

  export type coownershipCreateOrConnectWithoutPropertyInput = {
    where: coownershipWhereUniqueInput
    create: XOR<coownershipCreateWithoutPropertyInput, coownershipUncheckedCreateWithoutPropertyInput>
  }

  export type coownershipCreateManyPropertyInputEnvelope = {
    data: coownershipCreateManyPropertyInput | coownershipCreateManyPropertyInput[]
    skipDuplicates?: boolean
  }

  export type propertyimageUpsertWithWhereUniqueWithoutPropertyInput = {
    where: propertyimageWhereUniqueInput
    update: XOR<propertyimageUpdateWithoutPropertyInput, propertyimageUncheckedUpdateWithoutPropertyInput>
    create: XOR<propertyimageCreateWithoutPropertyInput, propertyimageUncheckedCreateWithoutPropertyInput>
  }

  export type propertyimageUpdateWithWhereUniqueWithoutPropertyInput = {
    where: propertyimageWhereUniqueInput
    data: XOR<propertyimageUpdateWithoutPropertyInput, propertyimageUncheckedUpdateWithoutPropertyInput>
  }

  export type propertyimageUpdateManyWithWhereWithoutPropertyInput = {
    where: propertyimageScalarWhereInput
    data: XOR<propertyimageUpdateManyMutationInput, propertyimageUncheckedUpdateManyWithoutPropertyInput>
  }

  export type propertyimageScalarWhereInput = {
    AND?: propertyimageScalarWhereInput | propertyimageScalarWhereInput[]
    OR?: propertyimageScalarWhereInput[]
    NOT?: propertyimageScalarWhereInput | propertyimageScalarWhereInput[]
    id?: IntFilter<"propertyimage"> | number
    propertyId?: IntFilter<"propertyimage"> | number
    url?: StringFilter<"propertyimage"> | string
    alt?: StringNullableFilter<"propertyimage"> | string | null
    order?: IntFilter<"propertyimage"> | number
    createdAt?: DateTimeFilter<"propertyimage"> | Date | string
  }

  export type dealUpsertWithWhereUniqueWithoutPropertyInput = {
    where: dealWhereUniqueInput
    update: XOR<dealUpdateWithoutPropertyInput, dealUncheckedUpdateWithoutPropertyInput>
    create: XOR<dealCreateWithoutPropertyInput, dealUncheckedCreateWithoutPropertyInput>
  }

  export type dealUpdateWithWhereUniqueWithoutPropertyInput = {
    where: dealWhereUniqueInput
    data: XOR<dealUpdateWithoutPropertyInput, dealUncheckedUpdateWithoutPropertyInput>
  }

  export type dealUpdateManyWithWhereWithoutPropertyInput = {
    where: dealScalarWhereInput
    data: XOR<dealUpdateManyMutationInput, dealUncheckedUpdateManyWithoutPropertyInput>
  }

  export type expenseUpsertWithWhereUniqueWithoutPropertyInput = {
    where: expenseWhereUniqueInput
    update: XOR<expenseUpdateWithoutPropertyInput, expenseUncheckedUpdateWithoutPropertyInput>
    create: XOR<expenseCreateWithoutPropertyInput, expenseUncheckedCreateWithoutPropertyInput>
  }

  export type expenseUpdateWithWhereUniqueWithoutPropertyInput = {
    where: expenseWhereUniqueInput
    data: XOR<expenseUpdateWithoutPropertyInput, expenseUncheckedUpdateWithoutPropertyInput>
  }

  export type expenseUpdateManyWithWhereWithoutPropertyInput = {
    where: expenseScalarWhereInput
    data: XOR<expenseUpdateManyMutationInput, expenseUncheckedUpdateManyWithoutPropertyInput>
  }

  export type inquiryUpsertWithWhereUniqueWithoutPropertyInput = {
    where: inquiryWhereUniqueInput
    update: XOR<inquiryUpdateWithoutPropertyInput, inquiryUncheckedUpdateWithoutPropertyInput>
    create: XOR<inquiryCreateWithoutPropertyInput, inquiryUncheckedCreateWithoutPropertyInput>
  }

  export type inquiryUpdateWithWhereUniqueWithoutPropertyInput = {
    where: inquiryWhereUniqueInput
    data: XOR<inquiryUpdateWithoutPropertyInput, inquiryUncheckedUpdateWithoutPropertyInput>
  }

  export type inquiryUpdateManyWithWhereWithoutPropertyInput = {
    where: inquiryScalarWhereInput
    data: XOR<inquiryUpdateManyMutationInput, inquiryUncheckedUpdateManyWithoutPropertyInput>
  }

  export type inquiryScalarWhereInput = {
    AND?: inquiryScalarWhereInput | inquiryScalarWhereInput[]
    OR?: inquiryScalarWhereInput[]
    NOT?: inquiryScalarWhereInput | inquiryScalarWhereInput[]
    id?: IntFilter<"inquiry"> | number
    propertyId?: IntFilter<"inquiry"> | number
    fullName?: StringFilter<"inquiry"> | string
    phone?: StringNullableFilter<"inquiry"> | string | null
    email?: StringNullableFilter<"inquiry"> | string | null
    message?: StringNullableFilter<"inquiry"> | string | null
    type?: Enuminquiry_typeFilter<"inquiry"> | $Enums.inquiry_type
    status?: Enuminquiry_statusFilter<"inquiry"> | $Enums.inquiry_status
    createdAt?: DateTimeFilter<"inquiry"> | Date | string
  }

  export type contactleadUpsertWithWhereUniqueWithoutPropertyInput = {
    where: contactleadWhereUniqueInput
    update: XOR<contactleadUpdateWithoutPropertyInput, contactleadUncheckedUpdateWithoutPropertyInput>
    create: XOR<contactleadCreateWithoutPropertyInput, contactleadUncheckedCreateWithoutPropertyInput>
  }

  export type contactleadUpdateWithWhereUniqueWithoutPropertyInput = {
    where: contactleadWhereUniqueInput
    data: XOR<contactleadUpdateWithoutPropertyInput, contactleadUncheckedUpdateWithoutPropertyInput>
  }

  export type contactleadUpdateManyWithWhereWithoutPropertyInput = {
    where: contactleadScalarWhereInput
    data: XOR<contactleadUpdateManyMutationInput, contactleadUncheckedUpdateManyWithoutPropertyInput>
  }

  export type contactleadScalarWhereInput = {
    AND?: contactleadScalarWhereInput | contactleadScalarWhereInput[]
    OR?: contactleadScalarWhereInput[]
    NOT?: contactleadScalarWhereInput | contactleadScalarWhereInput[]
    id?: IntFilter<"contactlead"> | number
    name?: StringFilter<"contactlead"> | string
    email?: StringNullableFilter<"contactlead"> | string | null
    phone?: StringNullableFilter<"contactlead"> | string | null
    message?: StringFilter<"contactlead"> | string
    source?: StringFilter<"contactlead"> | string
    createdAt?: DateTimeFilter<"contactlead"> | Date | string
    propertyId?: IntNullableFilter<"contactlead"> | number | null
  }

  export type coownershipUpsertWithWhereUniqueWithoutPropertyInput = {
    where: coownershipWhereUniqueInput
    update: XOR<coownershipUpdateWithoutPropertyInput, coownershipUncheckedUpdateWithoutPropertyInput>
    create: XOR<coownershipCreateWithoutPropertyInput, coownershipUncheckedCreateWithoutPropertyInput>
  }

  export type coownershipUpdateWithWhereUniqueWithoutPropertyInput = {
    where: coownershipWhereUniqueInput
    data: XOR<coownershipUpdateWithoutPropertyInput, coownershipUncheckedUpdateWithoutPropertyInput>
  }

  export type coownershipUpdateManyWithWhereWithoutPropertyInput = {
    where: coownershipScalarWhereInput
    data: XOR<coownershipUpdateManyMutationInput, coownershipUncheckedUpdateManyWithoutPropertyInput>
  }

  export type propertyCreateWithoutImagesInput = {
    title: string
    slug: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    location?: string | null
    category?: string | null
    bedrooms?: number | null
    bathrooms?: number | null
    area_m2?: Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: number | null
    type?: string | null
    yearOfConstruction?: number | null
    capacity?: number | null
    status?: string | null
    mainImage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deals?: dealCreateNestedManyWithoutPropertyInput
    expenses?: expenseCreateNestedManyWithoutPropertyInput
    inquiries?: inquiryCreateNestedManyWithoutPropertyInput
    contactLeads?: contactleadCreateNestedManyWithoutPropertyInput
    coOwnerships?: coownershipCreateNestedManyWithoutPropertyInput
  }

  export type propertyUncheckedCreateWithoutImagesInput = {
    id?: number
    title: string
    slug: string
    description?: string | null
    price?: Decimal | DecimalJsLike | number | string | null
    location?: string | null
    category?: string | null
    bedrooms?: number | null
    bathrooms?: number | null
    area_m2?: Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: number | null
    type?: string | null
    yearOfConstruction?: number | null
    capacity?: number | null
    status?: string | null
    mainImage?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deals?: dealUncheckedCreateNestedManyWithoutPropertyInput
    expenses?: expenseUncheckedCreateNestedManyWithoutPropertyInput
    inquiries?: inquiryUncheckedCreateNestedManyWithoutPropertyInput
    contactLeads?: contactleadUncheckedCreateNestedManyWithoutPropertyInput
    coOwnerships?: coownershipUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type propertyCreateOrConnectWithoutImagesInput = {
    where: propertyWhereUniqueInput
    create: XOR<propertyCreateWithoutImagesInput, propertyUncheckedCreateWithoutImagesInput>
  }

  export type propertyUpsertWithoutImagesInput = {
    update: XOR<propertyUpdateWithoutImagesInput, propertyUncheckedUpdateWithoutImagesInput>
    create: XOR<propertyCreateWithoutImagesInput, propertyUncheckedCreateWithoutImagesInput>
    where?: propertyWhereInput
  }

  export type propertyUpdateToOneWithWhereWithoutImagesInput = {
    where?: propertyWhereInput
    data: XOR<propertyUpdateWithoutImagesInput, propertyUncheckedUpdateWithoutImagesInput>
  }

  export type propertyUpdateWithoutImagesInput = {
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    bathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    area_m2?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfConstruction?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deals?: dealUpdateManyWithoutPropertyNestedInput
    expenses?: expenseUpdateManyWithoutPropertyNestedInput
    inquiries?: inquiryUpdateManyWithoutPropertyNestedInput
    contactLeads?: contactleadUpdateManyWithoutPropertyNestedInput
    coOwnerships?: coownershipUpdateManyWithoutPropertyNestedInput
  }

  export type propertyUncheckedUpdateWithoutImagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    bedrooms?: NullableIntFieldUpdateOperationsInput | number | null
    bathrooms?: NullableIntFieldUpdateOperationsInput | number | null
    area_m2?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    surfaceHabitable?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    yearOfConstruction?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    mainImage?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deals?: dealUncheckedUpdateManyWithoutPropertyNestedInput
    expenses?: expenseUncheckedUpdateManyWithoutPropertyNestedInput
    inquiries?: inquiryUncheckedUpdateManyWithoutPropertyNestedInput
    contactLeads?: contactleadUncheckedUpdateManyWithoutPropertyNestedInput
    coOwnerships?: coownershipUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type dealCreateManyClientInput = {
    id?: number
    type?: string
    status?: string
    basePrice?: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxRate?: Decimal | DecimalJsLike | number | string
    commissionRate?: Decimal | DecimalJsLike | number | string
    expectedClose?: Date | string | null
    closedAt?: Date | string | null
    createdAt?: Date | string
    propertyId?: number | null
  }

  export type coownershipCreateManyClientInput = {
    id?: number
    propertyId: number
    share?: Decimal | DecimalJsLike | number | string
    role?: string
    createdAt?: Date | string
  }

  export type dealUpdateWithoutClientInput = {
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expectedClose?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    property?: propertyUpdateOneWithoutDealsNestedInput
    invoices?: invoiceUpdateManyWithoutDealNestedInput
    payments?: paymentUpdateManyWithoutDealNestedInput
    schedules?: paymentscheduleUpdateManyWithoutDealNestedInput
    expenses?: expenseUpdateManyWithoutDealNestedInput
  }

  export type dealUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expectedClose?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    propertyId?: NullableIntFieldUpdateOperationsInput | number | null
    invoices?: invoiceUncheckedUpdateManyWithoutDealNestedInput
    payments?: paymentUncheckedUpdateManyWithoutDealNestedInput
    schedules?: paymentscheduleUncheckedUpdateManyWithoutDealNestedInput
    expenses?: expenseUncheckedUpdateManyWithoutDealNestedInput
  }

  export type dealUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expectedClose?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    propertyId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type coownershipUpdateWithoutClientInput = {
    share?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    property?: propertyUpdateOneRequiredWithoutCoOwnershipsNestedInput
  }

  export type coownershipUncheckedUpdateWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    propertyId?: IntFieldUpdateOperationsInput | number
    share?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type coownershipUncheckedUpdateManyWithoutClientInput = {
    id?: IntFieldUpdateOperationsInput | number
    propertyId?: IntFieldUpdateOperationsInput | number
    share?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type invoiceCreateManyDealInput = {
    id?: number
    number: string
    issueDate?: Date | string
    dueDate?: Date | string | null
    amount: Decimal | DecimalJsLike | number | string
    status?: string
  }

  export type paymentCreateManyDealInput = {
    id?: number
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    method?: string
    reference?: string | null
    invoiceId?: number | null
  }

  export type paymentscheduleCreateManyDealInput = {
    id?: number
    label: string
    dueDate: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status?: string
    paymentId?: number | null
    createdAt?: Date | string
  }

  export type expenseCreateManyDealInput = {
    id?: number
    date?: Date | string
    category: string
    description?: string | null
    amount: Decimal | DecimalJsLike | number | string
    payee?: string | null
    propertyId?: number | null
  }

  export type invoiceUpdateWithoutDealInput = {
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    payments?: paymentUpdateManyWithoutInvoiceNestedInput
  }

  export type invoiceUncheckedUpdateWithoutDealInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    payments?: paymentUncheckedUpdateManyWithoutInvoiceNestedInput
  }

  export type invoiceUncheckedUpdateManyWithoutDealInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: StringFieldUpdateOperationsInput | string
    issueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type paymentUpdateWithoutDealInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    invoice?: invoiceUpdateOneWithoutPaymentsNestedInput
    schedules?: paymentscheduleUpdateManyWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateWithoutDealInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceId?: NullableIntFieldUpdateOperationsInput | number | null
    schedules?: paymentscheduleUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateManyWithoutDealInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    invoiceId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type paymentscheduleUpdateWithoutDealInput = {
    label?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment?: paymentUpdateOneWithoutSchedulesNestedInput
  }

  export type paymentscheduleUncheckedUpdateWithoutDealInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentscheduleUncheckedUpdateManyWithoutDealInput = {
    id?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type expenseUpdateWithoutDealInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payee?: NullableStringFieldUpdateOperationsInput | string | null
    property?: propertyUpdateOneWithoutExpensesNestedInput
  }

  export type expenseUncheckedUpdateWithoutDealInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payee?: NullableStringFieldUpdateOperationsInput | string | null
    propertyId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type expenseUncheckedUpdateManyWithoutDealInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payee?: NullableStringFieldUpdateOperationsInput | string | null
    propertyId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type paymentCreateManyInvoiceInput = {
    id?: number
    date?: Date | string
    amount: Decimal | DecimalJsLike | number | string
    method?: string
    reference?: string | null
    dealId: number
  }

  export type paymentUpdateWithoutInvoiceInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    deal?: dealUpdateOneRequiredWithoutPaymentsNestedInput
    schedules?: paymentscheduleUpdateManyWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    dealId?: IntFieldUpdateOperationsInput | number
    schedules?: paymentscheduleUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type paymentUncheckedUpdateManyWithoutInvoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    method?: StringFieldUpdateOperationsInput | string
    reference?: NullableStringFieldUpdateOperationsInput | string | null
    dealId?: IntFieldUpdateOperationsInput | number
  }

  export type paymentscheduleCreateManyPaymentInput = {
    id?: number
    dealId: number
    label: string
    dueDate: Date | string
    amount: Decimal | DecimalJsLike | number | string
    status?: string
    createdAt?: Date | string
  }

  export type paymentscheduleUpdateWithoutPaymentInput = {
    label?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deal?: dealUpdateOneRequiredWithoutSchedulesNestedInput
  }

  export type paymentscheduleUncheckedUpdateWithoutPaymentInput = {
    id?: IntFieldUpdateOperationsInput | number
    dealId?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentscheduleUncheckedUpdateManyWithoutPaymentInput = {
    id?: IntFieldUpdateOperationsInput | number
    dealId?: IntFieldUpdateOperationsInput | number
    label?: StringFieldUpdateOperationsInput | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type projectmediaCreateManyProjectInput = {
    id?: number
    kind?: string
    url: string
    alt?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type projectmediaUpdateWithoutProjectInput = {
    kind?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type projectmediaUncheckedUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    kind?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type projectmediaUncheckedUpdateManyWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    kind?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type propertyimageCreateManyPropertyInput = {
    id?: number
    url: string
    alt?: string | null
    order?: number
    createdAt?: Date | string
  }

  export type dealCreateManyPropertyInput = {
    id?: number
    type?: string
    status?: string
    basePrice?: Decimal | DecimalJsLike | number | string
    discount?: Decimal | DecimalJsLike | number | string
    taxRate?: Decimal | DecimalJsLike | number | string
    commissionRate?: Decimal | DecimalJsLike | number | string
    expectedClose?: Date | string | null
    closedAt?: Date | string | null
    createdAt?: Date | string
    clientId: number
  }

  export type expenseCreateManyPropertyInput = {
    id?: number
    date?: Date | string
    category: string
    description?: string | null
    amount: Decimal | DecimalJsLike | number | string
    payee?: string | null
    dealId?: number | null
  }

  export type inquiryCreateManyPropertyInput = {
    id?: number
    fullName: string
    phone?: string | null
    email?: string | null
    message?: string | null
    type?: $Enums.inquiry_type
    status?: $Enums.inquiry_status
    createdAt?: Date | string
  }

  export type contactleadCreateManyPropertyInput = {
    id?: number
    name: string
    email?: string | null
    phone?: string | null
    message: string
    source?: string
    createdAt?: Date | string
  }

  export type coownershipCreateManyPropertyInput = {
    id?: number
    clientId: number
    share?: Decimal | DecimalJsLike | number | string
    role?: string
    createdAt?: Date | string
  }

  export type propertyimageUpdateWithoutPropertyInput = {
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type propertyimageUncheckedUpdateWithoutPropertyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type propertyimageUncheckedUpdateManyWithoutPropertyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type dealUpdateWithoutPropertyInput = {
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expectedClose?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: clientUpdateOneRequiredWithoutDealsNestedInput
    invoices?: invoiceUpdateManyWithoutDealNestedInput
    payments?: paymentUpdateManyWithoutDealNestedInput
    schedules?: paymentscheduleUpdateManyWithoutDealNestedInput
    expenses?: expenseUpdateManyWithoutDealNestedInput
  }

  export type dealUncheckedUpdateWithoutPropertyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expectedClose?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: IntFieldUpdateOperationsInput | number
    invoices?: invoiceUncheckedUpdateManyWithoutDealNestedInput
    payments?: paymentUncheckedUpdateManyWithoutDealNestedInput
    schedules?: paymentscheduleUncheckedUpdateManyWithoutDealNestedInput
    expenses?: expenseUncheckedUpdateManyWithoutDealNestedInput
  }

  export type dealUncheckedUpdateManyWithoutPropertyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    basePrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    taxRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    commissionRate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expectedClose?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    clientId?: IntFieldUpdateOperationsInput | number
  }

  export type expenseUpdateWithoutPropertyInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payee?: NullableStringFieldUpdateOperationsInput | string | null
    deal?: dealUpdateOneWithoutExpensesNestedInput
  }

  export type expenseUncheckedUpdateWithoutPropertyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payee?: NullableStringFieldUpdateOperationsInput | string | null
    dealId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type expenseUncheckedUpdateManyWithoutPropertyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payee?: NullableStringFieldUpdateOperationsInput | string | null
    dealId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type inquiryUpdateWithoutPropertyInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enuminquiry_typeFieldUpdateOperationsInput | $Enums.inquiry_type
    status?: Enuminquiry_statusFieldUpdateOperationsInput | $Enums.inquiry_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type inquiryUncheckedUpdateWithoutPropertyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enuminquiry_typeFieldUpdateOperationsInput | $Enums.inquiry_type
    status?: Enuminquiry_statusFieldUpdateOperationsInput | $Enums.inquiry_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type inquiryUncheckedUpdateManyWithoutPropertyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    message?: NullableStringFieldUpdateOperationsInput | string | null
    type?: Enuminquiry_typeFieldUpdateOperationsInput | $Enums.inquiry_type
    status?: Enuminquiry_statusFieldUpdateOperationsInput | $Enums.inquiry_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type contactleadUpdateWithoutPropertyInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type contactleadUncheckedUpdateWithoutPropertyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type contactleadUncheckedUpdateManyWithoutPropertyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type coownershipUpdateWithoutPropertyInput = {
    share?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    client?: clientUpdateOneRequiredWithoutCoOwnershipsNestedInput
  }

  export type coownershipUncheckedUpdateWithoutPropertyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    share?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type coownershipUncheckedUpdateManyWithoutPropertyInput = {
    id?: IntFieldUpdateOperationsInput | number
    clientId?: IntFieldUpdateOperationsInput | number
    share?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}