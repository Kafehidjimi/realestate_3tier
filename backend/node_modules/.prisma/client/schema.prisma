generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Service {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  icon        String?
}

model Project {
  id       Int     @id @default(autoincrement())
  title    String  @db.VarChar(191)
  slug     String  @unique @db.VarChar(191)
  image    String? @db.VarChar(191)
  category String? @db.VarChar(191)
  location String? @db.VarChar(191)
  annee    String? @db.VarChar(191)

  @@map("projects")
}

model Property {
  id               Int           @id @default(autoincrement())
  title            String
  slug             String        @unique
  description      String?
  price            Decimal?      @db.Decimal(14, 2)
  location         String?
  area_m2          Int?
  bedrooms         Int?
  bathrooms        Int?
  status           String        @default("sale")
  mainImage        String?
  isCopropertyOpen Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  leads            ContactLead[]
  deals            Deal[]
  // AJOUTS pour corriger Prisma
  expenses         Expense[] // <— inverse de Expense.property
  coowners         CoOwnership[] // <— inverse de CoOwnership.property
}

model ContactLead {
  id         Int       @id @default(autoincrement())
  name       String
  email      String?
  phone      String?
  message    String
  source     String    @default("Formulaire site")
  createdAt  DateTime  @default(now())
  property   Property? @relation(fields: [propertyId], references: [id])
  propertyId Int?
}

model Client {
  id           Int           @id @default(autoincrement())
  name         String
  email        String?
  phone        String?
  address      String?
  idNumber     String?
  notes        String?
  deals        Deal[]
  // AJOUT
  coownerships CoOwnership[] // <— inverse de CoOwnership.client
}

model Deal {
  id             Int               @id @default(autoincrement())
  type           String            @default("sale")
  status         String            @default("draft")
  basePrice      Decimal           @default(0) @db.Decimal(14, 2)
  discount       Decimal           @default(0) @db.Decimal(14, 2)
  taxRate        Decimal           @default(0) @db.Decimal(5, 2)
  commissionRate Decimal           @default(0) @db.Decimal(5, 2)
  expectedClose  DateTime?
  closedAt       DateTime?
  createdAt      DateTime          @default(now())
  property       Property?         @relation(fields: [propertyId], references: [id])
  propertyId     Int?
  client         Client            @relation(fields: [clientId], references: [id])
  clientId       Int
  invoices       Invoice[]
  payments       Payment[]
  expenses       Expense[]
  // AJOUT
  schedules      PaymentSchedule[] // <— inverse de PaymentSchedule.deal
}

model Invoice {
  id        Int       @id @default(autoincrement())
  number    String    @unique
  issueDate DateTime  @default(now())
  dueDate   DateTime?
  amount    Decimal   @db.Decimal(14, 2)
  status    String    @default("open")
  deal      Deal      @relation(fields: [dealId], references: [id])
  dealId    Int
  payments  Payment[]
}

model Payment {
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now())
  amount    Decimal  @db.Decimal(14, 2)
  method    String   @default("cash")
  reference String?
  deal      Deal     @relation(fields: [dealId], references: [id])
  dealId    Int
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId Int?

  // back-relation 1–1 (une tranche peut être soldée par un paiement)
  schedule PaymentSchedule?
}

model Expense {
  id          Int       @id @default(autoincrement())
  date        DateTime  @default(now())
  category    String
  description String?
  amount      Decimal   @db.Decimal(14, 2)
  payee       String?
  deal        Deal?     @relation(fields: [dealId], references: [id])
  dealId      Int?
  property    Property? @relation(fields: [propertyId], references: [id])
  propertyId  Int?
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  name      String?
  isStaff   Boolean    @default(true)
  role      String     @default("admin") // admin, sales, viewer
  createdAt DateTime   @default(now())
  // AJOUT
  auditLogs AuditLog[] // <— inverse de AuditLog.user
}

model CoOwnership {
  id         Int      @id @default(autoincrement())
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
  client     Client   @relation(fields: [clientId], references: [id])
  clientId   Int
  share      Decimal  @default(0) @db.Decimal(5, 2) // %
  role       String   @default("coowner")
  createdAt  DateTime @default(now())

  @@unique([propertyId, clientId])
}

model PaymentSchedule {
  id      Int      @id @default(autoincrement())
  deal    Deal     @relation(fields: [dealId], references: [id])
  dealId  Int
  label   String
  dueDate DateTime
  amount  Decimal  @db.Decimal(14, 2)
  status  String   @default("pending") // pending, paid, overdue

  // relation 1–1 vers Payment : la FK doit être UNIQUE
  payment   Payment? @relation(fields: [paymentId], references: [id])
  paymentId Int?     @unique

  createdAt DateTime @default(now())
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  entity    String
  entityId  Int?
  before    Json?
  after     Json?
  createdAt DateTime @default(now())
}
