
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AuditlogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  entity: 'entity',
  entityId: 'entityId',
  before: 'before',
  after: 'after',
  createdAt: 'createdAt'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  idNumber: 'idNumber',
  notes: 'notes'
};

exports.Prisma.ContactleadScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  message: 'message',
  source: 'source',
  createdAt: 'createdAt',
  propertyId: 'propertyId'
};

exports.Prisma.CoownershipScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  clientId: 'clientId',
  share: 'share',
  role: 'role',
  createdAt: 'createdAt'
};

exports.Prisma.DealScalarFieldEnum = {
  id: 'id',
  type: 'type',
  status: 'status',
  basePrice: 'basePrice',
  discount: 'discount',
  taxRate: 'taxRate',
  commissionRate: 'commissionRate',
  expectedClose: 'expectedClose',
  closedAt: 'closedAt',
  createdAt: 'createdAt',
  propertyId: 'propertyId',
  clientId: 'clientId'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  date: 'date',
  category: 'category',
  description: 'description',
  amount: 'amount',
  payee: 'payee',
  dealId: 'dealId',
  propertyId: 'propertyId'
};

exports.Prisma.InquiryScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  fullName: 'fullName',
  phone: 'phone',
  email: 'email',
  message: 'message',
  type: 'type',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  number: 'number',
  issueDate: 'issueDate',
  dueDate: 'dueDate',
  amount: 'amount',
  status: 'status',
  dealId: 'dealId'
};

exports.Prisma.PagecontentScalarFieldEnum = {
  id: 'id',
  page: 'page',
  section: 'section',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  date: 'date',
  amount: 'amount',
  method: 'method',
  reference: 'reference',
  dealId: 'dealId',
  invoiceId: 'invoiceId'
};

exports.Prisma.PaymentscheduleScalarFieldEnum = {
  id: 'id',
  dealId: 'dealId',
  label: 'label',
  dueDate: 'dueDate',
  amount: 'amount',
  status: 'status',
  paymentId: 'paymentId',
  createdAt: 'createdAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  coverImage: 'coverImage',
  status: 'status',
  location: 'location',
  category: 'category',
  surface: 'surface',
  units: 'units',
  startedAt: 'startedAt',
  deliveredAt: 'deliveredAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectmediaScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  kind: 'kind',
  url: 'url',
  alt: 'alt',
  order: 'order',
  createdAt: 'createdAt'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  price: 'price',
  location: 'location',
  category: 'category',
  bedrooms: 'bedrooms',
  bathrooms: 'bathrooms',
  area_m2: 'area_m2',
  surfaceHabitable: 'surfaceHabitable',
  type: 'type',
  yearOfConstruction: 'yearOfConstruction',
  capacity: 'capacity',
  status: 'status',
  mainImage: 'mainImage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyimageScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  url: 'url',
  alt: 'alt',
  order: 'order',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  title: 'title',
  description: 'description',
  content: 'content',
  icon: 'icon',
  slug: 'slug'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  isStaff: 'isStaff',
  role: 'role',
  createdAt: 'createdAt'
};

exports.Prisma.CompanyinfoScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  category: 'category',
  label: 'label',
  order: 'order',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.auditlogOrderByRelevanceFieldEnum = {
  action: 'action',
  entity: 'entity'
};

exports.Prisma.clientOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  idNumber: 'idNumber',
  notes: 'notes'
};

exports.Prisma.contactleadOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  phone: 'phone',
  message: 'message',
  source: 'source'
};

exports.Prisma.coownershipOrderByRelevanceFieldEnum = {
  role: 'role'
};

exports.Prisma.dealOrderByRelevanceFieldEnum = {
  type: 'type',
  status: 'status'
};

exports.Prisma.expenseOrderByRelevanceFieldEnum = {
  category: 'category',
  description: 'description',
  payee: 'payee'
};

exports.Prisma.inquiryOrderByRelevanceFieldEnum = {
  fullName: 'fullName',
  phone: 'phone',
  email: 'email',
  message: 'message'
};

exports.Prisma.invoiceOrderByRelevanceFieldEnum = {
  number: 'number',
  status: 'status'
};

exports.Prisma.pagecontentOrderByRelevanceFieldEnum = {
  page: 'page',
  section: 'section',
  key: 'key'
};

exports.Prisma.paymentOrderByRelevanceFieldEnum = {
  method: 'method',
  reference: 'reference'
};

exports.Prisma.paymentscheduleOrderByRelevanceFieldEnum = {
  label: 'label',
  status: 'status'
};

exports.Prisma.projectOrderByRelevanceFieldEnum = {
  title: 'title',
  slug: 'slug',
  description: 'description',
  coverImage: 'coverImage',
  status: 'status',
  location: 'location',
  category: 'category'
};

exports.Prisma.projectmediaOrderByRelevanceFieldEnum = {
  kind: 'kind',
  url: 'url',
  alt: 'alt'
};

exports.Prisma.propertyOrderByRelevanceFieldEnum = {
  title: 'title',
  slug: 'slug',
  description: 'description',
  location: 'location',
  category: 'category',
  type: 'type',
  status: 'status',
  mainImage: 'mainImage'
};

exports.Prisma.propertyimageOrderByRelevanceFieldEnum = {
  url: 'url',
  alt: 'alt'
};

exports.Prisma.serviceOrderByRelevanceFieldEnum = {
  name: 'name',
  title: 'title',
  description: 'description',
  content: 'content',
  icon: 'icon',
  slug: 'slug'
};

exports.Prisma.userOrderByRelevanceFieldEnum = {
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role'
};

exports.Prisma.companyinfoOrderByRelevanceFieldEnum = {
  key: 'key',
  value: 'value',
  category: 'category',
  label: 'label'
};
exports.inquiry_type = exports.$Enums.inquiry_type = {
  visit: 'visit',
  info: 'info'
};

exports.inquiry_status = exports.$Enums.inquiry_status = {
  new: 'new',
  contacted: 'contacted',
  closed: 'closed'
};

exports.Prisma.ModelName = {
  auditlog: 'auditlog',
  client: 'client',
  contactlead: 'contactlead',
  coownership: 'coownership',
  deal: 'deal',
  expense: 'expense',
  inquiry: 'inquiry',
  invoice: 'invoice',
  pagecontent: 'pagecontent',
  payment: 'payment',
  paymentschedule: 'paymentschedule',
  project: 'project',
  projectmedia: 'projectmedia',
  property: 'property',
  propertyimage: 'propertyimage',
  service: 'service',
  user: 'user',
  companyinfo: 'companyinfo'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
